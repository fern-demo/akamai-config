{
  "components": {
    "schemas": {
      "allof-dynamic-sample": {
        "allOf": [
          {
            "properties": {
              "george": {
                "example": "Harrison",
                "type": "string"
              },
              "john": {
                "example": "Lennon",
                "type": "string"
              },
              "paul": {
                "example": "McCartney",
                "type": "string"
              },
              "ringo": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/dynamic-beatles.yaml"
            }
          },
          {
            "properties": {
              "brian": {
                "example": false,
                "type": "boolean"
              },
              "charlie": {
                "example": 5,
                "type": "integer"
              },
              "keith": {
                "example": 7,
                "type": "integer"
              },
              "mick": {
                "example": 6,
                "type": "integer"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/dynamic-stones.yaml"
            }
          }
        ],
        "x-akamai": {
          "file-path": "schemas/allof-dynamic-sample.yaml"
        }
      },
      "arr": {
        "description": "Array tests.",
        "properties": {
          "arr-bool": {
            "description": "This is a bitmap, which is weird API design.",
            "items": {
              "type": "boolean"
            },
            "minItems": 1,
            "type": "array"
          },
          "arr-delim-inaccurate": {
            "description": "A list of comma-separated values.",
            "items": {
              "description": "Includes space delimited values.",
              "type": "string"
            },
            "type": "array"
          },
          "arr-desc-mismatch": {
            "description": "This is the outer description.",
            "items": {
              "description": "This is the inner description.",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "arr-desc-misplaced": {
            "items": {
              "description": "There's only an inner description.",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "arr-desc-redundant": {
            "description": "This is the same description.",
            "items": {
              "description": "This is the same description.",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "arr-desc-verbose": {
            "description": "A list of comma-separated values.",
            "items": {
              "description": "An object delimited by a comma.",
              "properties": {
                "prop": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "arr-enum-desc": {
            "description": "Throw a warning if the component `items` is an enum. In that case, we don't want to log `str-enum-desc-unlisted` on the non-publishing description within the `items`.",
            "items": {
              "description": "This doesn't describe enum values.",
              "enum": [
                "chico",
                "groucho",
                "harpo"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "arr-enum-desc-link": {
            "description": "Don't throw the `str-enum-desc-unlisted` error because the link is included. See [Values link](https://techdocs.akamai.com/internal-ux-writing/reference/slug).",
            "items": {
              "description": "This doesn't describe enum values.",
              "enum": [
                "chico",
                "groucho",
                "harpo"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "arr-max": {
            "description": "Array specifies `maxItems`.",
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          },
          "arr-min-items-high": {
            "description": "Array with `minItems > 1` should be flagged as a warning.",
            "minItems": 2,
            "type": "array"
          },
          "arr-min-missing": {
            "description": "Array lacks `minItems`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "arr-min-zero": {
            "description": "Array with `minItems:0` may be empty, noteworthy.",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "type": "array"
          },
          "arr-name-singular": {
            "description": "TBD not named plural.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "arr-poly": {
            "description": "Arrays that may contain more than one type. Not bad, but complex for doc.",
            "properties": {
              "objectAnyOf": {
                "description": "Array that may contain strings or numbers.",
                "items": {
                  "anyOf": [
                    {
                      "properties": {
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "groucho"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "chico"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "harpo"
                      ],
                      "type": "object"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "objectOneOf": {
                "description": "Array that may contain strings or numbers.",
                "items": {
                  "oneOf": [
                    {
                      "description": "Unconditional schema.",
                      "properties": {
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "groucho"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "__Limited availability__ Conditional schema.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "chico"
                      ],
                      "type": "object",
                      "x-akamai": {
                        "status": "LA"
                      }
                    },
                    {
                      "description": "__Bot manager__ Conditional schema.",
                      "properties": {
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "harpo"
                      ],
                      "type": "object",
                      "x-akamai": {
                        "labels": [
                          "Bot manager"
                        ]
                      }
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "scalarAnyOf": {
                "description": "Array that may contain strings or numbers.",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              },
              "scalarOneOf": {
                "description": "Array that may contain strings or numbers.",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "type": "object"
          },
          "arr-uniq-non": {
            "description": "Array specifies `uniqueItems: false`.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": false
          },
          "threshold-max": {
            "description": "Array in sample data is too long.",
            "items": {
              "type": "string"
            },
            "maxItems": 2,
            "minItems": 0,
            "type": "array"
          },
          "threshold-min": {
            "description": "Sample data is zero-length.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/arr.yaml"
        }
      },
      "audit-members": {
        "description": "Test of auditing schemas.",
        "properties": {
          "createdBy": {
            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
            "readOnly": true,
            "type": "string"
          },
          "createdDate": {
            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modifiedBy": {
            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
            "readOnly": true,
            "type": "string"
          },
          "modifiedDate": {
            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/audit-members.yaml"
        }
      },
      "beatles-alive": {
        "additionalProperties": false,
        "description": "Description comes from `beatles-alive.yaml`.",
        "properties": {
          "paul": {
            "description": "Description comes from `beatles-alive.yaml`.",
            "type": "boolean"
          },
          "ringo": {
            "description": "Description comes from `beatles-alive.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/beatles-alive.yaml"
        }
      },
      "beatles-all": {
        "additionalProperties": false,
        "description": "Description comes from `beatles-all.yaml`.",
        "properties": {
          "george": {
            "description": "Description comes from `beatles-all.yaml`.",
            "type": "boolean"
          },
          "john": {
            "description": "Description comes from `beatles-all.yaml`.",
            "type": "boolean"
          },
          "paul": {
            "description": "Description comes from `beatles-all.yaml`.",
            "type": "boolean"
          },
          "ringo": {
            "description": "Description comes from `beatles-all.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/beatles-all.yaml"
        }
      },
      "beatles-allOf": {
        "allOf": [
          {
            "additionalProperties": false,
            "description": "Description comes from `beatles-alive.yaml`.",
            "properties": {
              "paul": {
                "description": "Description comes from `beatles-alive.yaml`.",
                "type": "boolean"
              },
              "ringo": {
                "description": "Description comes from `beatles-alive.yaml`.",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/beatles-alive.yaml"
            }
          },
          {
            "additionalProperties": false,
            "description": "Description comes from `beatles-dead.yaml`.",
            "properties": {
              "george": {
                "description": "Description comes from `beatles-dead.yaml`.",
                "type": "boolean"
              },
              "john": {
                "description": "Description comes from `beatles-dead.yaml`.",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/beatles-dead.yaml"
            }
          }
        ],
        "description": "Description comes from `beatles-allOf.yaml`.",
        "x-akamai": {
          "file-path": "schemas/beatles-allOf.yaml"
        }
      },
      "beatles-dead": {
        "additionalProperties": false,
        "description": "Description comes from `beatles-dead.yaml`.",
        "properties": {
          "george": {
            "description": "Description comes from `beatles-dead.yaml`.",
            "type": "boolean"
          },
          "john": {
            "description": "Description comes from `beatles-dead.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/beatles-dead.yaml"
        }
      },
      "beatles-oneOf": {
        "description": "Description comes from `beatles-oneOf.yaml`.",
        "oneOf": [
          {
            "additionalProperties": false,
            "description": "Description comes from `beatles-alive.yaml`.",
            "properties": {
              "paul": {
                "description": "Description comes from `beatles-alive.yaml`.",
                "type": "boolean"
              },
              "ringo": {
                "description": "Description comes from `beatles-alive.yaml`.",
                "type": "boolean"
              }
            },
            "title": "Alive",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/beatles-alive.yaml"
            }
          },
          {
            "additionalProperties": false,
            "description": "Description comes from `beatles-dead.yaml`.",
            "properties": {
              "george": {
                "description": "Description comes from `beatles-dead.yaml`.",
                "type": "boolean"
              },
              "john": {
                "description": "Description comes from `beatles-dead.yaml`.",
                "type": "boolean"
              }
            },
            "title": "Dead",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/beatles-dead.yaml"
            }
          }
        ],
        "title": "Beatles",
        "x-akamai": {
          "file-path": "schemas/beatles-oneOf.yaml"
        }
      },
      "bool": {
        "description": "Boolean tests.",
        "properties": {
          "bool-desc-misformatted": {
            "description": "Malformed references to T/F values",
            "properties": {
              "booleansCapitalized": {
                "description": "This boolean's description mentions capitalized `True` and `False` values",
                "type": "boolean"
              },
              "booleansUnformatted": {
                "description": "This boolean's description mentions unformatted true or false values.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "bool-desc-verbose": {
            "description": "Check for unnecessary `true` and `false` in the description.",
            "properties": {
              "falseOnly": {
                "description": "The description mentions the `false` value.",
                "type": "boolean"
              },
              "trueAndFalseNoDefault": {
                "description": "The description mentions both the `true` and `false` values.",
                "type": "boolean"
              },
              "trueAndFalseWithDefault": {
                "default": true,
                "description": "The description mentions both the `true` and `false` values, which is OK with a default value.",
                "type": "boolean"
              },
              "trueOnly": {
                "description": "The description mentions the `true` value.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "bool-name-mixed": {
            "description": "TBD mix of enableFoo, fooEnabled? (unreliable?).",
            "type": "boolean"
          },
          "bool-name-suffix": {
            "description": "Boolean is misnamed `*Switch`, `*Flag`, `*Toggler`, `*Boolean`.",
            "properties": {
              "widgetBoolean": {
                "description": "A badly named boolean.",
                "type": "boolean"
              },
              "widgetFlag": {
                "description": "A badly named boolean.",
                "type": "boolean"
              },
              "widgetSwitch": {
                "description": "A badly named boolean.",
                "type": "boolean"
              },
              "widgetToggler": {
                "description": "A badly named boolean.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "bool-null": {
            "description": "This boolean also allows a null value, which is kind of messed up.",
            "nullable": true,
            "type": "boolean"
          },
          "bool-pseudo-enum": {
            "additionalProperties": false,
            "description": "These enum values should likely be re-typed as boolean.",
            "properties": {
              "pseudoBooleanOk": {
                "description": "Emit a notice that this was evaluated and probably not a problem. (Values: `GROUCHO`, `CHICO`.)",
                "enum": [
                  "GROUCHO",
                  "CHICO"
                ],
                "type": "string"
              },
              "pseudoBooleanOnOff": {
                "description": "Flag this `ON`/`OFF` enum.",
                "enum": [
                  true,
                  false
                ],
                "type": "string"
              },
              "pseudoBooleanTrueFalse": {
                "description": "Flag this `true`/`false` string enum.",
                "enum": [
                  "true",
                  "false"
                ],
                "type": "string"
              },
              "pseudoBooleanYesNo": {
                "description": "Flag this `YES`/`NO` enum.",
                "enum": [
                  true,
                  false
                ],
                "type": "string"
              },
              "pseudoBooleanYesNoMaybe": {
                "description": "Do not flag this `YES`/`NO`/`MAYBE` enum.",
                "enum": [
                  true,
                  false,
                  "MAYBE"
                ],
                "type": "string"
              },
              "pseudoBooleanZeroOneInt": {
                "description": "Flag this `0`/`1` integer enum.",
                "enum": [
                  0,
                  1
                ],
                "type": "integer"
              },
              "pseudoBooleanZeroOneStr": {
                "description": "Flag this `0`/`1` string enum.",
                "enum": [
                  "0",
                  "1"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/bool.yaml"
        }
      },
      "bt-later": {
        "properties": {
          "ringo": {
            "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
            "type": "boolean"
          }
        },
        "title": "Later",
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/bt-later.yaml"
        }
      },
      "bt-later-wrapper": {
        "allOf": [
          {
            "properties": {
              "ringo": {
                "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                "type": "boolean"
              }
            },
            "title": "Later",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/bt-later.yaml"
            }
          },
          {
            "properties": {
              "george": {
                "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              },
              "john": {
                "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              },
              "paul": {
                "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/bt-shared.yaml"
            }
          }
        ],
        "title": "Later",
        "x-akamai": {
          "file-path": "schemas/bt-later-wrapper.yaml"
        }
      },
      "bt-original": {
        "properties": {
          "pete": {
            "description": "Pete Best. (Derives from `bt-original.yaml`)",
            "type": "boolean"
          },
          "stuart": {
            "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
            "type": "boolean"
          }
        },
        "title": "Original",
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/bt-original.yaml"
        }
      },
      "bt-original-wrapper": {
        "allOf": [
          {
            "properties": {
              "pete": {
                "description": "Pete Best. (Derives from `bt-original.yaml`)",
                "type": "boolean"
              },
              "stuart": {
                "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                "type": "boolean"
              }
            },
            "title": "Original",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/bt-original.yaml"
            }
          },
          {
            "properties": {
              "george": {
                "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              },
              "john": {
                "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              },
              "paul": {
                "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/bt-shared.yaml"
            }
          }
        ],
        "title": "Original",
        "x-akamai": {
          "file-path": "schemas/bt-original-wrapper.yaml"
        }
      },
      "bt-shared": {
        "properties": {
          "george": {
            "description": "George Harrison. (Derives from `bt-shared.yaml`)",
            "type": "boolean"
          },
          "john": {
            "description": "John Lennon. (Derives from `bt-shared.yaml`)",
            "type": "boolean"
          },
          "paul": {
            "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/bt-shared.yaml"
        }
      },
      "cabbageWankType": {
        "minLength": 1,
        "type": "string"
      },
      "custom": {
        "properties": {
          "customOther": {
            "description": "Prepend arbitrary labels.",
            "properties": {
              "customLabel": {
                "description": "__Bot Manager__ Description should be prefixed by a custom label, in this case a product name.",
                "type": "string",
                "x-akamai": {
                  "labels": [
                    "Bot Manager"
                  ]
                }
              },
              "customLabels": {
                "description": "__Bot Manager__, __App & API Protector__ Description should be prefixed by a comma-separated set of custom labels, in this case product names.",
                "type": "string",
                "x-akamai": {
                  "labels": [
                    "Bot Manager",
                    "App & API Protector"
                  ]
                }
              },
              "spec-labels-value-malformed": {
                "description": "__B__, __o__, __t__, __ __, __M__, __a__, __n__, __a__, __g__, __e__, __r__ Throw a warning about malformed syntax, where `labels` should be an array.",
                "type": "string",
                "x-akamai": {
                  "labels": "Bot Manager"
                }
              }
            },
            "type": "object"
          },
          "customStatus": {
            "description": "Prefixed status indicators.",
            "properties": {
              "spec-status-value-unsupported": {
                "description": "Unsupported status value.",
                "type": "string",
                "x-akamai": {
                  "status": "INVALID_VALUE"
                }
              },
              "statusBeta": {
                "description": "__Beta__ Description should be prefixed by _Beta_ status.",
                "type": "string",
                "x-akamai": {
                  "status": "BETA"
                }
              },
              "statusDefault": {
                "description": "An ordinary, unlabeled GA schema.",
                "type": "string"
              },
              "statusDeprecated": {
                "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
                "type": "string",
                "x-akamai": {
                  "status": "DEPRECATED"
                }
              },
              "statusInternal": {
                "description": "__Internal__ Description should be prefixed by _Internal_ status.",
                "type": "string",
                "x-akamai": {
                  "status": "INTERNAL"
                }
              },
              "statusLimited": {
                "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
                "type": "string",
                "x-akamai": {
                  "status": "LA"
                }
              }
            },
            "type": "object"
          },
          "labelOrder": {
            "description": "__Beta__, __Write-once__, __Groucho__, __Chico__, __Harpo__ If you spec _every_ kind of label, in what order do they list? Should be status, R/W-O, then any custom labels.",
            "type": "string",
            "x-akamai": {
              "labels": [
                "Groucho",
                "Chico",
                "Harpo"
              ],
              "status": "BETA",
              "write-once": true
            }
          },
          "rwo": {
            "description": "Read-only, Write-only, and custom Write-once syntax.",
            "properties": {
              "readOnly": {
                "description": "__Read-only__ Description should have a bolded _Read-only_ label. Typical for generated IDs, timestamps, and status indicators. (Does ReadMe suppress it from request schema doc?)",
                "readOnly": true,
                "type": "string"
              },
              "spec-wo-value-malformed": {
                "description": "__Write-once__ Throw a warning about malformed syntax, where `write-once` should be a boolean.",
                "type": "string",
                "x-akamai": {
                  "write-once": "YES"
                }
              },
              "writeOnce": {
                "description": "__Write-once__ Description should have a bolded _Write-once_ label. Typical when initially assigning group or contract IDs.",
                "type": "string",
                "x-akamai": {
                  "write-once": true
                }
              },
              "writeOnly": {
                "description": "__Write-only__ Description should have a bolded _Write-only_ label. Occurs rarely when passing in passwords or other secret data that shouldn't display in subsequent responses. (Does ReadMe suppress it from response schema doc?)",
                "type": "string",
                "writeOnly": true
              }
            },
            "type": "object"
          },
          "statusBetaTestLevel": {
            "description": "__Beta__ Description should be prefixed by _Beta_ status.",
            "type": "string",
            "x-akamai": {
              "status": "BETA"
            }
          },
          "statusDeprecatedTestLevel": {
            "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
            "type": "string",
            "x-akamai": {
              "status": "DEPRECATED"
            }
          },
          "statusInternalTestLevel": {
            "description": "__Internal__ Description should be prefixed by _Internal_ status.",
            "type": "string",
            "x-akamai": {
              "status": "INTERNAL"
            }
          },
          "statusLimitedTestLevel": {
            "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
            "type": "string",
            "x-akamai": {
              "status": "LA"
            }
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/custom.yaml"
        }
      },
      "dynamic-beatles": {
        "properties": {
          "george": {
            "example": "Harrison",
            "type": "string"
          },
          "john": {
            "example": "Lennon",
            "type": "string"
          },
          "paul": {
            "example": "McCartney",
            "type": "string"
          },
          "ringo": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/dynamic-beatles.yaml"
        }
      },
      "dynamic-stones": {
        "properties": {
          "brian": {
            "example": false,
            "type": "boolean"
          },
          "charlie": {
            "example": 5,
            "type": "integer"
          },
          "keith": {
            "example": 7,
            "type": "integer"
          },
          "mick": {
            "example": 6,
            "type": "integer"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/dynamic-stones.yaml"
        }
      },
      "linked-schema": {
        "description": "This schema is $ref linked.",
        "type": "boolean",
        "x-akamai": {
          "file-path": "schemas/linked-schema.yaml"
        }
      },
      "null": {
        "description": "Tests for null values.",
        "nullable": true,
        "properties": {
          "sample-null": {
            "description": "Avoid `null` values in sample data.",
            "nullable": true
          },
          "schema-null-avoid": {
            "description": "Avoid nullable data.",
            "nullable": true,
            "type": "string"
          },
          "schema-null-lacks-desc": {
            "description": "This description misses a crucial detail.",
            "nullable": true,
            "type": "string"
          },
          "schema-null-lacks-spec": {
            "description": "This description mentions a null value, but schema is not marked\nas nullable.",
            "type": "string"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/null.yaml"
        }
      },
      "num": {
        "description": "Numeric tests.",
        "properties": {
          "num-epoch": {
            "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
            "properties": {
              "activationDate": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              },
              "activationTime": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "num-max": {
            "description": "Specifies a `maximum` value.",
            "maximum": 90,
            "type": "integer"
          },
          "num-min-missing": {
            "description": "This numeric schema doesn't specify a `minimum` value.",
            "type": "integer"
          },
          "num-min-missing-enum": {
            "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "num-not-int-kw": {
            "description": "Nested members are mistyped as `number`.",
            "properties": {
              "policyId": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyVersion": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-not-int-other": {
            "description": "Nested members may be mistyped as `number`.",
            "properties": {
              "policyLimit": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyThreshold": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-pct-lacks-max": {
            "description": "This is described as a percent, but spec lacks a maximum.",
            "type": "integer"
          },
          "threshold-max": {
            "description": "Sample integer data is too high.",
            "maximum": 360,
            "type": "integer"
          },
          "threshold-min": {
            "description": "Sample integer data is too low.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/num.yaml"
        }
      },
      "obj": {
        "description": "Object tests.",
        "properties": {
          "obj-additional-missing": {
            "description": "Schema lacks `additionalProperties:false`.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "minLength": 1,
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "minLength": 1,
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "groucho",
              "harpo",
              "chico"
            ],
            "type": "object"
          },
          "obj-additional-true": {
            "additionalProperties": true,
            "description": "Schema specifies `additionalProperties:true`.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "minLength": 1,
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "minLength": 1,
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "groucho",
              "harpo",
              "chico"
            ],
            "type": "object"
          },
          "obj-bool": {
            "description": "Object members are all boolean, suggesting that an enum array might be better design.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "boolean"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "boolean"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "boolean"
              }
            },
            "required": [
              "groucho",
              "harpo",
              "chico"
            ],
            "type": "object"
          },
          "obj-max": {
            "description": "Object specifies `maxProperties`.",
            "maxProperties": 3,
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "boolean"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "boolean"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "boolean"
              },
              "zeppo": {
                "description": "Zeppo description.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "obj-max-threshold": {
            "description": "Object specifies many, many members.",
            "properties": {
              "a": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "b": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "c": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "d": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "e": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "f": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "g": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "h": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "i": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "j": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "k": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "l": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "m": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "n": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "o": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "p": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "q": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "r": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "s": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "t": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "u": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "v": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "w": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "x": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "y": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              },
              "z": {
                "description": "All work and no play makes Jack a dull boy.",
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "a",
              "e",
              "i",
              "o",
              "u"
            ],
            "type": "object"
          },
          "obj-min": {
            "description": "Object specifies `minProperties`.",
            "minProperties": 3,
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "boolean"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "boolean"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "boolean"
              },
              "zeppo": {
                "description": "Zeppo description.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "obj-orphan": {
            "description": "TBD object specs single member.",
            "type": "object"
          },
          "obj-req-missing": {
            "description": "Object schema lacks a `required` array.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "minLength": 1,
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "minLength": 1,
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "minLength": 1,
                "type": "string"
              }
            },
            "type": "object"
          },
          "obj-undefined": {
            "description": "Object's `properties` are undefined.",
            "type": "object"
          },
          "obj-undefined-additional-false": {
            "additionalProperties": false,
            "description": "Complain that this schema has `additionalProperties` set\nto `false` with no defined `properties`.",
            "type": "object"
          },
          "obj-undefined-additional-schema": {
            "additionalProperties": {
              "description": "This describes the referenced value.",
              "minLength": 1,
              "type": "string"
            },
            "description": "Note `additionalProperties` is set to a schema object with no\ndefined `properties`, to properly describe an object mapping.",
            "type": "object"
          },
          "obj-undefined-additional-true": {
            "additionalProperties": true,
            "description": "Complain that this schema has `additionalProperties` set\nto `true` with no defined `properties`.",
            "type": "object"
          },
          "obj-undefined-req": {
            "description": "This object requires a `zeppo` member that's not defined as a property.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "boolean"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "boolean"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "boolean"
              }
            },
            "required": [
              "groucho",
              "chico",
              "harpo",
              "zeppo"
            ],
            "type": "object"
          },
          "schema-empty": {},
          "schema-required-read-only": {
            "description": "__Read-only__ Schema is marked as both read-only and required.",
            "readOnly": true,
            "type": "boolean"
          },
          "schema-required-with-default": {
            "default": true,
            "description": "This object key is marked as required, but the schema specifies a default value, logically contradictory.",
            "type": "boolean"
          },
          "svc-tally-obj-keys": {
            "description": "Complain that this set of keys is defined in more than one schema file.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "obj-additional-missing",
          "obj-additional-true",
          "obj-bool",
          "obj-max",
          "obj-max-threshold",
          "obj-min",
          "obj-orphan",
          "obj-req-missing",
          "obj-undefined-req",
          "obj-undefined",
          "schema-empty",
          "schema-required-with-default",
          "schema-required-read-only"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/obj.yaml"
        }
      },
      "poly-allof": {
        "additionalProperties": false,
        "properties": {
          "allOfDynamicSample": {
            "allOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "properties": {
                      "paul": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "properties": {
                      "george": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-dead.yaml"
                    }
                  }
                ],
                "description": "Description comes from `beatles-allOf.yaml`.",
                "x-akamai": {
                  "file-path": "schemas/beatles-allOf.yaml"
                }
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-alive.yaml`.",
                    "properties": {
                      "keith": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-dead.yaml`.",
                    "properties": {
                      "brian": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-dead.yaml"
                    }
                  }
                ],
                "description": "Description comes from `stones-allOf.yaml`.",
                "x-akamai": {
                  "file-path": "schemas/stones-allOf.yaml"
                }
              }
            ]
          },
          "allOfExclude": {
            "allOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "groucho": {
                    "description": "This schema is defined within an `allOf`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "chico": {
                    "description": "This schema is defined within an `allOf`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "properties": {
                  "harpo": {
                    "description": "This schema is defined within an `allOf`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              {}
            ],
            "description": "Test whether an `allOf` item can be excluded. The `gummo` key should not publish. (YES)"
          },
          "allOfMixIn": {
            "allOf": [
              {
                "description": "Test of auditing schemas.",
                "properties": {
                  "createdBy": {
                    "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "createdDate": {
                    "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modifiedBy": {
                    "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modifiedDate": {
                    "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/audit-members.yaml"
                }
              },
              {
                "description": "This tests whether you can spec `allOf` to blend an object from different schemas. Various auditing members are `$ref` linked from a common `audit-members.yaml` schema. Read-only audit members don't appear in the request schema interface.",
                "properties": {
                  "chico": {
                    "description": "This schema is defined in the second `allOf` object.",
                    "type": "boolean"
                  },
                  "groucho": {
                    "description": "This schema is defined in the second `allOf` object.",
                    "type": "boolean"
                  },
                  "harpo": {
                    "description": "This schema is defined in the second `allOf` object.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ],
            "description": "Test a typical `allOf` scenario where you mix common audit members referenced from an external file, with other data members defined inline."
          },
          "allOfThenOneOf": {
            "allOf": [
              {
                "properties": {
                  "george": {
                    "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                    "type": "boolean"
                  },
                  "john": {
                    "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                    "type": "boolean"
                  },
                  "paul": {
                    "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/bt-shared.yaml"
                }
              },
              {
                "oneOf": [
                  {
                    "properties": {
                      "pete": {
                        "description": "Pete Best. (Derives from `bt-original.yaml`)",
                        "type": "boolean"
                      },
                      "stuart": {
                        "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "title": "Original",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-original.yaml"
                    }
                  },
                  {
                    "properties": {
                      "ringo": {
                        "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "title": "Later",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-later.yaml"
                    }
                  }
                ]
              }
            ]
          },
          "allOfWithinOneOf": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "properties": {
                      "pete": {
                        "description": "Pete Best. (Derives from `bt-original.yaml`)",
                        "type": "boolean"
                      },
                      "stuart": {
                        "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "title": "Original",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-original.yaml"
                    }
                  },
                  {
                    "properties": {
                      "george": {
                        "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      },
                      "paul": {
                        "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-shared.yaml"
                    }
                  }
                ],
                "title": "Original",
                "x-akamai": {
                  "file-path": "schemas/bt-original-wrapper.yaml"
                }
              },
              {
                "allOf": [
                  {
                    "properties": {
                      "ringo": {
                        "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "title": "Later",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-later.yaml"
                    }
                  },
                  {
                    "properties": {
                      "george": {
                        "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      },
                      "paul": {
                        "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/bt-shared.yaml"
                    }
                  }
                ],
                "title": "Later",
                "x-akamai": {
                  "file-path": "schemas/bt-later-wrapper.yaml"
                }
              }
            ]
          },
          "schema-poly-allof-amorphic": {
            "additionalProperties": false,
            "allOf": [
              {
                "additionalProperties": false,
                "description": "Description comes from `beatles-alive.yaml`.",
                "properties": {
                  "paul": {
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "type": "boolean"
                  },
                  "ringo": {
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/beatles-alive.yaml"
                }
              },
              {
                "additionalProperties": false,
                "description": "Description comes from `beatles-dead.yaml`.",
                "properties": {
                  "george": {
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "type": "boolean"
                  },
                  "john": {
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/beatles-dead.yaml"
                }
              }
            ],
            "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
            "properties": {
              "brian": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "charlie": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "keith": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "mick": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "schema-poly-allof-amorphic-inline": {
            "additionalProperties": false,
            "allOf": [
              {
                "additionalProperties": false,
                "description": "Description is inline, top of first `allOf`.",
                "properties": {
                  "john": {
                    "description": "Description is inline, in first `allOf`.",
                    "type": "boolean"
                  },
                  "paul": {
                    "description": "Description is inline, in second `allOf`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "Description is inline, top of second `allOf`.",
                "properties": {
                  "george": {
                    "description": "Description is inline, in first `allOf`.",
                    "type": "boolean"
                  },
                  "ringo": {
                    "description": "Description is inline, in second `allOf`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            ],
            "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
            "properties": {
              "brian": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "charlie": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "keith": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              },
              "mick": {
                "description": "This schema is part of an object defined outside an `allOf`.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "schema-poly-allof-array": {
            "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
            "items": {
              "allOf": [
                {
                  "additionalProperties": false,
                  "description": "Description comes from `beatles-alive.yaml`.",
                  "properties": {
                    "paul": {
                      "description": "Description comes from `beatles-alive.yaml`.",
                      "type": "boolean"
                    },
                    "ringo": {
                      "description": "Description comes from `beatles-alive.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/beatles-alive.yaml"
                  }
                },
                {
                  "additionalProperties": false,
                  "description": "Description comes from `beatles-dead.yaml`.",
                  "properties": {
                    "george": {
                      "description": "Description comes from `beatles-dead.yaml`.",
                      "type": "boolean"
                    },
                    "john": {
                      "description": "Description comes from `beatles-dead.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/beatles-dead.yaml"
                  }
                },
                {
                  "additionalProperties": false,
                  "description": "Description comes from `stones-alive.yaml`.",
                  "properties": {
                    "keith": {
                      "description": "Description comes from `stones-alive.yaml`.",
                      "type": "boolean"
                    },
                    "mick": {
                      "description": "Description comes from `stones-alive.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/stones-alive.yaml"
                  }
                },
                {
                  "additionalProperties": false,
                  "description": "Description comes from `stones-dead.yaml`.",
                  "properties": {
                    "brian": {
                      "description": "Description comes from `stones-dead.yaml`.",
                      "type": "boolean"
                    },
                    "charlie": {
                      "description": "Description comes from `stones-dead.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/stones-dead.yaml"
                  }
                }
              ]
            },
            "type": "array"
          },
          "schema-poly-allof-array-inline": {
            "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
            "items": {
              "allOf": [
                {
                  "additionalProperties": false,
                  "description": "Description is inline.",
                  "properties": {
                    "john": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    },
                    "paul": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "description": "Description is inline.",
                  "properties": {
                    "george": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    },
                    "ringo": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "description": "Description is inline.",
                  "properties": {
                    "keith": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    },
                    "mick": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                {
                  "additionalProperties": false,
                  "description": "Description is inline.",
                  "properties": {
                    "brian": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    },
                    "charlie": {
                      "description": "Description is inline.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "schema-poly-allof-nested": {
            "allOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "properties": {
                      "paul": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "properties": {
                      "george": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-dead.yaml"
                    }
                  }
                ],
                "description": "Description comes from `beatles-allOf.yaml`.",
                "x-akamai": {
                  "file-path": "schemas/beatles-allOf.yaml"
                }
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-alive.yaml`.",
                    "properties": {
                      "keith": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-dead.yaml`.",
                    "properties": {
                      "brian": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-dead.yaml"
                    }
                  }
                ],
                "description": "Description comes from `stones-allOf.yaml`.",
                "x-akamai": {
                  "file-path": "schemas/stones-allOf.yaml"
                }
              }
            ],
            "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
          },
          "schema-poly-allof-nested-inline": {
            "allOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description is inline, sibling with `allOf`.",
                    "properties": {
                      "john": {
                        "description": "Description is inline, first `allOf`.",
                        "type": "boolean"
                      },
                      "paul": {
                        "description": "Description is inline, second `allOf`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description is inline, sibling with `allOf`.",
                    "properties": {
                      "george": {
                        "description": "Description is inline, second `allOf`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description is inline, first `allOf`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "allOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description is inline, sibling with `allOf`.",
                        "properties": {
                          "keith": {
                            "description": "Description is inline, second `allOf`.",
                            "type": "boolean"
                          },
                          "mick": {
                            "description": "Description is inline, first `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Description is inline, sibling with `allOf`.",
                        "properties": {
                          "brian": {
                            "description": "Description is inline, first `allOf`.",
                            "type": "boolean"
                          },
                          "charlie": {
                            "description": "Description is inline, second `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "Description is inline, sibling with `allOf`."
                  }
                ],
                "description": "Beatles, inline."
              }
            ],
            "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
          },
          "schema-poly-single": {
            "allOf": [
              {
                "additionalProperties": false,
                "description": "Description comes from `beatles-all.yaml`.",
                "properties": {
                  "george": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "john": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "paul": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "ringo": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/beatles-all.yaml"
                }
              }
            ],
            "description": "This schema specifies a single `allOf` item."
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/poly-allof.yaml"
        }
      },
      "poly-anyof": {
        "description": "All work and no play makes Jack a dull boy.",
        "properties": {
          "anyOfExclude": {
            "anyOf": [
              {
                "additionalProperties": false,
                "description": "An `anyOf` item. This should publish.",
                "properties": {
                  "groucho": {
                    "description": "This schema is defined within an `anyOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Groucho",
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "An `anyOf` item. This should publish.",
                "properties": {
                  "chico": {
                    "description": "This schema is defined within an `anyOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Chico",
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "An `anyOf` item. This should publish.",
                "properties": {
                  "harpo": {
                    "description": "This schema is defined within an `anyOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Harpo",
                "type": "object"
              },
              {}
            ],
            "description": "Test whether an `anyOf` item can be excluded. The `gummo` key should not publish. (Not quite)"
          },
          "isAnyOf": {
            "anyOf": [
              {
                "description": "Alternative schema, unconditional.",
                "properties": {
                  "groucho": {
                    "description": "Groucho description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "groucho"
                ],
                "type": "object"
              },
              {
                "description": "__Beta__ Alternative schema, conditional.",
                "properties": {
                  "chico": {
                    "description": "Chico description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "chico"
                ],
                "type": "object",
                "x-akamai": {
                  "status": "BETA"
                }
              },
              {
                "description": "__Bot manager__ Alternative schema, conditional.",
                "properties": {
                  "harpo": {
                    "description": "Harpo description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "labels": [
                    "Bot manager"
                  ]
                }
              }
            ]
          },
          "schema-poly-alt-nests-allof": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "properties": {
                      "paul": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "properties": {
                      "george": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-dead.yaml"
                    }
                  }
                ],
                "description": "The Beatles schema.",
                "title": "Beatles"
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-alive.yaml`.",
                    "properties": {
                      "keith": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-dead.yaml`.",
                    "properties": {
                      "brian": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-dead.yaml"
                    }
                  }
                ],
                "description": "The Stones schema.",
                "title": "Stones"
              }
            ],
            "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
          },
          "schema-poly-alt-nests-allof-inline": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "john": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "paul": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "george": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "description": "The Beatles schema.",
                "title": "Beatles"
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "keith": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "brian": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "description": "The Stones schema.",
                "title": "Stones"
              }
            ],
            "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
          },
          "schema-poly-single": {
            "anyOf": [
              {
                "additionalProperties": false,
                "description": "Description comes from `beatles-all.yaml`.",
                "properties": {
                  "george": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "john": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "paul": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "ringo": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/beatles-all.yaml"
                }
              }
            ],
            "description": "This schema specifies a single `anyOf` item."
          }
        },
        "required": [
          "isAnyOf"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/poly-anyof.yaml"
        }
      },
      "poly-oneof": {
        "description": "All work and no play makes Jack a dull boy.",
        "properties": {
          "isOneOf": {
            "oneOf": [
              {
                "properties": {
                  "groucho": {
                    "description": "Groucho description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "groucho"
                ],
                "title": "Groucho",
                "type": "object"
              },
              {
                "properties": {
                  "chico": {
                    "description": "Chico description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "chico"
                ],
                "title": "Chico",
                "type": "object"
              },
              {
                "properties": {
                  "harpo": {
                    "description": "Harpo description.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "harpo"
                ],
                "title": "Harpo",
                "type": "object"
              }
            ]
          },
          "nestedOneOf": {
            "description": "This features alternate `oneOf` schemas that nest further nested `oneOf` schemas. It should publish four Beatles and four Stones.",
            "oneOf": [
              {
                "description": "Description comes from `beatles-oneOf.yaml`.",
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "properties": {
                      "paul": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "title": "Alive",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "properties": {
                      "george": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "title": "Dead",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-dead.yaml"
                    }
                  }
                ],
                "title": "Beatles",
                "x-akamai": {
                  "file-path": "schemas/beatles-oneOf.yaml"
                }
              },
              {
                "description": "Description comes from `stones-oneOf.yaml`.",
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-alive.yaml`.",
                    "properties": {
                      "keith": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "title": "Alive",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-dead.yaml`.",
                    "properties": {
                      "brian": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "title": "Dead",
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-dead.yaml"
                    }
                  }
                ],
                "title": "Stones",
                "x-akamai": {
                  "file-path": "schemas/stones-oneOf.yaml"
                }
              }
            ]
          },
          "oneOfExclude": {
            "description": "Test whether a `oneOf` item can be excluded. The `gummo` key should not publish. (Not quite)",
            "oneOf": [
              {
                "additionalProperties": false,
                "description": "A `oneOf` item. This should publish.",
                "properties": {
                  "groucho": {
                    "description": "This schema is defined within a `oneOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Groucho",
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "A `oneOf` item. This should publish.",
                "properties": {
                  "chico": {
                    "description": "This schema is defined within a `oneOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Chico",
                "type": "object"
              },
              {
                "additionalProperties": false,
                "description": "A `oneOf` item. This should publish.",
                "properties": {
                  "harpo": {
                    "description": "This schema is defined within a `oneOf`.",
                    "type": "boolean"
                  }
                },
                "title": "Harpo",
                "type": "object"
              },
              {}
            ]
          },
          "oneOfInArray": {
            "description": "Array of items, each a `oneOf`.",
            "items": {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "description": "Description comes from `beatles-all.yaml`.",
                  "properties": {
                    "george": {
                      "description": "Description comes from `beatles-all.yaml`.",
                      "type": "boolean"
                    },
                    "john": {
                      "description": "Description comes from `beatles-all.yaml`.",
                      "type": "boolean"
                    },
                    "paul": {
                      "description": "Description comes from `beatles-all.yaml`.",
                      "type": "boolean"
                    },
                    "ringo": {
                      "description": "Description comes from `beatles-all.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "title": "Beatles",
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/beatles-all.yaml"
                  }
                },
                {
                  "additionalProperties": false,
                  "description": "Description comes from `stones-all.yaml`.",
                  "properties": {
                    "brian": {
                      "description": "Description comes from `stones-all.yaml`.",
                      "type": "boolean"
                    },
                    "charlie": {
                      "description": "Description comes from `stones-all.yaml`.",
                      "type": "boolean"
                    },
                    "keith": {
                      "description": "Description comes from `stones-all.yaml`.",
                      "type": "boolean"
                    },
                    "mick": {
                      "description": "Description comes from `stones-all.yaml`.",
                      "type": "boolean"
                    }
                  },
                  "title": "Stones",
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/stones-all.yaml"
                  }
                }
              ]
            },
            "type": "array"
          },
          "schema-poly-alt-nests-allof": {
            "oneOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-alive.yaml`.",
                    "properties": {
                      "paul": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `beatles-dead.yaml`.",
                    "properties": {
                      "george": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      },
                      "john": {
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/beatles-dead.yaml"
                    }
                  }
                ],
                "description": "The Beatles schema.",
                "title": "Beatles!"
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-alive.yaml`.",
                    "properties": {
                      "keith": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description comes from `stones-alive.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-alive.yaml"
                    }
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description comes from `stones-dead.yaml`.",
                    "properties": {
                      "brian": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description comes from `stones-dead.yaml`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/stones-dead.yaml"
                    }
                  }
                ],
                "description": "The Stones schema.",
                "title": "Stones"
              }
            ]
          },
          "schema-poly-alt-nests-allof-inline": {
            "description": "This features alternate `oneOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones.",
            "oneOf": [
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "john": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "paul": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "george": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "ringo": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "description": "The Beatles schema.",
                "title": "Beatles"
              },
              {
                "allOf": [
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "keith": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "description": "Description is inline.",
                    "properties": {
                      "brian": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "Description is inline.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ],
                "description": "The Stones schema.",
                "title": "Stones"
              }
            ]
          },
          "schema-poly-single": {
            "description": "This schema specifies a single `oneOf` item.",
            "oneOf": [
              {
                "additionalProperties": false,
                "description": "Description comes from `beatles-all.yaml`.",
                "properties": {
                  "george": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "john": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "paul": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  },
                  "ringo": {
                    "description": "Description comes from `beatles-all.yaml`.",
                    "type": "boolean"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/beatles-all.yaml"
                }
              }
            ]
          }
        },
        "required": [
          "isOneOf"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/poly-oneof.yaml"
        }
      },
      "request": {
        "description": "Request-only members, used to test interactivity scenarios.",
        "properties": {
          "schema-omits-ro": {
            "description": "Various member names that suggest they're read-only aren't spec'ed that way.",
            "properties": {
              "createdTime": {
                "description": "When the widget was created.",
                "type": "string"
              },
              "modifiedDate": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              },
              "widgetId": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              },
              "widgetStatus": {
                "description": "Either `PENDING`, `ACTIVATING`, or `ACTIVE`.",
                "enum": [
                  "PENDING",
                  "ACTIVATING",
                  "ACTIVE"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "schema-omits-ro"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/request.yaml"
        }
      },
      "response": {
        "description": "Response-only members, used to test interactivity scenarios.",
        "properties": {
          "schema-ro-noop": {
            "description": "Various members are defined as read-only unnecessarily in a schema only used to describe responses.",
            "properties": {
              "createdTime": {
                "description": "__Read-only__ When the widget was created.",
                "readOnly": true,
                "type": "string"
              },
              "modifiedDate": {
                "description": "__Read-only__ All work and no play makes Jack a dull boy.",
                "readOnly": true,
                "type": "string"
              },
              "policyStatus": {
                "description": "__Read-only__ Either `PENDING`, `ACTIVATING`, or `ACTIVE`.",
                "enum": [
                  "PENDING",
                  "ACTIVATING",
                  "ACTIVE"
                ],
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/response.yaml"
        }
      },
      "schema": {
        "additionalProperties": true,
        "description": "Basic schema tests.",
        "properties": {
          "badly formatted key": {
            "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
            "type": "boolean"
          },
          "enumValue": {
            "description": "Unclear what this tests: `Value1`.",
            "enum": [
              "Value1"
            ],
            "type": "string"
          },
          "false": {
            "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
            "type": "string"
          },
          "lang-desc-link-invalid": {
            "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
            "type": "string"
          },
          "lang-desc-numbered-slug": {
            "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
            "type": "string"
          },
          "openapi-html-comment": {
            "description": "<!-- Commented out content -->",
            "type": "boolean"
          },
          "openapi-schema-ref-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` for contextual doc throws a warning."
              },
              {
                "description": "This schema is $ref linked.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            ]
          },
          "openapi-schema-ref-conflict": {
            "additionalProperties": false,
            "default": false,
            "description": "This schema is $ref linked.",
            "type": "boolean",
            "x-akamai": {
              "file-path": "schemas/linked-schema.yaml"
            }
          },
          "openapi-schema-ref-conflict-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
              },
              {
                "default": false,
                "description": "This schema is $ref linked.",
                "nullable": true,
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              {
                "description": "Alternative desc"
              }
            ]
          },
          "openapi-schema-ref-overload": {
            "description": "Test different ways to arrange descriptions along with $ref links.",
            "properties": {
              "refOrderedCorrectly": {
                "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              "refOrderedIncorrectly": {
                "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            },
            "type": "object"
          },
          "random-yaml": {
            "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
            "enum": [
              "GROUCHO",
              "HARPO",
              "CHICO"
            ],
            "type": "string"
          },
          "ref-overload": {
            "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
            "maxLength": 1024,
            "minLength": 1,
            "readOnly": true,
            "type": "string"
          },
          "schema-desc-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
            "type": "string"
          },
          "schema-desc-malformed-para": {
            "description": "TBD description has punctuation and is a full sentence.",
            "type": "string"
          },
          "schema-desc-missing": {
            "type": "string"
          },
          "schema-example-redundant": {
            "description": "This schema should not embed an `example` that's redundant with separate sample data.",
            "example": "This is messed up!",
            "type": "string"
          },
          "schema-get-put-mismatch": {
            "description": "TBD GET rsp & PUT req should link same schema.",
            "type": "string"
          },
          "schema-invalid-against-sample": {
            "additionalProperties": false,
            "description": "Simple membership test to check if the CLI validates sample data against the schema.",
            "properties": {
              "bar": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              },
              "foo": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              }
            },
            "required": [
              "foo",
              "bar"
            ],
            "type": "object"
          },
          "schema-name-case-sensitive": {
            "description": "Complain about all these schema names varying in case.",
            "properties": {
              "BADSCHEMANAME": {
                "type": "boolean"
              },
              "BadSchemaName": {
                "type": "boolean"
              },
              "badSchemaName": {
                "type": "boolean"
              },
              "badschemaname": {
                "type": "boolean"
              },
              "sourceIP": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-malformed": {
            "description": "Complain about this schema name not being camelCase.",
            "type": "string"
          },
          "schema-name-misspelled": {
            "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
            "properties": {
              "certficateName": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              },
              "operationid": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-parroted": {
            "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
            "type": "string"
          },
          "schema-operation-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
            "type": "string"
          },
          "schema-orphaned": {
            "description": "TBD schema file is an unreferenced orphan.",
            "type": "string"
          },
          "schema-poly-anonymous": {
            "description": "TBD oneOf/anyOf: each scenario needs a label.",
            "type": "string"
          },
          "schema-redundant": {
            "description": "TBD redundant schema, normalized for description.",
            "type": "string"
          },
          "schema-redundant-membership": {
            "description": "TBD schema is redundant, same set of members.",
            "type": "string"
          },
          "schema-type-missing": {
            "description": "This schema lacks a `type`."
          },
          "svc-tally-named-obj-keys": {
            "description": "Test variance among same-named object schemas' set of defined members.",
            "properties": {
              "batchOne": {
                "properties": {
                  "beatles": {
                    "description": "Defines all members.",
                    "properties": {
                      "george": {
                        "type": "string"
                      },
                      "john": {
                        "type": "string"
                      },
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "beatles": {
                    "description": "Defines members still alive.",
                    "properties": {
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-obj-keys": {
            "description": "Complain that this set of keys is defined in more than one schema file.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-desc": {
            "description": "Test variance among schema descriptions.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingDescription": {
                    "description": "All work and no play makes Jeremy a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingDescription": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingDescription": {
                    "description": "All twerk and no play makes Jack a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-enum-values": {
            "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
            "properties": {
              "batchFour": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchOne": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "HARPO",
                      "CHICO",
                      "ZEPPO",
                      "GUMMO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "CHICO",
                      "GROUCHO",
                      "GUMMO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-type": {
            "description": "Test variance among schema types.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "items": {
                      "description": "This test needs to ignore the contents of `items`.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/schema.yaml"
        }
      },
      "schema-empty": {
        "x-akamai": {
          "file-path": "schemas/schema-empty.yaml"
        }
      },
      "stones-alive": {
        "additionalProperties": false,
        "description": "Description comes from `stones-alive.yaml`.",
        "properties": {
          "keith": {
            "description": "Description comes from `stones-alive.yaml`.",
            "type": "boolean"
          },
          "mick": {
            "description": "Description comes from `stones-alive.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/stones-alive.yaml"
        }
      },
      "stones-all": {
        "additionalProperties": false,
        "description": "Description comes from `stones-all.yaml`.",
        "properties": {
          "brian": {
            "description": "Description comes from `stones-all.yaml`.",
            "type": "boolean"
          },
          "charlie": {
            "description": "Description comes from `stones-all.yaml`.",
            "type": "boolean"
          },
          "keith": {
            "description": "Description comes from `stones-all.yaml`.",
            "type": "boolean"
          },
          "mick": {
            "description": "Description comes from `stones-all.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/stones-all.yaml"
        }
      },
      "stones-allOf": {
        "allOf": [
          {
            "additionalProperties": false,
            "description": "Description comes from `stones-alive.yaml`.",
            "properties": {
              "keith": {
                "description": "Description comes from `stones-alive.yaml`.",
                "type": "boolean"
              },
              "mick": {
                "description": "Description comes from `stones-alive.yaml`.",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/stones-alive.yaml"
            }
          },
          {
            "additionalProperties": false,
            "description": "Description comes from `stones-dead.yaml`.",
            "properties": {
              "brian": {
                "description": "Description comes from `stones-dead.yaml`.",
                "type": "boolean"
              },
              "charlie": {
                "description": "Description comes from `stones-dead.yaml`.",
                "type": "boolean"
              }
            },
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/stones-dead.yaml"
            }
          }
        ],
        "description": "Description comes from `stones-allOf.yaml`.",
        "x-akamai": {
          "file-path": "schemas/stones-allOf.yaml"
        }
      },
      "stones-dead": {
        "additionalProperties": false,
        "description": "Description comes from `stones-dead.yaml`.",
        "properties": {
          "brian": {
            "description": "Description comes from `stones-dead.yaml`.",
            "type": "boolean"
          },
          "charlie": {
            "description": "Description comes from `stones-dead.yaml`.",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/stones-dead.yaml"
        }
      },
      "stones-oneOf": {
        "description": "Description comes from `stones-oneOf.yaml`.",
        "oneOf": [
          {
            "additionalProperties": false,
            "description": "Description comes from `stones-alive.yaml`.",
            "properties": {
              "keith": {
                "description": "Description comes from `stones-alive.yaml`.",
                "type": "boolean"
              },
              "mick": {
                "description": "Description comes from `stones-alive.yaml`.",
                "type": "boolean"
              }
            },
            "title": "Alive",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/stones-alive.yaml"
            }
          },
          {
            "additionalProperties": false,
            "description": "Description comes from `stones-dead.yaml`.",
            "properties": {
              "brian": {
                "description": "Description comes from `stones-dead.yaml`.",
                "type": "boolean"
              },
              "charlie": {
                "description": "Description comes from `stones-dead.yaml`.",
                "type": "boolean"
              }
            },
            "title": "Dead",
            "type": "object",
            "x-akamai": {
              "file-path": "schemas/stones-dead.yaml"
            }
          }
        ],
        "title": "Stones",
        "x-akamai": {
          "file-path": "schemas/stones-oneOf.yaml"
        }
      },
      "str": {
        "description": "String tests.",
        "properties": {
          "patterns": {
            "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
            "properties": {
              "patternInvalid": {
                "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                "pattern": "^($",
                "type": "string"
              },
              "patternInvalidatesData": {
                "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                "pattern": "^$",
                "type": "string"
              },
              "quotedBackslashed": {
                "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "quotedUnchanged": {
                "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                "type": "string"
              },
              "unquotedBackslashed": {
                "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "unquotedUnchanged": {
                "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "spec-enforcer-parse-err-false-positive": {
            "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-date-fmt-missing": {
            "description": "TBD timestamp string lacks `format`.",
            "type": "string"
          },
          "str-date-offset": {
            "description": "TBD warn against time zone offset values in samples.",
            "type": "string"
          },
          "str-enum-alph": {
            "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
            "enum": [
              "GEORGE",
              "JOHN",
              "PAUL",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-alph": {
            "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
            "enum": [
              "JOHN",
              "PAUL",
              "GEORGE",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-length": {
            "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
            "enum": [
              "UNPARSEABLE",
              "PRISTINE_TOO_WIDE",
              "DURATION",
              "PIXEL",
              "BYTES",
              "SAMPLERATE",
              "PRISTINE_TOO_TALL",
              "PROCESS_FAILED_INTERNALLY",
              "INVALID_POLICY"
            ],
            "type": "string"
          },
          "str-enum-desc-max": {
            "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J"
            ],
            "type": "string"
          },
          "str-enum-desc-unlisted": {
            "properties": {
              "allDescribed": {
                "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "allMissing": {
                "description": "Raise an error because this description fails to detail any enum values.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "descriptionHasLink": {
                "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "integerEnumMissing": {
                "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                "enum": [
                  400,
                  403,
                  401,
                  404
                ],
                "type": "integer"
              },
              "integerEnumPresent": {
                "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                "enum": [
                  400,
                  401,
                  404,
                  403
                ],
                "type": "integer"
              },
              "someMissing": {
                "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              }
            },
            "required": [
              "allDescribed",
              "allMissing",
              "descriptionHasLink",
              "someMissing"
            ],
            "type": "object"
          },
          "str-enum-desc-unordered": {
            "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
            "enum": [
              "DEWEY",
              "HUEY",
              "LOUIE"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced": {
            "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced-empty": {
            "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              ""
            ],
            "type": "string"
          },
          "str-enum-details": {
            "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
            "enum": [
              "CAA_MISMATCH_FAILURE",
              "CAA_MISMATCH_RETRYING",
              "DEPLOYED",
              "DEPLOYING",
              "EXPIRED_NEEDS_VALIDATION",
              "EXPIRING_SOON_NEEDS_VALIDATION",
              "NEEDS_ACTIVATION",
              "PENDING",
              "PROHIBITED_DOMAIN_FAILURE",
              "STALLED"
            ],
            "type": "string"
          },
          "str-enum-differentiator-missing": {
            "description": "Missing a differentiator.",
            "properties": {
              "isAnyOf": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              },
              "isOneOf": {
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              }
            },
            "type": "object"
          },
          "str-enum-empty": {
            "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
            "enum": [
              "GROUCHO",
              "CHICO",
              ""
            ],
            "type": "string"
          },
          "str-enum-integer": {
            "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
            "enum": [
              404,
              500,
              400
            ],
            "type": "string"
          },
          "str-enum-integer-range": {
            "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
            "type": "string"
          },
          "str-enum-keyword-anyof": {
            "anyOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ],
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
          },
          "str-enum-keyword-oneof": {
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
            "oneOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ]
          },
          "str-enum-nullable": {
            "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO"
            ],
            "nullable": true,
            "type": "string"
          },
          "str-enum-orphan": {
            "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
            "enum": [
              "ALL_ALONE"
            ],
            "type": "string"
          },
          "str-enum-repeated": {
            "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
            "enum": [
              "CHICO",
              "CHICO",
              "HARPO"
            ],
            "type": "string"
          },
          "str-enum-repeated-case": {
            "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
            "enum": [
              "two-words",
              "Two Words",
              "TWO_WORDS",
              "twoWords"
            ],
            "type": "string"
          },
          "str-enum-string-integer": {
            "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
            "enum": [
              "400",
              "500",
              "404"
            ],
            "type": "string"
          },
          "str-enum-type-conflict": {
            "description": "Data type for enum set doesn't match schema type.",
            "properties": {
              "integerSchemaStringEnum": {
                "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                "enum": [
                  "GROUCHO",
                  "HARPO",
                  "CHICO"
                ],
                "type": "integer"
              },
              "stringSchemaIntegerEnum": {
                "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                "enum": [
                  400,
                  403,
                  401
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-type-mixed": {
            "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
            "enum": [
              400,
              "401"
            ],
            "type": "string"
          },
          "str-enum-type-weird": {
            "description": "Data type for enum set is boolean or null.",
            "properties": {
              "booleanEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              },
              "nullEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  null
                ],
                "type": "boolean"
              },
              "numericEnum": {
                "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                "enum": [
                  401.2,
                  403.3,
                  400.1
                ],
                "type": "number"
              }
            },
            "type": "object"
          },
          "str-enum-unspeced-desc": {
            "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
            "type": "string"
          },
          "str-enum-unspeced-name": {
            "description": "These should all likely be enums based on their names.",
            "properties": {
              "bolusClass": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetwork": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetworkId": {
                "description": "This should not be flagged.",
                "type": "string"
              },
              "bolusOperation": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusStatus": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusType": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "type": {
                "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-values-malformed": {
            "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
            "enum": [
              "MalformedValue",
              "valueIsMalformed",
              "malformed",
              "MALFORMED-VALUE",
              "malformed_value",
              "malformed-value",
              "_",
              "_PREFIXED",
              "-",
              "WELL_FORMED_VALUE"
            ],
            "type": "string"
          },
          "str-fmt-byte": {
            "description": "A schema for a Base64 string should spec `format: byte`.",
            "type": "string"
          },
          "str-fmt-email": {
            "description": "The schema should spec `format: email`.",
            "properties": {
              "widgetEmail": {
                "description": "The schema should spec `format: email`.",
                "type": "string"
              },
              "widgetEmails": {
                "description": "The schema should spec `format: email`.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "str-fmt-hostname": {
            "description": "Schema should spec `format: hostname`.",
            "properties": {
              "widgetHostname": {
                "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-ip": {
            "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
            "properties": {
              "missingIp": {
                "description": "This schema should spec a `format`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-timestamp": {
            "description": "Based on their names, schema should spec `format: date-time` or `date`.",
            "properties": {
              "alpha2Code": {
                "description": "The ISO 3166 two-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "alpha3Code": {
                "description": "The ISO 3166 three-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "createdTime": {
                "description": "When the widget was created.",
                "type": "string"
              },
              "deployedTimestamp": {
                "description": "When the widget was deployed.",
                "type": "string"
              },
              "updatedDate": {
                "description": "When the widget was updated.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-uri": {
            "description": "Schemas should spec'ed as `format: uri`.",
            "properties": {
              "hostnameUri": {
                "description": "A URI member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "hostnameUrl": {
                "description": "A URL member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "widgetUri": {
                "description": "A URI member with no format.",
                "type": "string"
              },
              "widgetUrl": {
                "description": "A URL member with no format.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-min-conflict-format": {
            "description": "String schema specifies both `minLength` and `format`.",
            "format": "date-time",
            "minLength": 1,
            "type": "string"
          },
          "str-min-missing": {
            "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
            "type": "string",
            "x-akamai": {
              "labels": [
                "Bot Manager"
              ],
              "status": "BETA"
            }
          },
          "threshold-max": {
            "description": "Sample string data is too long.",
            "maxLength": 32,
            "type": "string"
          },
          "threshold-min": {
            "description": "Sample string data is zero-length, too short.",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/str.yaml"
        }
      },
      "yuccaPudooType": {
        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
        "enum": [
          "GROUCHO",
          "HARPO",
          "CHICO"
        ],
        "type": "string"
      }
    }
  },
  "externalDocs": {
    "description": "See documentation for Akamai's Swag-tool Test API",
    "url": "https://techdocs.akamai.com/internal-ux-writing/reference"
  },
  "info": {
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Data",
    "version": "v2"
  },
  "openapi": "3.0.0",
  "paths": {
    "/data/arr": {
      "put": {
        "description": "This tests arrays.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-arr"
        },
        "operationId": "put-arr",
        "parameters": [
          {
            "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`. Account for random other `LITERAL` value that may be in the description, which we may want to warn about separately.",
            "in": "query",
            "name": "param-mismatch",
            "required": false,
            "schema": {
              "example": 4567,
              "type": "integer"
            }
          },
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "arr-bool": [],
                "arr-max": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO"
                ],
                "arr-min-missing": [
                  {
                    "bar": {
                      "chico": true,
                      "groucho": true,
                      "harpo": false
                    },
                    "foo": {
                      "chico": true,
                      "groucho": true,
                      "harpo": false
                    }
                  }
                ],
                "arr-min-zero": [
                  {
                    "bar": 1,
                    "foo": "latest"
                  }
                ],
                "arr-name-singular": [],
                "arr-poly": {},
                "arr-uniq-non": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO"
                ],
                "param-mismatch": 1234,
                "thresold-max": [
                  "GROUCHO",
                  "HARPO",
                  "ZEPPO"
                ],
                "thresold-min": []
              },
              "schema": {
                "description": "Array tests.",
                "properties": {
                  "arr-bool": {
                    "description": "This is a bitmap, which is weird API design.",
                    "items": {
                      "type": "boolean"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-delim-inaccurate": {
                    "description": "A list of comma-separated values.",
                    "items": {
                      "description": "Includes space delimited values.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "arr-desc-mismatch": {
                    "description": "This is the outer description.",
                    "items": {
                      "description": "This is the inner description.",
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-desc-misplaced": {
                    "items": {
                      "description": "There's only an inner description.",
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-desc-redundant": {
                    "description": "This is the same description.",
                    "items": {
                      "description": "This is the same description.",
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-desc-verbose": {
                    "description": "A list of comma-separated values.",
                    "items": {
                      "description": "An object delimited by a comma.",
                      "properties": {
                        "prop": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "arr-enum-desc": {
                    "description": "Throw a warning if the component `items` is an enum. In that case, we don't want to log `str-enum-desc-unlisted` on the non-publishing description within the `items`.",
                    "items": {
                      "description": "This doesn't describe enum values.",
                      "enum": [
                        "chico",
                        "groucho",
                        "harpo"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "arr-enum-desc-link": {
                    "description": "Don't throw the `str-enum-desc-unlisted` error because the link is included. See [Values link](https://techdocs.akamai.com/internal-ux-writing/reference/slug).",
                    "items": {
                      "description": "This doesn't describe enum values.",
                      "enum": [
                        "chico",
                        "groucho",
                        "harpo"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "arr-max": {
                    "description": "Array specifies `maxItems`.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 10,
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-min-items-high": {
                    "description": "Array with `minItems > 1` should be flagged as a warning.",
                    "minItems": 2,
                    "type": "array"
                  },
                  "arr-min-missing": {
                    "description": "Array lacks `minItems`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "arr-min-zero": {
                    "description": "Array with `minItems:0` may be empty, noteworthy.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 0,
                    "type": "array"
                  },
                  "arr-name-singular": {
                    "description": "TBD not named plural.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "arr-poly": {
                    "description": "Arrays that may contain more than one type. Not bad, but complex for doc.",
                    "properties": {
                      "objectAnyOf": {
                        "description": "Array that may contain strings or numbers.",
                        "items": {
                          "anyOf": [
                            {
                              "properties": {
                                "groucho": {
                                  "description": "Groucho description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "groucho"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "chico": {
                                  "description": "Chico description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "chico"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "harpo": {
                                  "description": "Harpo description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "harpo"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "minItems": 1,
                        "type": "array"
                      },
                      "objectOneOf": {
                        "description": "Array that may contain strings or numbers.",
                        "items": {
                          "oneOf": [
                            {
                              "description": "Unconditional schema.",
                              "properties": {
                                "groucho": {
                                  "description": "Groucho description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "groucho"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "__Limited availability__ Conditional schema.",
                              "properties": {
                                "chico": {
                                  "description": "Chico description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "chico"
                              ],
                              "type": "object",
                              "x-akamai": {
                                "status": "LA"
                              }
                            },
                            {
                              "description": "__Bot manager__ Conditional schema.",
                              "properties": {
                                "harpo": {
                                  "description": "Harpo description.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "harpo"
                              ],
                              "type": "object",
                              "x-akamai": {
                                "labels": [
                                  "Bot manager"
                                ]
                              }
                            }
                          ]
                        },
                        "minItems": 1,
                        "type": "array"
                      },
                      "scalarAnyOf": {
                        "description": "Array that may contain strings or numbers.",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "minItems": 1,
                        "type": "array"
                      },
                      "scalarOneOf": {
                        "description": "Array that may contain strings or numbers.",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "minItems": 1,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "arr-uniq-non": {
                    "description": "Array specifies `uniqueItems: false`.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": false
                  },
                  "threshold-max": {
                    "description": "Array in sample data is too long.",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array"
                  },
                  "threshold-min": {
                    "description": "Sample data is zero-length.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/arr.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "arr-bool": [],
                  "arr-max": [
                    "GROUCHO",
                    "CHICO",
                    "HARPO"
                  ],
                  "arr-min-missing": [
                    {
                      "bar": {
                        "chico": true,
                        "groucho": true,
                        "harpo": false
                      },
                      "foo": {
                        "chico": true,
                        "groucho": true,
                        "harpo": false
                      }
                    }
                  ],
                  "arr-min-zero": [
                    {
                      "bar": 1,
                      "foo": "latest"
                    }
                  ],
                  "arr-name-singular": [],
                  "arr-poly": {},
                  "arr-uniq-non": [
                    "GROUCHO",
                    "CHICO",
                    "HARPO"
                  ],
                  "param-mismatch": 1234,
                  "thresold-max": [
                    "GROUCHO",
                    "HARPO",
                    "ZEPPO"
                  ],
                  "thresold-min": []
                },
                "schema": {
                  "description": "Array tests.",
                  "properties": {
                    "arr-bool": {
                      "description": "This is a bitmap, which is weird API design.",
                      "items": {
                        "type": "boolean"
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-delim-inaccurate": {
                      "description": "A list of comma-separated values.",
                      "items": {
                        "description": "Includes space delimited values.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "arr-desc-mismatch": {
                      "description": "This is the outer description.",
                      "items": {
                        "description": "This is the inner description.",
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-desc-misplaced": {
                      "items": {
                        "description": "There's only an inner description.",
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-desc-redundant": {
                      "description": "This is the same description.",
                      "items": {
                        "description": "This is the same description.",
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-desc-verbose": {
                      "description": "A list of comma-separated values.",
                      "items": {
                        "description": "An object delimited by a comma.",
                        "properties": {
                          "prop": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "arr-enum-desc": {
                      "description": "Throw a warning if the component `items` is an enum. In that case, we don't want to log `str-enum-desc-unlisted` on the non-publishing description within the `items`.",
                      "items": {
                        "description": "This doesn't describe enum values.",
                        "enum": [
                          "chico",
                          "groucho",
                          "harpo"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "arr-enum-desc-link": {
                      "description": "Don't throw the `str-enum-desc-unlisted` error because the link is included. See [Values link](https://techdocs.akamai.com/internal-ux-writing/reference/slug).",
                      "items": {
                        "description": "This doesn't describe enum values.",
                        "enum": [
                          "chico",
                          "groucho",
                          "harpo"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "arr-max": {
                      "description": "Array specifies `maxItems`.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 10,
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-min-items-high": {
                      "description": "Array with `minItems > 1` should be flagged as a warning.",
                      "minItems": 2,
                      "type": "array"
                    },
                    "arr-min-missing": {
                      "description": "Array lacks `minItems`.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "arr-min-zero": {
                      "description": "Array with `minItems:0` may be empty, noteworthy.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 0,
                      "type": "array"
                    },
                    "arr-name-singular": {
                      "description": "TBD not named plural.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array"
                    },
                    "arr-poly": {
                      "description": "Arrays that may contain more than one type. Not bad, but complex for doc.",
                      "properties": {
                        "objectAnyOf": {
                          "description": "Array that may contain strings or numbers.",
                          "items": {
                            "anyOf": [
                              {
                                "properties": {
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "groucho"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "chico"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "harpo"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "objectOneOf": {
                          "description": "Array that may contain strings or numbers.",
                          "items": {
                            "oneOf": [
                              {
                                "description": "Unconditional schema.",
                                "properties": {
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "groucho"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "__Limited availability__ Conditional schema.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "chico"
                                ],
                                "type": "object",
                                "x-akamai": {
                                  "status": "LA"
                                }
                              },
                              {
                                "description": "__Bot manager__ Conditional schema.",
                                "properties": {
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "harpo"
                                ],
                                "type": "object",
                                "x-akamai": {
                                  "labels": [
                                    "Bot manager"
                                  ]
                                }
                              }
                            ]
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "scalarAnyOf": {
                          "description": "Array that may contain strings or numbers.",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "scalarOneOf": {
                          "description": "Array that may contain strings or numbers.",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ]
                          },
                          "minItems": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "arr-uniq-non": {
                      "description": "Array specifies `uniqueItems: false`.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": false
                    },
                    "threshold-max": {
                      "description": "Array in sample data is too long.",
                      "items": {
                        "type": "string"
                      },
                      "maxItems": 2,
                      "minItems": 0,
                      "type": "array"
                    },
                    "threshold-min": {
                      "description": "Sample data is zero-length.",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/arr.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test arrays",
        "tags": [
          "Arrays"
        ]
      }
    },
    "/data/bool": {
      "put": {
        "description": "This tests booleans.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-bool"
        },
        "operationId": "put-bool",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "bool-desc-misformatted": true,
                "bool-desc-verbose": true,
                "bool-name-mixed": true,
                "bool-name-suffix": true,
                "bool-null": true,
                "bool-pseudo-enum": true
              },
              "schema": {
                "description": "Boolean tests.",
                "properties": {
                  "bool-desc-misformatted": {
                    "description": "Malformed references to T/F values",
                    "properties": {
                      "booleansCapitalized": {
                        "description": "This boolean's description mentions capitalized `True` and `False` values",
                        "type": "boolean"
                      },
                      "booleansUnformatted": {
                        "description": "This boolean's description mentions unformatted true or false values.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "bool-desc-verbose": {
                    "description": "Check for unnecessary `true` and `false` in the description.",
                    "properties": {
                      "falseOnly": {
                        "description": "The description mentions the `false` value.",
                        "type": "boolean"
                      },
                      "trueAndFalseNoDefault": {
                        "description": "The description mentions both the `true` and `false` values.",
                        "type": "boolean"
                      },
                      "trueAndFalseWithDefault": {
                        "default": true,
                        "description": "The description mentions both the `true` and `false` values, which is OK with a default value.",
                        "type": "boolean"
                      },
                      "trueOnly": {
                        "description": "The description mentions the `true` value.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "bool-name-mixed": {
                    "description": "TBD mix of enableFoo, fooEnabled? (unreliable?).",
                    "type": "boolean"
                  },
                  "bool-name-suffix": {
                    "description": "Boolean is misnamed `*Switch`, `*Flag`, `*Toggler`, `*Boolean`.",
                    "properties": {
                      "widgetBoolean": {
                        "description": "A badly named boolean.",
                        "type": "boolean"
                      },
                      "widgetFlag": {
                        "description": "A badly named boolean.",
                        "type": "boolean"
                      },
                      "widgetSwitch": {
                        "description": "A badly named boolean.",
                        "type": "boolean"
                      },
                      "widgetToggler": {
                        "description": "A badly named boolean.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "bool-null": {
                    "description": "This boolean also allows a null value, which is kind of messed up.",
                    "nullable": true,
                    "type": "boolean"
                  },
                  "bool-pseudo-enum": {
                    "additionalProperties": false,
                    "description": "These enum values should likely be re-typed as boolean.",
                    "properties": {
                      "pseudoBooleanOk": {
                        "description": "Emit a notice that this was evaluated and probably not a problem. (Values: `GROUCHO`, `CHICO`.)",
                        "enum": [
                          "GROUCHO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "pseudoBooleanOnOff": {
                        "description": "Flag this `ON`/`OFF` enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "string"
                      },
                      "pseudoBooleanTrueFalse": {
                        "description": "Flag this `true`/`false` string enum.",
                        "enum": [
                          "true",
                          "false"
                        ],
                        "type": "string"
                      },
                      "pseudoBooleanYesNo": {
                        "description": "Flag this `YES`/`NO` enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "string"
                      },
                      "pseudoBooleanYesNoMaybe": {
                        "description": "Do not flag this `YES`/`NO`/`MAYBE` enum.",
                        "enum": [
                          true,
                          false,
                          "MAYBE"
                        ],
                        "type": "string"
                      },
                      "pseudoBooleanZeroOneInt": {
                        "description": "Flag this `0`/`1` integer enum.",
                        "enum": [
                          0,
                          1
                        ],
                        "type": "integer"
                      },
                      "pseudoBooleanZeroOneStr": {
                        "description": "Flag this `0`/`1` string enum.",
                        "enum": [
                          "0",
                          "1"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/bool.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "bool-desc-misformatted": true,
                  "bool-desc-verbose": true,
                  "bool-name-mixed": true,
                  "bool-name-suffix": true,
                  "bool-null": true,
                  "bool-pseudo-enum": true
                },
                "schema": {
                  "description": "Boolean tests.",
                  "properties": {
                    "bool-desc-misformatted": {
                      "description": "Malformed references to T/F values",
                      "properties": {
                        "booleansCapitalized": {
                          "description": "This boolean's description mentions capitalized `True` and `False` values",
                          "type": "boolean"
                        },
                        "booleansUnformatted": {
                          "description": "This boolean's description mentions unformatted true or false values.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "bool-desc-verbose": {
                      "description": "Check for unnecessary `true` and `false` in the description.",
                      "properties": {
                        "falseOnly": {
                          "description": "The description mentions the `false` value.",
                          "type": "boolean"
                        },
                        "trueAndFalseNoDefault": {
                          "description": "The description mentions both the `true` and `false` values.",
                          "type": "boolean"
                        },
                        "trueAndFalseWithDefault": {
                          "default": true,
                          "description": "The description mentions both the `true` and `false` values, which is OK with a default value.",
                          "type": "boolean"
                        },
                        "trueOnly": {
                          "description": "The description mentions the `true` value.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "bool-name-mixed": {
                      "description": "TBD mix of enableFoo, fooEnabled? (unreliable?).",
                      "type": "boolean"
                    },
                    "bool-name-suffix": {
                      "description": "Boolean is misnamed `*Switch`, `*Flag`, `*Toggler`, `*Boolean`.",
                      "properties": {
                        "widgetBoolean": {
                          "description": "A badly named boolean.",
                          "type": "boolean"
                        },
                        "widgetFlag": {
                          "description": "A badly named boolean.",
                          "type": "boolean"
                        },
                        "widgetSwitch": {
                          "description": "A badly named boolean.",
                          "type": "boolean"
                        },
                        "widgetToggler": {
                          "description": "A badly named boolean.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "bool-null": {
                      "description": "This boolean also allows a null value, which is kind of messed up.",
                      "nullable": true,
                      "type": "boolean"
                    },
                    "bool-pseudo-enum": {
                      "additionalProperties": false,
                      "description": "These enum values should likely be re-typed as boolean.",
                      "properties": {
                        "pseudoBooleanOk": {
                          "description": "Emit a notice that this was evaluated and probably not a problem. (Values: `GROUCHO`, `CHICO`.)",
                          "enum": [
                            "GROUCHO",
                            "CHICO"
                          ],
                          "type": "string"
                        },
                        "pseudoBooleanOnOff": {
                          "description": "Flag this `ON`/`OFF` enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "string"
                        },
                        "pseudoBooleanTrueFalse": {
                          "description": "Flag this `true`/`false` string enum.",
                          "enum": [
                            "true",
                            "false"
                          ],
                          "type": "string"
                        },
                        "pseudoBooleanYesNo": {
                          "description": "Flag this `YES`/`NO` enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "string"
                        },
                        "pseudoBooleanYesNoMaybe": {
                          "description": "Do not flag this `YES`/`NO`/`MAYBE` enum.",
                          "enum": [
                            true,
                            false,
                            "MAYBE"
                          ],
                          "type": "string"
                        },
                        "pseudoBooleanZeroOneInt": {
                          "description": "Flag this `0`/`1` integer enum.",
                          "enum": [
                            0,
                            1
                          ],
                          "type": "integer"
                        },
                        "pseudoBooleanZeroOneStr": {
                          "description": "Flag this `0`/`1` string enum.",
                          "enum": [
                            "0",
                            "1"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/bool.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test booleans",
        "tags": [
          "Booleans"
        ]
      }
    },
    "/data/custom": {
      "get": {
        "description": "__Bot Manager__ This operation is marked as product-specific, along with a query parameter and some schema members.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-custom-data"
        },
        "operationId": "get-custom-data",
        "parameters": [
          {
            "description": "__Beta__, __Bot Manager__ This marks a per-product query parameter. Also mixes in BETA status.",
            "in": "query",
            "name": "isPerProduct",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            },
            "x-akamai": {
              "labels": [
                "Bot Manager"
              ],
              "status": "BETA"
            }
          },
          {
            "description": "Ordinary GA query parameter.",
            "in": "query",
            "name": "statusDefault",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "statusDefault": true
              },
              "schema": {
                "properties": {
                  "customOther": {
                    "description": "Prepend arbitrary labels.",
                    "properties": {
                      "customLabel": {
                        "description": "__Bot Manager__ Description should be prefixed by a custom label, in this case a product name.",
                        "type": "string",
                        "x-akamai": {
                          "labels": [
                            "Bot Manager"
                          ]
                        }
                      },
                      "customLabels": {
                        "description": "__Bot Manager__, __App & API Protector__ Description should be prefixed by a comma-separated set of custom labels, in this case product names.",
                        "type": "string",
                        "x-akamai": {
                          "labels": [
                            "Bot Manager",
                            "App & API Protector"
                          ]
                        }
                      },
                      "spec-labels-value-malformed": {
                        "description": "__B__, __o__, __t__, __ __, __M__, __a__, __n__, __a__, __g__, __e__, __r__ Throw a warning about malformed syntax, where `labels` should be an array.",
                        "type": "string",
                        "x-akamai": {
                          "labels": "Bot Manager"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "customStatus": {
                    "description": "Prefixed status indicators.",
                    "properties": {
                      "spec-status-value-unsupported": {
                        "description": "Unsupported status value.",
                        "type": "string",
                        "x-akamai": {
                          "status": "INVALID_VALUE"
                        }
                      },
                      "statusBeta": {
                        "description": "__Beta__ Description should be prefixed by _Beta_ status.",
                        "type": "string",
                        "x-akamai": {
                          "status": "BETA"
                        }
                      },
                      "statusDefault": {
                        "description": "An ordinary, unlabeled GA schema.",
                        "type": "string"
                      },
                      "statusDeprecated": {
                        "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
                        "type": "string",
                        "x-akamai": {
                          "status": "DEPRECATED"
                        }
                      },
                      "statusInternal": {
                        "description": "__Internal__ Description should be prefixed by _Internal_ status.",
                        "type": "string",
                        "x-akamai": {
                          "status": "INTERNAL"
                        }
                      },
                      "statusLimited": {
                        "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
                        "type": "string",
                        "x-akamai": {
                          "status": "LA"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "labelOrder": {
                    "description": "__Beta__, __Write-once__, __Groucho__, __Chico__, __Harpo__ If you spec _every_ kind of label, in what order do they list? Should be status, R/W-O, then any custom labels.",
                    "type": "string",
                    "x-akamai": {
                      "labels": [
                        "Groucho",
                        "Chico",
                        "Harpo"
                      ],
                      "status": "BETA",
                      "write-once": true
                    }
                  },
                  "rwo": {
                    "description": "Read-only, Write-only, and custom Write-once syntax.",
                    "properties": {
                      "readOnly": {
                        "description": "__Read-only__ Description should have a bolded _Read-only_ label. Typical for generated IDs, timestamps, and status indicators. (Does ReadMe suppress it from request schema doc?)",
                        "readOnly": true,
                        "type": "string"
                      },
                      "spec-wo-value-malformed": {
                        "description": "__Write-once__ Throw a warning about malformed syntax, where `write-once` should be a boolean.",
                        "type": "string",
                        "x-akamai": {
                          "write-once": "YES"
                        }
                      },
                      "writeOnce": {
                        "description": "__Write-once__ Description should have a bolded _Write-once_ label. Typical when initially assigning group or contract IDs.",
                        "type": "string",
                        "x-akamai": {
                          "write-once": true
                        }
                      },
                      "writeOnly": {
                        "description": "__Write-only__ Description should have a bolded _Write-only_ label. Occurs rarely when passing in passwords or other secret data that shouldn't display in subsequent responses. (Does ReadMe suppress it from response schema doc?)",
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "type": "object"
                  },
                  "statusBetaTestLevel": {
                    "description": "__Beta__ Description should be prefixed by _Beta_ status.",
                    "type": "string",
                    "x-akamai": {
                      "status": "BETA"
                    }
                  },
                  "statusDeprecatedTestLevel": {
                    "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
                    "type": "string",
                    "x-akamai": {
                      "status": "DEPRECATED"
                    }
                  },
                  "statusInternalTestLevel": {
                    "description": "__Internal__ Description should be prefixed by _Internal_ status.",
                    "type": "string",
                    "x-akamai": {
                      "status": "INTERNAL"
                    }
                  },
                  "statusLimitedTestLevel": {
                    "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
                    "type": "string",
                    "x-akamai": {
                      "status": "LA"
                    }
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/custom.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "statusDefault": true
                },
                "schema": {
                  "properties": {
                    "customOther": {
                      "description": "Prepend arbitrary labels.",
                      "properties": {
                        "customLabel": {
                          "description": "__Bot Manager__ Description should be prefixed by a custom label, in this case a product name.",
                          "type": "string",
                          "x-akamai": {
                            "labels": [
                              "Bot Manager"
                            ]
                          }
                        },
                        "customLabels": {
                          "description": "__Bot Manager__, __App & API Protector__ Description should be prefixed by a comma-separated set of custom labels, in this case product names.",
                          "type": "string",
                          "x-akamai": {
                            "labels": [
                              "Bot Manager",
                              "App & API Protector"
                            ]
                          }
                        },
                        "spec-labels-value-malformed": {
                          "description": "__B__, __o__, __t__, __ __, __M__, __a__, __n__, __a__, __g__, __e__, __r__ Throw a warning about malformed syntax, where `labels` should be an array.",
                          "type": "string",
                          "x-akamai": {
                            "labels": "Bot Manager"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "customStatus": {
                      "description": "Prefixed status indicators.",
                      "properties": {
                        "spec-status-value-unsupported": {
                          "description": "Unsupported status value.",
                          "type": "string",
                          "x-akamai": {
                            "status": "INVALID_VALUE"
                          }
                        },
                        "statusBeta": {
                          "description": "__Beta__ Description should be prefixed by _Beta_ status.",
                          "type": "string",
                          "x-akamai": {
                            "status": "BETA"
                          }
                        },
                        "statusDefault": {
                          "description": "An ordinary, unlabeled GA schema.",
                          "type": "string"
                        },
                        "statusDeprecated": {
                          "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
                          "type": "string",
                          "x-akamai": {
                            "status": "DEPRECATED"
                          }
                        },
                        "statusInternal": {
                          "description": "__Internal__ Description should be prefixed by _Internal_ status.",
                          "type": "string",
                          "x-akamai": {
                            "status": "INTERNAL"
                          }
                        },
                        "statusLimited": {
                          "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
                          "type": "string",
                          "x-akamai": {
                            "status": "LA"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "labelOrder": {
                      "description": "__Beta__, __Write-once__, __Groucho__, __Chico__, __Harpo__ If you spec _every_ kind of label, in what order do they list? Should be status, R/W-O, then any custom labels.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Groucho",
                          "Chico",
                          "Harpo"
                        ],
                        "status": "BETA",
                        "write-once": true
                      }
                    },
                    "rwo": {
                      "description": "Read-only, Write-only, and custom Write-once syntax.",
                      "properties": {
                        "readOnly": {
                          "description": "__Read-only__ Description should have a bolded _Read-only_ label. Typical for generated IDs, timestamps, and status indicators. (Does ReadMe suppress it from request schema doc?)",
                          "readOnly": true,
                          "type": "string"
                        },
                        "spec-wo-value-malformed": {
                          "description": "__Write-once__ Throw a warning about malformed syntax, where `write-once` should be a boolean.",
                          "type": "string",
                          "x-akamai": {
                            "write-once": "YES"
                          }
                        },
                        "writeOnce": {
                          "description": "__Write-once__ Description should have a bolded _Write-once_ label. Typical when initially assigning group or contract IDs.",
                          "type": "string",
                          "x-akamai": {
                            "write-once": true
                          }
                        },
                        "writeOnly": {
                          "description": "__Write-only__ Description should have a bolded _Write-only_ label. Occurs rarely when passing in passwords or other secret data that shouldn't display in subsequent responses. (Does ReadMe suppress it from response schema doc?)",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "type": "object"
                    },
                    "statusBetaTestLevel": {
                      "description": "__Beta__ Description should be prefixed by _Beta_ status.",
                      "type": "string",
                      "x-akamai": {
                        "status": "BETA"
                      }
                    },
                    "statusDeprecatedTestLevel": {
                      "description": "__Deprecated__ Description should be prefixed by _Deprecated_ status.",
                      "type": "string",
                      "x-akamai": {
                        "status": "DEPRECATED"
                      }
                    },
                    "statusInternalTestLevel": {
                      "description": "__Internal__ Description should be prefixed by _Internal_ status.",
                      "type": "string",
                      "x-akamai": {
                        "status": "INTERNAL"
                      }
                    },
                    "statusLimitedTestLevel": {
                      "description": "__Limited availability__ Description should be prefixed by _Limited availability_ status.",
                      "type": "string",
                      "x-akamai": {
                        "status": "LA"
                      }
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/custom.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test custom data schemas and read/write labels",
        "tags": [
          "Custom"
        ],
        "x-akamai": {
          "labels": [
            "Bot Manager"
          ]
        }
      }
    },
    "/data/lang-body-camel": {
      "get": {
        "description": "Raise a `lang-body-camel` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-lang-body-camel"
        },
        "operationId": "get-lang-body-camel",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "properties": {
                    "id": {
                      "description": "This tests unqualified schemaNames.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "The body camelcase words",
        "tags": [
          "Language"
        ]
      }
    },
    "/data/lang-sentence-lc": {
      "get": {
        "description": "__Bot Manager__ Raise a `lang-sentence-lc` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-lang-sentence-lc"
        },
        "operationId": "get-lang-sentence-lc",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "properties": {
                    "startsLowercase": {
                      "description": "this sentence starts lowercase.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "First word lowercase",
        "tags": [
          "Language"
        ],
        "x-akamai": {
          "labels": [
            "Bot Manager"
          ]
        }
      }
    },
    "/data/null": {
      "put": {
        "description": "This tests null.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-null"
        },
        "operationId": "put-null",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "sample-null": null,
                "schema-null-avoid": null,
                "schema-null-lacks-desc": null,
                "schema-null-lacks-spec": null
              },
              "schema": {
                "description": "Tests for null values.",
                "nullable": true,
                "properties": {
                  "sample-null": {
                    "description": "Avoid `null` values in sample data.",
                    "nullable": true
                  },
                  "schema-null-avoid": {
                    "description": "Avoid nullable data.",
                    "nullable": true,
                    "type": "string"
                  },
                  "schema-null-lacks-desc": {
                    "description": "This description misses a crucial detail.",
                    "nullable": true,
                    "type": "string"
                  },
                  "schema-null-lacks-spec": {
                    "description": "This description mentions a null value, but schema is not marked\nas nullable.",
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/null.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "sample-null": null,
                  "schema-null-avoid": null,
                  "schema-null-lacks-desc": null,
                  "schema-null-lacks-spec": null
                },
                "schema": {
                  "description": "Tests for null values.",
                  "nullable": true,
                  "properties": {
                    "sample-null": {
                      "description": "Avoid `null` values in sample data.",
                      "nullable": true
                    },
                    "schema-null-avoid": {
                      "description": "Avoid nullable data.",
                      "nullable": true,
                      "type": "string"
                    },
                    "schema-null-lacks-desc": {
                      "description": "This description misses a crucial detail.",
                      "nullable": true,
                      "type": "string"
                    },
                    "schema-null-lacks-spec": {
                      "description": "This description mentions a null value, but schema is not marked\nas nullable.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/null.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test null",
        "tags": [
          "Empty values"
        ]
      }
    },
    "/data/num": {
      "put": {
        "description": "This tests numeric data.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-num"
        },
        "operationId": "put-num",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "num-epoch": 1234,
                "num-max": 1234,
                "num-min-missing": 1234,
                "num-not-int-kw": 1234,
                "num-pct-lacks-max": 1234,
                "patterns": {
                  "patternInvalid": "All work and no play...",
                  "patternInvalidatesData": "All work and no play..."
                },
                "thresold-max": 672941,
                "thresold-min": 0
              },
              "schema": {
                "description": "Numeric tests.",
                "properties": {
                  "num-epoch": {
                    "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                    "properties": {
                      "activationDate": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "integer"
                      },
                      "activationTime": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "num-max": {
                    "description": "Specifies a `maximum` value.",
                    "maximum": 90,
                    "type": "integer"
                  },
                  "num-min-missing": {
                    "description": "This numeric schema doesn't specify a `minimum` value.",
                    "type": "integer"
                  },
                  "num-min-missing-enum": {
                    "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                    "enum": [
                      1,
                      2
                    ],
                    "type": "integer"
                  },
                  "num-not-int-kw": {
                    "description": "Nested members are mistyped as `number`.",
                    "properties": {
                      "policyId": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "number"
                      },
                      "policyVersion": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "num-not-int-other": {
                    "description": "Nested members may be mistyped as `number`.",
                    "properties": {
                      "policyLimit": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "number"
                      },
                      "policyThreshold": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "num-pct-lacks-max": {
                    "description": "This is described as a percent, but spec lacks a maximum.",
                    "type": "integer"
                  },
                  "threshold-max": {
                    "description": "Sample integer data is too high.",
                    "maximum": 360,
                    "type": "integer"
                  },
                  "threshold-min": {
                    "description": "Sample integer data is too low.",
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/num.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "num-epoch": 1234,
                  "num-max": 1234,
                  "num-min-missing": 1234,
                  "num-not-int-kw": 1234,
                  "num-pct-lacks-max": 1234,
                  "patterns": {
                    "patternInvalid": "All work and no play...",
                    "patternInvalidatesData": "All work and no play..."
                  },
                  "thresold-max": 672941,
                  "thresold-min": 0
                },
                "schema": {
                  "description": "Numeric tests.",
                  "properties": {
                    "num-epoch": {
                      "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                      "properties": {
                        "activationDate": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "integer"
                        },
                        "activationTime": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "num-max": {
                      "description": "Specifies a `maximum` value.",
                      "maximum": 90,
                      "type": "integer"
                    },
                    "num-min-missing": {
                      "description": "This numeric schema doesn't specify a `minimum` value.",
                      "type": "integer"
                    },
                    "num-min-missing-enum": {
                      "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                      "enum": [
                        1,
                        2
                      ],
                      "type": "integer"
                    },
                    "num-not-int-kw": {
                      "description": "Nested members are mistyped as `number`.",
                      "properties": {
                        "policyId": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "number"
                        },
                        "policyVersion": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "num-not-int-other": {
                      "description": "Nested members may be mistyped as `number`.",
                      "properties": {
                        "policyLimit": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "number"
                        },
                        "policyThreshold": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "num-pct-lacks-max": {
                      "description": "This is described as a percent, but spec lacks a maximum.",
                      "type": "integer"
                    },
                    "threshold-max": {
                      "description": "Sample integer data is too high.",
                      "maximum": 360,
                      "type": "integer"
                    },
                    "threshold-min": {
                      "description": "Sample integer data is too low.",
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/num.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test numeric data",
        "tags": [
          "Numerics"
        ]
      }
    },
    "/data/obj": {
      "put": {
        "description": "This tests objects.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-obj"
        },
        "operationId": "put-obj",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "no-op": true,
                "obj-additional-missing": {
                  "chico": "TBD",
                  "groucho": "TBD",
                  "harpo": "TBD"
                },
                "obj-bool": {
                  "chico": false,
                  "groucho": true,
                  "harpo": true
                },
                "obj-map-doc": {
                  "42354": {
                    "thingId": 731423,
                    "thingName": "NA"
                  },
                  "96324": {
                    "thingId": 832333,
                    "thingName": "NA"
                  }
                },
                "obj-max": {},
                "obj-max-threshold": {},
                "obj-min": {},
                "obj-orphan": {},
                "obj-req-missing": {},
                "obj-undefined": {
                  "allBetsAreOff": true
                },
                "obj-undefined-req": {
                  "chico": false,
                  "groucho": true,
                  "harpo": true,
                  "zeppo": false
                }
              },
              "schema": {
                "description": "Object tests.",
                "properties": {
                  "obj-additional-missing": {
                    "description": "Schema lacks `additionalProperties:false`.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "groucho",
                      "harpo",
                      "chico"
                    ],
                    "type": "object"
                  },
                  "obj-additional-true": {
                    "additionalProperties": true,
                    "description": "Schema specifies `additionalProperties:true`.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "groucho",
                      "harpo",
                      "chico"
                    ],
                    "type": "object"
                  },
                  "obj-bool": {
                    "description": "Object members are all boolean, suggesting that an enum array might be better design.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "boolean"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "boolean"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "groucho",
                      "harpo",
                      "chico"
                    ],
                    "type": "object"
                  },
                  "obj-max": {
                    "description": "Object specifies `maxProperties`.",
                    "maxProperties": 3,
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "boolean"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "boolean"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "boolean"
                      },
                      "zeppo": {
                        "description": "Zeppo description.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "obj-max-threshold": {
                    "description": "Object specifies many, many members.",
                    "properties": {
                      "a": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "b": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "c": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "d": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "e": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "f": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "g": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "h": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "i": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "j": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "k": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "l": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "m": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "n": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "o": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "p": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "q": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "r": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "s": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "t": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "u": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "v": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "w": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "x": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "y": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "z": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "a",
                      "e",
                      "i",
                      "o",
                      "u"
                    ],
                    "type": "object"
                  },
                  "obj-min": {
                    "description": "Object specifies `minProperties`.",
                    "minProperties": 3,
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "boolean"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "boolean"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "boolean"
                      },
                      "zeppo": {
                        "description": "Zeppo description.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "obj-orphan": {
                    "description": "TBD object specs single member.",
                    "type": "object"
                  },
                  "obj-req-missing": {
                    "description": "Object schema lacks a `required` array.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "obj-undefined": {
                    "description": "Object's `properties` are undefined.",
                    "type": "object"
                  },
                  "obj-undefined-additional-false": {
                    "additionalProperties": false,
                    "description": "Complain that this schema has `additionalProperties` set\nto `false` with no defined `properties`.",
                    "type": "object"
                  },
                  "obj-undefined-additional-schema": {
                    "additionalProperties": {
                      "description": "This describes the referenced value.",
                      "minLength": 1,
                      "type": "string"
                    },
                    "description": "Note `additionalProperties` is set to a schema object with no\ndefined `properties`, to properly describe an object mapping.",
                    "type": "object"
                  },
                  "obj-undefined-additional-true": {
                    "additionalProperties": true,
                    "description": "Complain that this schema has `additionalProperties` set\nto `true` with no defined `properties`.",
                    "type": "object"
                  },
                  "obj-undefined-req": {
                    "description": "This object requires a `zeppo` member that's not defined as a property.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "boolean"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "boolean"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "groucho",
                      "chico",
                      "harpo",
                      "zeppo"
                    ],
                    "type": "object"
                  },
                  "schema-empty": {},
                  "schema-required-read-only": {
                    "description": "__Read-only__ Schema is marked as both read-only and required.",
                    "readOnly": true,
                    "type": "boolean"
                  },
                  "schema-required-with-default": {
                    "default": true,
                    "description": "This object key is marked as required, but the schema specifies a default value, logically contradictory.",
                    "type": "boolean"
                  },
                  "svc-tally-obj-keys": {
                    "description": "Complain that this set of keys is defined in more than one schema file.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "obj-additional-missing",
                  "obj-additional-true",
                  "obj-bool",
                  "obj-max",
                  "obj-max-threshold",
                  "obj-min",
                  "obj-orphan",
                  "obj-req-missing",
                  "obj-undefined-req",
                  "obj-undefined",
                  "schema-empty",
                  "schema-required-with-default",
                  "schema-required-read-only"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/obj.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "no-op": true,
                  "obj-additional-missing": {
                    "chico": "TBD",
                    "groucho": "TBD",
                    "harpo": "TBD"
                  },
                  "obj-bool": {
                    "chico": false,
                    "groucho": true,
                    "harpo": true
                  },
                  "obj-map-doc": {
                    "42354": {
                      "thingId": 731423,
                      "thingName": "NA"
                    },
                    "96324": {
                      "thingId": 832333,
                      "thingName": "NA"
                    }
                  },
                  "obj-max": {},
                  "obj-max-threshold": {},
                  "obj-min": {},
                  "obj-orphan": {},
                  "obj-req-missing": {},
                  "obj-undefined": {
                    "allBetsAreOff": true
                  },
                  "obj-undefined-req": {
                    "chico": false,
                    "groucho": true,
                    "harpo": true,
                    "zeppo": false
                  }
                },
                "schema": {
                  "description": "Object tests.",
                  "properties": {
                    "obj-additional-missing": {
                      "description": "Schema lacks `additionalProperties:false`.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "groucho",
                        "harpo",
                        "chico"
                      ],
                      "type": "object"
                    },
                    "obj-additional-true": {
                      "additionalProperties": true,
                      "description": "Schema specifies `additionalProperties:true`.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "groucho",
                        "harpo",
                        "chico"
                      ],
                      "type": "object"
                    },
                    "obj-bool": {
                      "description": "Object members are all boolean, suggesting that an enum array might be better design.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "boolean"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "boolean"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "groucho",
                        "harpo",
                        "chico"
                      ],
                      "type": "object"
                    },
                    "obj-max": {
                      "description": "Object specifies `maxProperties`.",
                      "maxProperties": 3,
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "boolean"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "boolean"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "boolean"
                        },
                        "zeppo": {
                          "description": "Zeppo description.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "obj-max-threshold": {
                      "description": "Object specifies many, many members.",
                      "properties": {
                        "a": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "b": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "c": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "d": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "e": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "f": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "g": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "h": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "i": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "j": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "k": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "l": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "m": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "n": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "o": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "p": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "q": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "r": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "s": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "t": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "u": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "v": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "w": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "x": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "y": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "z": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "a",
                        "e",
                        "i",
                        "o",
                        "u"
                      ],
                      "type": "object"
                    },
                    "obj-min": {
                      "description": "Object specifies `minProperties`.",
                      "minProperties": 3,
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "boolean"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "boolean"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "boolean"
                        },
                        "zeppo": {
                          "description": "Zeppo description.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "obj-orphan": {
                      "description": "TBD object specs single member.",
                      "type": "object"
                    },
                    "obj-req-missing": {
                      "description": "Object schema lacks a `required` array.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "obj-undefined": {
                      "description": "Object's `properties` are undefined.",
                      "type": "object"
                    },
                    "obj-undefined-additional-false": {
                      "additionalProperties": false,
                      "description": "Complain that this schema has `additionalProperties` set\nto `false` with no defined `properties`.",
                      "type": "object"
                    },
                    "obj-undefined-additional-schema": {
                      "additionalProperties": {
                        "description": "This describes the referenced value.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "description": "Note `additionalProperties` is set to a schema object with no\ndefined `properties`, to properly describe an object mapping.",
                      "type": "object"
                    },
                    "obj-undefined-additional-true": {
                      "additionalProperties": true,
                      "description": "Complain that this schema has `additionalProperties` set\nto `true` with no defined `properties`.",
                      "type": "object"
                    },
                    "obj-undefined-req": {
                      "description": "This object requires a `zeppo` member that's not defined as a property.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "boolean"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "boolean"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "groucho",
                        "chico",
                        "harpo",
                        "zeppo"
                      ],
                      "type": "object"
                    },
                    "schema-empty": {},
                    "schema-required-read-only": {
                      "description": "__Read-only__ Schema is marked as both read-only and required.",
                      "readOnly": true,
                      "type": "boolean"
                    },
                    "schema-required-with-default": {
                      "default": true,
                      "description": "This object key is marked as required, but the schema specifies a default value, logically contradictory.",
                      "type": "boolean"
                    },
                    "svc-tally-obj-keys": {
                      "description": "Complain that this set of keys is defined in more than one schema file.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "obj-additional-missing",
                    "obj-additional-true",
                    "obj-bool",
                    "obj-max",
                    "obj-max-threshold",
                    "obj-min",
                    "obj-orphan",
                    "obj-req-missing",
                    "obj-undefined-req",
                    "obj-undefined",
                    "schema-empty",
                    "schema-required-with-default",
                    "schema-required-read-only"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/obj.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test objects",
        "tags": [
          "Objects"
        ]
      }
    },
    "/data/polymorphic/all-of": {
      "put": {
        "description": "This tests `allOf` schemas.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-allof"
        },
        "operationId": "put-allof",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": true,
                "groucho": true,
                "harpo": true
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "allOfDynamicSample": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          }
                        ],
                        "description": "Description comes from `beatles-allOf.yaml`.",
                        "x-akamai": {
                          "file-path": "schemas/beatles-allOf.yaml"
                        }
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ],
                        "description": "Description comes from `stones-allOf.yaml`.",
                        "x-akamai": {
                          "file-path": "schemas/stones-allOf.yaml"
                        }
                      }
                    ]
                  },
                  "allOfExclude": {
                    "allOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "groucho": {
                            "description": "This schema is defined within an `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "chico": {
                            "description": "This schema is defined within an `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "harpo": {
                            "description": "This schema is defined within an `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      {}
                    ],
                    "description": "Test whether an `allOf` item can be excluded. The `gummo` key should not publish. (YES)"
                  },
                  "allOfMixIn": {
                    "allOf": [
                      {
                        "description": "Test of auditing schemas.",
                        "properties": {
                          "createdBy": {
                            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "createdDate": {
                            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modifiedBy": {
                            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modifiedDate": {
                            "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/audit-members.yaml"
                        }
                      },
                      {
                        "description": "This tests whether you can spec `allOf` to blend an object from different schemas. Various auditing members are `$ref` linked from a common `audit-members.yaml` schema. Read-only audit members don't appear in the request schema interface.",
                        "properties": {
                          "chico": {
                            "description": "This schema is defined in the second `allOf` object.",
                            "type": "boolean"
                          },
                          "groucho": {
                            "description": "This schema is defined in the second `allOf` object.",
                            "type": "boolean"
                          },
                          "harpo": {
                            "description": "This schema is defined in the second `allOf` object.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "Test a typical `allOf` scenario where you mix common audit members referenced from an external file, with other data members defined inline."
                  },
                  "allOfThenOneOf": {
                    "allOf": [
                      {
                        "properties": {
                          "george": {
                            "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                            "type": "boolean"
                          },
                          "john": {
                            "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                            "type": "boolean"
                          },
                          "paul": {
                            "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/bt-shared.yaml"
                        }
                      },
                      {
                        "oneOf": [
                          {
                            "properties": {
                              "pete": {
                                "description": "Pete Best. (Derives from `bt-original.yaml`)",
                                "type": "boolean"
                              },
                              "stuart": {
                                "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "title": "Original",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-original.yaml"
                            }
                          },
                          {
                            "properties": {
                              "ringo": {
                                "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "title": "Later",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-later.yaml"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "allOfWithinOneOf": {
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "properties": {
                              "pete": {
                                "description": "Pete Best. (Derives from `bt-original.yaml`)",
                                "type": "boolean"
                              },
                              "stuart": {
                                "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "title": "Original",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-original.yaml"
                            }
                          },
                          {
                            "properties": {
                              "george": {
                                "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-shared.yaml"
                            }
                          }
                        ],
                        "title": "Original",
                        "x-akamai": {
                          "file-path": "schemas/bt-original-wrapper.yaml"
                        }
                      },
                      {
                        "allOf": [
                          {
                            "properties": {
                              "ringo": {
                                "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "title": "Later",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-later.yaml"
                            }
                          },
                          {
                            "properties": {
                              "george": {
                                "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/bt-shared.yaml"
                            }
                          }
                        ],
                        "title": "Later",
                        "x-akamai": {
                          "file-path": "schemas/bt-later-wrapper.yaml"
                        }
                      }
                    ]
                  },
                  "schema-poly-allof-amorphic": {
                    "additionalProperties": false,
                    "allOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description comes from `beatles-alive.yaml`.",
                        "properties": {
                          "paul": {
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "type": "boolean"
                          },
                          "ringo": {
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/beatles-alive.yaml"
                        }
                      },
                      {
                        "additionalProperties": false,
                        "description": "Description comes from `beatles-dead.yaml`.",
                        "properties": {
                          "george": {
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "type": "boolean"
                          },
                          "john": {
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/beatles-dead.yaml"
                        }
                      }
                    ],
                    "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
                    "properties": {
                      "brian": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "keith": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "schema-poly-allof-amorphic-inline": {
                    "additionalProperties": false,
                    "allOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description is inline, top of first `allOf`.",
                        "properties": {
                          "john": {
                            "description": "Description is inline, in first `allOf`.",
                            "type": "boolean"
                          },
                          "paul": {
                            "description": "Description is inline, in second `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Description is inline, top of second `allOf`.",
                        "properties": {
                          "george": {
                            "description": "Description is inline, in first `allOf`.",
                            "type": "boolean"
                          },
                          "ringo": {
                            "description": "Description is inline, in second `allOf`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
                    "properties": {
                      "brian": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "charlie": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "keith": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      },
                      "mick": {
                        "description": "This schema is part of an object defined outside an `allOf`.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "schema-poly-allof-array": {
                    "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
                    "items": {
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-alive.yaml`.",
                          "properties": {
                            "paul": {
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-alive.yaml"
                          }
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-dead.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-dead.yaml"
                          }
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `stones-alive.yaml`.",
                          "properties": {
                            "keith": {
                              "description": "Description comes from `stones-alive.yaml`.",
                              "type": "boolean"
                            },
                            "mick": {
                              "description": "Description comes from `stones-alive.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/stones-alive.yaml"
                          }
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `stones-dead.yaml`.",
                          "properties": {
                            "brian": {
                              "description": "Description comes from `stones-dead.yaml`.",
                              "type": "boolean"
                            },
                            "charlie": {
                              "description": "Description comes from `stones-dead.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/stones-dead.yaml"
                          }
                        }
                      ]
                    },
                    "type": "array"
                  },
                  "schema-poly-allof-array-inline": {
                    "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
                    "items": {
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description is inline.",
                          "properties": {
                            "john": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description is inline.",
                          "properties": {
                            "george": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description is inline.",
                          "properties": {
                            "keith": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            },
                            "mick": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description is inline.",
                          "properties": {
                            "brian": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            },
                            "charlie": {
                              "description": "Description is inline.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "type": "array"
                  },
                  "schema-poly-allof-nested": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          }
                        ],
                        "description": "Description comes from `beatles-allOf.yaml`.",
                        "x-akamai": {
                          "file-path": "schemas/beatles-allOf.yaml"
                        }
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ],
                        "description": "Description comes from `stones-allOf.yaml`.",
                        "x-akamai": {
                          "file-path": "schemas/stones-allOf.yaml"
                        }
                      }
                    ],
                    "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                  },
                  "schema-poly-allof-nested-inline": {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline, sibling with `allOf`.",
                            "properties": {
                              "john": {
                                "description": "Description is inline, first `allOf`.",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Description is inline, second `allOf`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline, sibling with `allOf`.",
                            "properties": {
                              "george": {
                                "description": "Description is inline, second `allOf`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description is inline, first `allOf`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "allOf": [
                              {
                                "additionalProperties": false,
                                "description": "Description is inline, sibling with `allOf`.",
                                "properties": {
                                  "keith": {
                                    "description": "Description is inline, second `allOf`.",
                                    "type": "boolean"
                                  },
                                  "mick": {
                                    "description": "Description is inline, first `allOf`.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "additionalProperties": false,
                                "description": "Description is inline, sibling with `allOf`.",
                                "properties": {
                                  "brian": {
                                    "description": "Description is inline, first `allOf`.",
                                    "type": "boolean"
                                  },
                                  "charlie": {
                                    "description": "Description is inline, second `allOf`.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              }
                            ],
                            "description": "Description is inline, sibling with `allOf`."
                          }
                        ],
                        "description": "Beatles, inline."
                      }
                    ],
                    "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                  },
                  "schema-poly-single": {
                    "allOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description comes from `beatles-all.yaml`.",
                        "properties": {
                          "george": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "john": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "paul": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "ringo": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/beatles-all.yaml"
                        }
                      }
                    ],
                    "description": "This schema specifies a single `allOf` item."
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/poly-allof.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": true,
                  "groucho": true,
                  "harpo": true
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "allOfDynamicSample": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "properties": {
                                "paul": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "properties": {
                                "george": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-dead.yaml"
                              }
                            }
                          ],
                          "description": "Description comes from `beatles-allOf.yaml`.",
                          "x-akamai": {
                            "file-path": "schemas/beatles-allOf.yaml"
                          }
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-alive.yaml`.",
                              "properties": {
                                "keith": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-dead.yaml`.",
                              "properties": {
                                "brian": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-dead.yaml"
                              }
                            }
                          ],
                          "description": "Description comes from `stones-allOf.yaml`.",
                          "x-akamai": {
                            "file-path": "schemas/stones-allOf.yaml"
                          }
                        }
                      ]
                    },
                    "allOfExclude": {
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "groucho": {
                              "description": "This schema is defined within an `allOf`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "chico": {
                              "description": "This schema is defined within an `allOf`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "harpo": {
                              "description": "This schema is defined within an `allOf`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {}
                      ],
                      "description": "Test whether an `allOf` item can be excluded. The `gummo` key should not publish. (YES)"
                    },
                    "allOfMixIn": {
                      "allOf": [
                        {
                          "description": "Test of auditing schemas.",
                          "properties": {
                            "createdBy": {
                              "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "createdDate": {
                              "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modifiedBy": {
                              "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modifiedDate": {
                              "description": "__Read-only__ This schema is defined in the first `allOf` object, which is `$ref`-linked.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/audit-members.yaml"
                          }
                        },
                        {
                          "description": "This tests whether you can spec `allOf` to blend an object from different schemas. Various auditing members are `$ref` linked from a common `audit-members.yaml` schema. Read-only audit members don't appear in the request schema interface.",
                          "properties": {
                            "chico": {
                              "description": "This schema is defined in the second `allOf` object.",
                              "type": "boolean"
                            },
                            "groucho": {
                              "description": "This schema is defined in the second `allOf` object.",
                              "type": "boolean"
                            },
                            "harpo": {
                              "description": "This schema is defined in the second `allOf` object.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "description": "Test a typical `allOf` scenario where you mix common audit members referenced from an external file, with other data members defined inline."
                    },
                    "allOfThenOneOf": {
                      "allOf": [
                        {
                          "properties": {
                            "george": {
                              "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/bt-shared.yaml"
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "properties": {
                                "pete": {
                                  "description": "Pete Best. (Derives from `bt-original.yaml`)",
                                  "type": "boolean"
                                },
                                "stuart": {
                                  "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "title": "Original",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-original.yaml"
                              }
                            },
                            {
                              "properties": {
                                "ringo": {
                                  "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "title": "Later",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-later.yaml"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "allOfWithinOneOf": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "properties": {
                                "pete": {
                                  "description": "Pete Best. (Derives from `bt-original.yaml`)",
                                  "type": "boolean"
                                },
                                "stuart": {
                                  "description": "Stuart Sutcliffe. (Derives from `bt-original.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "title": "Original",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-original.yaml"
                              }
                            },
                            {
                              "properties": {
                                "george": {
                                  "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                },
                                "paul": {
                                  "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-shared.yaml"
                              }
                            }
                          ],
                          "title": "Original",
                          "x-akamai": {
                            "file-path": "schemas/bt-original-wrapper.yaml"
                          }
                        },
                        {
                          "allOf": [
                            {
                              "properties": {
                                "ringo": {
                                  "description": "Ringo Starr. (Derives from `bt-later.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "title": "Later",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-later.yaml"
                              }
                            },
                            {
                              "properties": {
                                "george": {
                                  "description": "George Harrison. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "John Lennon. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                },
                                "paul": {
                                  "description": "Paul McCartney. (Derives from `bt-shared.yaml`)",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/bt-shared.yaml"
                              }
                            }
                          ],
                          "title": "Later",
                          "x-akamai": {
                            "file-path": "schemas/bt-later-wrapper.yaml"
                          }
                        }
                      ]
                    },
                    "schema-poly-allof-amorphic": {
                      "additionalProperties": false,
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-alive.yaml`.",
                          "properties": {
                            "paul": {
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-alive.yaml"
                          }
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-dead.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-dead.yaml"
                          }
                        }
                      ],
                      "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
                      "properties": {
                        "brian": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "charlie": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "keith": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "mick": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "schema-poly-allof-amorphic-inline": {
                      "additionalProperties": false,
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description is inline, top of first `allOf`.",
                          "properties": {
                            "john": {
                              "description": "Description is inline, in first `allOf`.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description is inline, in second `allOf`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description is inline, top of second `allOf`.",
                          "properties": {
                            "george": {
                              "description": "Description is inline, in first `allOf`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description is inline, in second `allOf`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "description": "This mixes an object schema with an `allOf`. It might be expected to publish four Beatles and four Stones, but this is conceptually weird and possibly invalid schema syntax that we ought to avoid.",
                      "properties": {
                        "brian": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "charlie": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "keith": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        },
                        "mick": {
                          "description": "This schema is part of an object defined outside an `allOf`.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "schema-poly-allof-array": {
                      "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
                      "items": {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "schema-poly-allof-array-inline": {
                      "description": "This array's `items` references an `allOf`. It should publish four Beatles and four Stones.",
                      "items": {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "john": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "george": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "keith": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "brian": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "schema-poly-allof-nested": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "properties": {
                                "paul": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "properties": {
                                "george": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-dead.yaml"
                              }
                            }
                          ],
                          "description": "Description comes from `beatles-allOf.yaml`.",
                          "x-akamai": {
                            "file-path": "schemas/beatles-allOf.yaml"
                          }
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-alive.yaml`.",
                              "properties": {
                                "keith": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-dead.yaml`.",
                              "properties": {
                                "brian": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-dead.yaml"
                              }
                            }
                          ],
                          "description": "Description comes from `stones-allOf.yaml`.",
                          "x-akamai": {
                            "file-path": "schemas/stones-allOf.yaml"
                          }
                        }
                      ],
                      "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                    },
                    "schema-poly-allof-nested-inline": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description is inline, sibling with `allOf`.",
                              "properties": {
                                "john": {
                                  "description": "Description is inline, first `allOf`.",
                                  "type": "boolean"
                                },
                                "paul": {
                                  "description": "Description is inline, second `allOf`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description is inline, sibling with `allOf`.",
                              "properties": {
                                "george": {
                                  "description": "Description is inline, second `allOf`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description is inline, first `allOf`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "allOf": [
                                {
                                  "additionalProperties": false,
                                  "description": "Description is inline, sibling with `allOf`.",
                                  "properties": {
                                    "keith": {
                                      "description": "Description is inline, second `allOf`.",
                                      "type": "boolean"
                                    },
                                    "mick": {
                                      "description": "Description is inline, first `allOf`.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "additionalProperties": false,
                                  "description": "Description is inline, sibling with `allOf`.",
                                  "properties": {
                                    "brian": {
                                      "description": "Description is inline, first `allOf`.",
                                      "type": "boolean"
                                    },
                                    "charlie": {
                                      "description": "Description is inline, second `allOf`.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "description": "Description is inline, sibling with `allOf`."
                            }
                          ],
                          "description": "Beatles, inline."
                        }
                      ],
                      "description": "This features `allOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                    },
                    "schema-poly-single": {
                      "allOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-all.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-all.yaml"
                          }
                        }
                      ],
                      "description": "This schema specifies a single `allOf` item."
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/poly-allof.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test allOf polymorphism",
        "tags": [
          "Poly"
        ]
      }
    },
    "/data/polymorphic/all-of/dynamic-sample": {
      "put": {
        "description": "Sample data should publish 8 fields.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-allof-dynamic-sample"
        },
        "operationId": "put-allof-dynamic-sample",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "george": {
                        "example": "Harrison",
                        "type": "string"
                      },
                      "john": {
                        "example": "Lennon",
                        "type": "string"
                      },
                      "paul": {
                        "example": "McCartney",
                        "type": "string"
                      },
                      "ringo": {
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/dynamic-beatles.yaml"
                    }
                  },
                  {
                    "properties": {
                      "brian": {
                        "example": false,
                        "type": "boolean"
                      },
                      "charlie": {
                        "example": 5,
                        "type": "integer"
                      },
                      "keith": {
                        "example": 7,
                        "type": "integer"
                      },
                      "mick": {
                        "example": 6,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/dynamic-stones.yaml"
                    }
                  }
                ],
                "x-akamai": {
                  "file-path": "schemas/allof-dynamic-sample.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "george": {
                          "example": "Harrison",
                          "type": "string"
                        },
                        "john": {
                          "example": "Lennon",
                          "type": "string"
                        },
                        "paul": {
                          "example": "McCartney",
                          "type": "string"
                        },
                        "ringo": {
                          "example": true,
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "x-akamai": {
                        "file-path": "schemas/dynamic-beatles.yaml"
                      }
                    },
                    {
                      "properties": {
                        "brian": {
                          "example": false,
                          "type": "boolean"
                        },
                        "charlie": {
                          "example": 5,
                          "type": "integer"
                        },
                        "keith": {
                          "example": 7,
                          "type": "integer"
                        },
                        "mick": {
                          "example": 6,
                          "type": "integer"
                        }
                      },
                      "type": "object",
                      "x-akamai": {
                        "file-path": "schemas/dynamic-stones.yaml"
                      }
                    }
                  ],
                  "x-akamai": {
                    "file-path": "schemas/allof-dynamic-sample.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test dynamic generation of sample JSON from blended allOf schema",
        "tags": [
          "Poly"
        ]
      }
    },
    "/data/polymorphic/any-of": {
      "put": {
        "description": "This tests `anyOf` schemas.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-anyof"
        },
        "operationId": "put-anyof",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "harpo": true
              },
              "schema": {
                "description": "All work and no play makes Jack a dull boy.",
                "properties": {
                  "anyOfExclude": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "description": "An `anyOf` item. This should publish.",
                        "properties": {
                          "groucho": {
                            "description": "This schema is defined within an `anyOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Groucho",
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "An `anyOf` item. This should publish.",
                        "properties": {
                          "chico": {
                            "description": "This schema is defined within an `anyOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Chico",
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "An `anyOf` item. This should publish.",
                        "properties": {
                          "harpo": {
                            "description": "This schema is defined within an `anyOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Harpo",
                        "type": "object"
                      },
                      {}
                    ],
                    "description": "Test whether an `anyOf` item can be excluded. The `gummo` key should not publish. (Not quite)"
                  },
                  "isAnyOf": {
                    "anyOf": [
                      {
                        "description": "Alternative schema, unconditional.",
                        "properties": {
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "groucho"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "__Beta__ Alternative schema, conditional.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "chico"
                        ],
                        "type": "object",
                        "x-akamai": {
                          "status": "BETA"
                        }
                      },
                      {
                        "description": "__Bot manager__ Alternative schema, conditional.",
                        "properties": {
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "harpo"
                        ],
                        "type": "object",
                        "x-akamai": {
                          "labels": [
                            "Bot manager"
                          ]
                        }
                      }
                    ]
                  },
                  "schema-poly-alt-nests-allof": {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          }
                        ],
                        "description": "The Beatles schema.",
                        "title": "Beatles"
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ],
                        "description": "The Stones schema.",
                        "title": "Stones"
                      }
                    ],
                    "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                  },
                  "schema-poly-alt-nests-allof-inline": {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "john": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "george": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "description": "The Beatles schema.",
                        "title": "Beatles"
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "keith": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "brian": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "description": "The Stones schema.",
                        "title": "Stones"
                      }
                    ],
                    "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                  },
                  "schema-poly-single": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description comes from `beatles-all.yaml`.",
                        "properties": {
                          "george": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "john": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "paul": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "ringo": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/beatles-all.yaml"
                        }
                      }
                    ],
                    "description": "This schema specifies a single `anyOf` item."
                  }
                },
                "required": [
                  "isAnyOf"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/poly-anyof.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "harpo": true
                },
                "schema": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "properties": {
                    "anyOfExclude": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "description": "An `anyOf` item. This should publish.",
                          "properties": {
                            "groucho": {
                              "description": "This schema is defined within an `anyOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Groucho",
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "An `anyOf` item. This should publish.",
                          "properties": {
                            "chico": {
                              "description": "This schema is defined within an `anyOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Chico",
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "An `anyOf` item. This should publish.",
                          "properties": {
                            "harpo": {
                              "description": "This schema is defined within an `anyOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Harpo",
                          "type": "object"
                        },
                        {}
                      ],
                      "description": "Test whether an `anyOf` item can be excluded. The `gummo` key should not publish. (Not quite)"
                    },
                    "isAnyOf": {
                      "anyOf": [
                        {
                          "description": "Alternative schema, unconditional.",
                          "properties": {
                            "groucho": {
                              "description": "Groucho description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "groucho"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "__Beta__ Alternative schema, conditional.",
                          "properties": {
                            "chico": {
                              "description": "Chico description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "chico"
                          ],
                          "type": "object",
                          "x-akamai": {
                            "status": "BETA"
                          }
                        },
                        {
                          "description": "__Bot manager__ Alternative schema, conditional.",
                          "properties": {
                            "harpo": {
                              "description": "Harpo description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "harpo"
                          ],
                          "type": "object",
                          "x-akamai": {
                            "labels": [
                              "Bot manager"
                            ]
                          }
                        }
                      ]
                    },
                    "schema-poly-alt-nests-allof": {
                      "anyOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "properties": {
                                "paul": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "properties": {
                                "george": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-dead.yaml"
                              }
                            }
                          ],
                          "description": "The Beatles schema.",
                          "title": "Beatles"
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-alive.yaml`.",
                              "properties": {
                                "keith": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-dead.yaml`.",
                              "properties": {
                                "brian": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-dead.yaml"
                              }
                            }
                          ],
                          "description": "The Stones schema.",
                          "title": "Stones"
                        }
                      ],
                      "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                    },
                    "schema-poly-alt-nests-allof-inline": {
                      "anyOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "john": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "paul": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "george": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "The Beatles schema.",
                          "title": "Beatles"
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "keith": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "brian": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "The Stones schema.",
                          "title": "Stones"
                        }
                      ],
                      "description": "This features alternate `anyOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones."
                    },
                    "schema-poly-single": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-all.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-all.yaml"
                          }
                        }
                      ],
                      "description": "This schema specifies a single `anyOf` item."
                    }
                  },
                  "required": [
                    "isAnyOf"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/poly-anyof.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test anyOf polymorphism",
        "tags": [
          "Poly"
        ]
      }
    },
    "/data/polymorphic/one-of": {
      "put": {
        "description": "This tests `oneOf` schemas.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-oneof"
        },
        "operationId": "put-oneof",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": true
              },
              "schema": {
                "description": "All work and no play makes Jack a dull boy.",
                "properties": {
                  "isOneOf": {
                    "oneOf": [
                      {
                        "properties": {
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "groucho"
                        ],
                        "title": "Groucho",
                        "type": "object"
                      },
                      {
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "chico"
                        ],
                        "title": "Chico",
                        "type": "object"
                      },
                      {
                        "properties": {
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "harpo"
                        ],
                        "title": "Harpo",
                        "type": "object"
                      }
                    ]
                  },
                  "nestedOneOf": {
                    "description": "This features alternate `oneOf` schemas that nest further nested `oneOf` schemas. It should publish four Beatles and four Stones.",
                    "oneOf": [
                      {
                        "description": "Description comes from `beatles-oneOf.yaml`.",
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Alive",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Dead",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          }
                        ],
                        "title": "Beatles",
                        "x-akamai": {
                          "file-path": "schemas/beatles-oneOf.yaml"
                        }
                      },
                      {
                        "description": "Description comes from `stones-oneOf.yaml`.",
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Alive",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Dead",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ],
                        "title": "Stones",
                        "x-akamai": {
                          "file-path": "schemas/stones-oneOf.yaml"
                        }
                      }
                    ]
                  },
                  "oneOfExclude": {
                    "description": "Test whether a `oneOf` item can be excluded. The `gummo` key should not publish. (Not quite)",
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "description": "A `oneOf` item. This should publish.",
                        "properties": {
                          "groucho": {
                            "description": "This schema is defined within a `oneOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Groucho",
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "A `oneOf` item. This should publish.",
                        "properties": {
                          "chico": {
                            "description": "This schema is defined within a `oneOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Chico",
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "A `oneOf` item. This should publish.",
                        "properties": {
                          "harpo": {
                            "description": "This schema is defined within a `oneOf`.",
                            "type": "boolean"
                          }
                        },
                        "title": "Harpo",
                        "type": "object"
                      },
                      {}
                    ]
                  },
                  "oneOfInArray": {
                    "description": "Array of items, each a `oneOf`.",
                    "items": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-all.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Beatles",
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-all.yaml"
                          }
                        },
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `stones-all.yaml`.",
                          "properties": {
                            "brian": {
                              "description": "Description comes from `stones-all.yaml`.",
                              "type": "boolean"
                            },
                            "charlie": {
                              "description": "Description comes from `stones-all.yaml`.",
                              "type": "boolean"
                            },
                            "keith": {
                              "description": "Description comes from `stones-all.yaml`.",
                              "type": "boolean"
                            },
                            "mick": {
                              "description": "Description comes from `stones-all.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Stones",
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/stones-all.yaml"
                          }
                        }
                      ]
                    },
                    "type": "array"
                  },
                  "schema-poly-alt-nests-allof": {
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-alive.yaml`.",
                            "properties": {
                              "paul": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-dead.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-dead.yaml"
                            }
                          }
                        ],
                        "description": "The Beatles schema.",
                        "title": "Beatles!"
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-alive.yaml`.",
                            "properties": {
                              "keith": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-alive.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-alive.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-dead.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-dead.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-dead.yaml"
                            }
                          }
                        ],
                        "description": "The Stones schema.",
                        "title": "Stones"
                      }
                    ]
                  },
                  "schema-poly-alt-nests-allof-inline": {
                    "description": "This features alternate `oneOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones.",
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "john": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "george": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "description": "The Beatles schema.",
                        "title": "Beatles"
                      },
                      {
                        "allOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "keith": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description is inline.",
                            "properties": {
                              "brian": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description is inline.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "description": "The Stones schema.",
                        "title": "Stones"
                      }
                    ]
                  },
                  "schema-poly-single": {
                    "description": "This schema specifies a single `oneOf` item.",
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "description": "Description comes from `beatles-all.yaml`.",
                        "properties": {
                          "george": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "john": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "paul": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          },
                          "ringo": {
                            "description": "Description comes from `beatles-all.yaml`.",
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/beatles-all.yaml"
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "isOneOf"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/poly-oneof.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": true
                },
                "schema": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "properties": {
                    "isOneOf": {
                      "oneOf": [
                        {
                          "properties": {
                            "groucho": {
                              "description": "Groucho description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "groucho"
                          ],
                          "title": "Groucho",
                          "type": "object"
                        },
                        {
                          "properties": {
                            "chico": {
                              "description": "Chico description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "chico"
                          ],
                          "title": "Chico",
                          "type": "object"
                        },
                        {
                          "properties": {
                            "harpo": {
                              "description": "Harpo description.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "harpo"
                          ],
                          "title": "Harpo",
                          "type": "object"
                        }
                      ]
                    },
                    "nestedOneOf": {
                      "description": "This features alternate `oneOf` schemas that nest further nested `oneOf` schemas. It should publish four Beatles and four Stones.",
                      "oneOf": [
                        {
                          "description": "Description comes from `beatles-oneOf.yaml`.",
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "properties": {
                                "paul": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "title": "Alive",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "properties": {
                                "george": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "title": "Dead",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-dead.yaml"
                              }
                            }
                          ],
                          "title": "Beatles",
                          "x-akamai": {
                            "file-path": "schemas/beatles-oneOf.yaml"
                          }
                        },
                        {
                          "description": "Description comes from `stones-oneOf.yaml`.",
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-alive.yaml`.",
                              "properties": {
                                "keith": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "title": "Alive",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-dead.yaml`.",
                              "properties": {
                                "brian": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "title": "Dead",
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-dead.yaml"
                              }
                            }
                          ],
                          "title": "Stones",
                          "x-akamai": {
                            "file-path": "schemas/stones-oneOf.yaml"
                          }
                        }
                      ]
                    },
                    "oneOfExclude": {
                      "description": "Test whether a `oneOf` item can be excluded. The `gummo` key should not publish. (Not quite)",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "description": "A `oneOf` item. This should publish.",
                          "properties": {
                            "groucho": {
                              "description": "This schema is defined within a `oneOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Groucho",
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "A `oneOf` item. This should publish.",
                          "properties": {
                            "chico": {
                              "description": "This schema is defined within a `oneOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Chico",
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "A `oneOf` item. This should publish.",
                          "properties": {
                            "harpo": {
                              "description": "This schema is defined within a `oneOf`.",
                              "type": "boolean"
                            }
                          },
                          "title": "Harpo",
                          "type": "object"
                        },
                        {}
                      ]
                    },
                    "oneOfInArray": {
                      "description": "Array of items, each a `oneOf`.",
                      "items": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `beatles-all.yaml`.",
                            "properties": {
                              "george": {
                                "description": "Description comes from `beatles-all.yaml`.",
                                "type": "boolean"
                              },
                              "john": {
                                "description": "Description comes from `beatles-all.yaml`.",
                                "type": "boolean"
                              },
                              "paul": {
                                "description": "Description comes from `beatles-all.yaml`.",
                                "type": "boolean"
                              },
                              "ringo": {
                                "description": "Description comes from `beatles-all.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Beatles",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/beatles-all.yaml"
                            }
                          },
                          {
                            "additionalProperties": false,
                            "description": "Description comes from `stones-all.yaml`.",
                            "properties": {
                              "brian": {
                                "description": "Description comes from `stones-all.yaml`.",
                                "type": "boolean"
                              },
                              "charlie": {
                                "description": "Description comes from `stones-all.yaml`.",
                                "type": "boolean"
                              },
                              "keith": {
                                "description": "Description comes from `stones-all.yaml`.",
                                "type": "boolean"
                              },
                              "mick": {
                                "description": "Description comes from `stones-all.yaml`.",
                                "type": "boolean"
                              }
                            },
                            "title": "Stones",
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/stones-all.yaml"
                            }
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "schema-poly-alt-nests-allof": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-alive.yaml`.",
                              "properties": {
                                "paul": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description comes from `beatles-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `beatles-dead.yaml`.",
                              "properties": {
                                "george": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "john": {
                                  "description": "Description comes from `beatles-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/beatles-dead.yaml"
                              }
                            }
                          ],
                          "description": "The Beatles schema.",
                          "title": "Beatles!"
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-alive.yaml`.",
                              "properties": {
                                "keith": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description comes from `stones-alive.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-alive.yaml"
                              }
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description comes from `stones-dead.yaml`.",
                              "properties": {
                                "brian": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description comes from `stones-dead.yaml`.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/stones-dead.yaml"
                              }
                            }
                          ],
                          "description": "The Stones schema.",
                          "title": "Stones"
                        }
                      ]
                    },
                    "schema-poly-alt-nests-allof-inline": {
                      "description": "This features alternate `oneOf` schemas that nest further nested `allOf` schemas. It should publish four Beatles and four Stones.",
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "john": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "paul": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "george": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "ringo": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "The Beatles schema.",
                          "title": "Beatles"
                        },
                        {
                          "allOf": [
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "keith": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "mick": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "description": "Description is inline.",
                              "properties": {
                                "brian": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                },
                                "charlie": {
                                  "description": "Description is inline.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "description": "The Stones schema.",
                          "title": "Stones"
                        }
                      ]
                    },
                    "schema-poly-single": {
                      "description": "This schema specifies a single `oneOf` item.",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "description": "Description comes from `beatles-all.yaml`.",
                          "properties": {
                            "george": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "john": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "paul": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            },
                            "ringo": {
                              "description": "Description comes from `beatles-all.yaml`.",
                              "type": "boolean"
                            }
                          },
                          "type": "object",
                          "x-akamai": {
                            "file-path": "schemas/beatles-all.yaml"
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "isOneOf"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/poly-oneof.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test oneOf polymorphism",
        "tags": [
          "Poly"
        ]
      }
    },
    "/data/request-only": {
      "put": {
        "description": "This tests a request-only schema.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-request-only"
        },
        "operationId": "put-request-only",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "filename": "request.json"
              },
              "schema": {
                "description": "Request-only members, used to test interactivity scenarios.",
                "properties": {
                  "schema-omits-ro": {
                    "description": "Various member names that suggest they're read-only aren't spec'ed that way.",
                    "properties": {
                      "createdTime": {
                        "description": "When the widget was created.",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "widgetId": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "widgetStatus": {
                        "description": "Either `PENDING`, `ACTIVATING`, or `ACTIVE`.",
                        "enum": [
                          "PENDING",
                          "ACTIVATING",
                          "ACTIVE"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "schema-omits-ro"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/request.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "Test request members",
        "tags": [
          "Request"
        ]
      }
    },
    "/data/response-only": {
      "get": {
        "description": "This tests a response-only schema.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-response-only"
        },
        "operationId": "get-response-only",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "filename": "response.json"
                },
                "schema": {
                  "description": "Response-only members, used to test interactivity scenarios.",
                  "properties": {
                    "schema-ro-noop": {
                      "description": "Various members are defined as read-only unnecessarily in a schema only used to describe responses.",
                      "properties": {
                        "createdTime": {
                          "description": "__Read-only__ When the widget was created.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modifiedDate": {
                          "description": "__Read-only__ All work and no play makes Jack a dull boy.",
                          "readOnly": true,
                          "type": "string"
                        },
                        "policyStatus": {
                          "description": "__Read-only__ Either `PENDING`, `ACTIVATING`, or `ACTIVE`.",
                          "enum": [
                            "PENDING",
                            "ACTIVATING",
                            "ACTIVE"
                          ],
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/response.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test response members",
        "tags": [
          "Response"
        ]
      }
    },
    "/data/schema": {
      "put": {
        "description": "This tests basic schemas.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-schema"
        },
        "operationId": "put-schema",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                " sample-trim-key": true,
                "sample trim key": true,
                "sample-trim-key ": true,
                "sample-trim-value": "Leading or trailing space. ",
                "schema-desc-links-self": "All work and no play makes Jack a dull boy.",
                "schema-desc-malformed-para": "All work and no play makes Jack a dull boy.",
                "schema-desc-missing": "All work and no play makes Jack a dull boy.",
                "schema-desc-varies": "All work and no play makes Jack a dull boy.",
                "schema-get-put-mismatch": "All work and no play makes Jack a dull boy.",
                "schema-invalid-against-sample": {
                  "bar": true,
                  "foo": true
                },
                "schema-name-case-insensitive": {
                  "BADSAMPLENAME": "ALL WORK AND NO PLAY MAKES JACK A DULL BOY.",
                  "BadSampleName": "All work and no play makes Jack a dull boy.",
                  "badSampleName": "All work and no play makes Jack a dull boy.",
                  "badsamplename": "all work and no play makes jack a dull boy."
                },
                "schema-name-malformed": "All work and no play makes Jack a dull boy.",
                "schema-name-misspelled": {
                  "certficateName": "All work and no play makes Jack a dull boy.",
                  "operationid": "All work and no play makes Jack a dull boy."
                },
                "schema-omits-ro": "All work and no play makes Jack a dull boy.",
                "schema-orphaned": "All work and no play makes Jack a dull boy.",
                "schema-poly-anonymous": "All work and no play makes Jack a dull boy.",
                "schema-poly-avoid": "All work and no play makes Jack a dull boy.",
                "schema-poly-overload": "All work and no play makes Jack a dull boy.",
                "schema-redundant": "All work and no play makes Jack a dull boy.",
                "schema-redundant-membership": "All work and no play makes Jack a dull boy.",
                "schema-type-missing": "All work and no play makes Jack a dull boy."
              },
              "schema": {
                "additionalProperties": true,
                "description": "Basic schema tests.",
                "properties": {
                  "badly formatted key": {
                    "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                    "type": "boolean"
                  },
                  "enumValue": {
                    "description": "Unclear what this tests: `Value1`.",
                    "enum": [
                      "Value1"
                    ],
                    "type": "string"
                  },
                  "false": {
                    "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                    "type": "string"
                  },
                  "lang-desc-link-invalid": {
                    "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                    "type": "string"
                  },
                  "lang-desc-numbered-slug": {
                    "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                    "type": "string"
                  },
                  "openapi-html-comment": {
                    "description": "<!-- Commented out content -->",
                    "type": "boolean"
                  },
                  "openapi-schema-ref-allof": {
                    "allOf": [
                      {
                        "description": "This use of `allOf` for contextual doc throws a warning."
                      },
                      {
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      }
                    ]
                  },
                  "openapi-schema-ref-conflict": {
                    "additionalProperties": false,
                    "default": false,
                    "description": "This schema is $ref linked.",
                    "type": "boolean",
                    "x-akamai": {
                      "file-path": "schemas/linked-schema.yaml"
                    }
                  },
                  "openapi-schema-ref-conflict-allof": {
                    "allOf": [
                      {
                        "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                      },
                      {
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "nullable": true,
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      {
                        "description": "Alternative desc"
                      }
                    ]
                  },
                  "openapi-schema-ref-overload": {
                    "description": "Test different ways to arrange descriptions along with $ref links.",
                    "properties": {
                      "refOrderedCorrectly": {
                        "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "refOrderedIncorrectly": {
                        "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "random-yaml": {
                    "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                    "enum": [
                      "GROUCHO",
                      "HARPO",
                      "CHICO"
                    ],
                    "type": "string"
                  },
                  "ref-overload": {
                    "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "readOnly": true,
                    "type": "string"
                  },
                  "schema-desc-links-self": {
                    "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                    "type": "string"
                  },
                  "schema-desc-malformed-para": {
                    "description": "TBD description has punctuation and is a full sentence.",
                    "type": "string"
                  },
                  "schema-desc-missing": {
                    "type": "string"
                  },
                  "schema-example-redundant": {
                    "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                    "example": "This is messed up!",
                    "type": "string"
                  },
                  "schema-get-put-mismatch": {
                    "description": "TBD GET rsp & PUT req should link same schema.",
                    "type": "string"
                  },
                  "schema-invalid-against-sample": {
                    "additionalProperties": false,
                    "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                    "properties": {
                      "bar": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "boolean"
                      },
                      "foo": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "foo",
                      "bar"
                    ],
                    "type": "object"
                  },
                  "schema-name-case-sensitive": {
                    "description": "Complain about all these schema names varying in case.",
                    "properties": {
                      "BADSCHEMANAME": {
                        "type": "boolean"
                      },
                      "BadSchemaName": {
                        "type": "boolean"
                      },
                      "badSchemaName": {
                        "type": "boolean"
                      },
                      "badschemaname": {
                        "type": "boolean"
                      },
                      "sourceIP": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "schema-name-malformed": {
                    "description": "Complain about this schema name not being camelCase.",
                    "type": "string"
                  },
                  "schema-name-misspelled": {
                    "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                    "properties": {
                      "certficateName": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "operationid": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "schema-name-parroted": {
                    "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                    "type": "string"
                  },
                  "schema-operation-links-self": {
                    "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                    "type": "string"
                  },
                  "schema-orphaned": {
                    "description": "TBD schema file is an unreferenced orphan.",
                    "type": "string"
                  },
                  "schema-poly-anonymous": {
                    "description": "TBD oneOf/anyOf: each scenario needs a label.",
                    "type": "string"
                  },
                  "schema-redundant": {
                    "description": "TBD redundant schema, normalized for description.",
                    "type": "string"
                  },
                  "schema-redundant-membership": {
                    "description": "TBD schema is redundant, same set of members.",
                    "type": "string"
                  },
                  "schema-type-missing": {
                    "description": "This schema lacks a `type`."
                  },
                  "svc-tally-named-obj-keys": {
                    "description": "Test variance among same-named object schemas' set of defined members.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "beatles": {
                            "description": "Defines all members.",
                            "properties": {
                              "george": {
                                "type": "string"
                              },
                              "john": {
                                "type": "string"
                              },
                              "paul": {
                                "type": "string"
                              },
                              "ringo": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "beatles": {
                            "description": "Defines members still alive.",
                            "properties": {
                              "paul": {
                                "type": "string"
                              },
                              "ringo": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-obj-keys": {
                    "description": "Complain that this set of keys is defined in more than one schema file.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-desc": {
                    "description": "Test variance among schema descriptions.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "varyingDescription": {
                            "description": "All work and no play makes Jeremy a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchThree": {
                        "properties": {
                          "varyingDescription": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingDescription": {
                            "description": "All twerk and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-enum-values": {
                    "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                    "properties": {
                      "batchFour": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchOne": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "GROUCHO",
                              "HARPO",
                              "CHICO",
                              "ZEPPO",
                              "GUMMO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchThree": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "GROUCHO",
                              "CHICO",
                              "HARPO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "CHICO",
                              "GROUCHO",
                              "GUMMO",
                              "HARPO",
                              "ZEPPO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-type": {
                    "description": "Test variance among schema types.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "varyingType": {
                            "description": "This schema's type varies from another with the same name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingType": {
                            "description": "This schema's type varies from another with the same name.",
                            "items": {
                              "description": "This test needs to ignore the contents of `items`.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/schema.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  " sample-trim-key": true,
                  "sample trim key": true,
                  "sample-trim-key ": true,
                  "sample-trim-value": "Leading or trailing space. ",
                  "schema-desc-links-self": "All work and no play makes Jack a dull boy.",
                  "schema-desc-malformed-para": "All work and no play makes Jack a dull boy.",
                  "schema-desc-missing": "All work and no play makes Jack a dull boy.",
                  "schema-desc-varies": "All work and no play makes Jack a dull boy.",
                  "schema-get-put-mismatch": "All work and no play makes Jack a dull boy.",
                  "schema-invalid-against-sample": {
                    "bar": true,
                    "foo": true
                  },
                  "schema-name-case-insensitive": {
                    "BADSAMPLENAME": "ALL WORK AND NO PLAY MAKES JACK A DULL BOY.",
                    "BadSampleName": "All work and no play makes Jack a dull boy.",
                    "badSampleName": "All work and no play makes Jack a dull boy.",
                    "badsamplename": "all work and no play makes jack a dull boy."
                  },
                  "schema-name-malformed": "All work and no play makes Jack a dull boy.",
                  "schema-name-misspelled": {
                    "certficateName": "All work and no play makes Jack a dull boy.",
                    "operationid": "All work and no play makes Jack a dull boy."
                  },
                  "schema-omits-ro": "All work and no play makes Jack a dull boy.",
                  "schema-orphaned": "All work and no play makes Jack a dull boy.",
                  "schema-poly-anonymous": "All work and no play makes Jack a dull boy.",
                  "schema-poly-avoid": "All work and no play makes Jack a dull boy.",
                  "schema-poly-overload": "All work and no play makes Jack a dull boy.",
                  "schema-redundant": "All work and no play makes Jack a dull boy.",
                  "schema-redundant-membership": "All work and no play makes Jack a dull boy.",
                  "schema-type-missing": "All work and no play makes Jack a dull boy."
                },
                "schema": {
                  "additionalProperties": true,
                  "description": "Basic schema tests.",
                  "properties": {
                    "badly formatted key": {
                      "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                      "type": "boolean"
                    },
                    "enumValue": {
                      "description": "Unclear what this tests: `Value1`.",
                      "enum": [
                        "Value1"
                      ],
                      "type": "string"
                    },
                    "false": {
                      "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                      "type": "string"
                    },
                    "lang-desc-link-invalid": {
                      "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                      "type": "string"
                    },
                    "lang-desc-numbered-slug": {
                      "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                      "type": "string"
                    },
                    "openapi-html-comment": {
                      "description": "<!-- Commented out content -->",
                      "type": "boolean"
                    },
                    "openapi-schema-ref-allof": {
                      "allOf": [
                        {
                          "description": "This use of `allOf` for contextual doc throws a warning."
                        },
                        {
                          "description": "This schema is $ref linked.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        }
                      ]
                    },
                    "openapi-schema-ref-conflict": {
                      "additionalProperties": false,
                      "default": false,
                      "description": "This schema is $ref linked.",
                      "type": "boolean",
                      "x-akamai": {
                        "file-path": "schemas/linked-schema.yaml"
                      }
                    },
                    "openapi-schema-ref-conflict-allof": {
                      "allOf": [
                        {
                          "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                        },
                        {
                          "default": false,
                          "description": "This schema is $ref linked.",
                          "nullable": true,
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        },
                        {
                          "description": "Alternative desc"
                        }
                      ]
                    },
                    "openapi-schema-ref-overload": {
                      "description": "Test different ways to arrange descriptions along with $ref links.",
                      "properties": {
                        "refOrderedCorrectly": {
                          "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        },
                        "refOrderedIncorrectly": {
                          "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "random-yaml": {
                      "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                      "enum": [
                        "GROUCHO",
                        "HARPO",
                        "CHICO"
                      ],
                      "type": "string"
                    },
                    "ref-overload": {
                      "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "readOnly": true,
                      "type": "string"
                    },
                    "schema-desc-links-self": {
                      "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                      "type": "string"
                    },
                    "schema-desc-malformed-para": {
                      "description": "TBD description has punctuation and is a full sentence.",
                      "type": "string"
                    },
                    "schema-desc-missing": {
                      "type": "string"
                    },
                    "schema-example-redundant": {
                      "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                      "example": "This is messed up!",
                      "type": "string"
                    },
                    "schema-get-put-mismatch": {
                      "description": "TBD GET rsp & PUT req should link same schema.",
                      "type": "string"
                    },
                    "schema-invalid-against-sample": {
                      "additionalProperties": false,
                      "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                      "properties": {
                        "bar": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "boolean"
                        },
                        "foo": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "foo",
                        "bar"
                      ],
                      "type": "object"
                    },
                    "schema-name-case-sensitive": {
                      "description": "Complain about all these schema names varying in case.",
                      "properties": {
                        "BADSCHEMANAME": {
                          "type": "boolean"
                        },
                        "BadSchemaName": {
                          "type": "boolean"
                        },
                        "badSchemaName": {
                          "type": "boolean"
                        },
                        "badschemaname": {
                          "type": "boolean"
                        },
                        "sourceIP": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "schema-name-malformed": {
                      "description": "Complain about this schema name not being camelCase.",
                      "type": "string"
                    },
                    "schema-name-misspelled": {
                      "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                      "properties": {
                        "certficateName": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "string"
                        },
                        "operationid": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "schema-name-parroted": {
                      "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                      "type": "string"
                    },
                    "schema-operation-links-self": {
                      "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                      "type": "string"
                    },
                    "schema-orphaned": {
                      "description": "TBD schema file is an unreferenced orphan.",
                      "type": "string"
                    },
                    "schema-poly-anonymous": {
                      "description": "TBD oneOf/anyOf: each scenario needs a label.",
                      "type": "string"
                    },
                    "schema-redundant": {
                      "description": "TBD redundant schema, normalized for description.",
                      "type": "string"
                    },
                    "schema-redundant-membership": {
                      "description": "TBD schema is redundant, same set of members.",
                      "type": "string"
                    },
                    "schema-type-missing": {
                      "description": "This schema lacks a `type`."
                    },
                    "svc-tally-named-obj-keys": {
                      "description": "Test variance among same-named object schemas' set of defined members.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "beatles": {
                              "description": "Defines all members.",
                              "properties": {
                                "george": {
                                  "type": "string"
                                },
                                "john": {
                                  "type": "string"
                                },
                                "paul": {
                                  "type": "string"
                                },
                                "ringo": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "beatles": {
                              "description": "Defines members still alive.",
                              "properties": {
                                "paul": {
                                  "type": "string"
                                },
                                "ringo": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-obj-keys": {
                      "description": "Complain that this set of keys is defined in more than one schema file.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-desc": {
                      "description": "Test variance among schema descriptions.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "varyingDescription": {
                              "description": "All work and no play makes Jeremy a dull boy.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchThree": {
                          "properties": {
                            "varyingDescription": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingDescription": {
                              "description": "All twerk and no play makes Jack a dull boy.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-enum-values": {
                      "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                      "properties": {
                        "batchFour": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchOne": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "GROUCHO",
                                "HARPO",
                                "CHICO",
                                "ZEPPO",
                                "GUMMO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchThree": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "GROUCHO",
                                "CHICO",
                                "HARPO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "CHICO",
                                "GROUCHO",
                                "GUMMO",
                                "HARPO",
                                "ZEPPO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-type": {
                      "description": "Test variance among schema types.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "varyingType": {
                              "description": "This schema's type varies from another with the same name.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingType": {
                              "description": "This schema's type varies from another with the same name.",
                              "items": {
                                "description": "This test needs to ignore the contents of `items`.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/schema.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Basic schema tests",
        "tags": [
          "Schemas"
        ]
      }
    },
    "/data/schema-empty": {
      "put": {
        "description": "Both request and response link an empty schema.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-schema-empty"
        },
        "operationId": "put-schema-empty",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                " sample-trim-key": true,
                "sample trim key": true,
                "sample-trim-key ": true,
                "sample-trim-value": "Leading or trailing space. ",
                "schema-desc-links-self": "All work and no play makes Jack a dull boy.",
                "schema-desc-malformed-para": "All work and no play makes Jack a dull boy.",
                "schema-desc-missing": "All work and no play makes Jack a dull boy.",
                "schema-desc-varies": "All work and no play makes Jack a dull boy.",
                "schema-get-put-mismatch": "All work and no play makes Jack a dull boy.",
                "schema-invalid-against-sample": {
                  "bar": true,
                  "foo": true
                },
                "schema-name-case-insensitive": {
                  "BADSAMPLENAME": "ALL WORK AND NO PLAY MAKES JACK A DULL BOY.",
                  "BadSampleName": "All work and no play makes Jack a dull boy.",
                  "badSampleName": "All work and no play makes Jack a dull boy.",
                  "badsamplename": "all work and no play makes jack a dull boy."
                },
                "schema-name-malformed": "All work and no play makes Jack a dull boy.",
                "schema-name-misspelled": {
                  "certficateName": "All work and no play makes Jack a dull boy.",
                  "operationid": "All work and no play makes Jack a dull boy."
                },
                "schema-omits-ro": "All work and no play makes Jack a dull boy.",
                "schema-orphaned": "All work and no play makes Jack a dull boy.",
                "schema-poly-anonymous": "All work and no play makes Jack a dull boy.",
                "schema-poly-avoid": "All work and no play makes Jack a dull boy.",
                "schema-poly-overload": "All work and no play makes Jack a dull boy.",
                "schema-redundant": "All work and no play makes Jack a dull boy.",
                "schema-redundant-membership": "All work and no play makes Jack a dull boy.",
                "schema-type-missing": "All work and no play makes Jack a dull boy."
              },
              "schema": {
                "x-akamai": {
                  "file-path": "schemas/schema-empty.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  " sample-trim-key": true,
                  "sample trim key": true,
                  "sample-trim-key ": true,
                  "sample-trim-value": "Leading or trailing space. ",
                  "schema-desc-links-self": "All work and no play makes Jack a dull boy.",
                  "schema-desc-malformed-para": "All work and no play makes Jack a dull boy.",
                  "schema-desc-missing": "All work and no play makes Jack a dull boy.",
                  "schema-desc-varies": "All work and no play makes Jack a dull boy.",
                  "schema-get-put-mismatch": "All work and no play makes Jack a dull boy.",
                  "schema-invalid-against-sample": {
                    "bar": true,
                    "foo": true
                  },
                  "schema-name-case-insensitive": {
                    "BADSAMPLENAME": "ALL WORK AND NO PLAY MAKES JACK A DULL BOY.",
                    "BadSampleName": "All work and no play makes Jack a dull boy.",
                    "badSampleName": "All work and no play makes Jack a dull boy.",
                    "badsamplename": "all work and no play makes jack a dull boy."
                  },
                  "schema-name-malformed": "All work and no play makes Jack a dull boy.",
                  "schema-name-misspelled": {
                    "certficateName": "All work and no play makes Jack a dull boy.",
                    "operationid": "All work and no play makes Jack a dull boy."
                  },
                  "schema-omits-ro": "All work and no play makes Jack a dull boy.",
                  "schema-orphaned": "All work and no play makes Jack a dull boy.",
                  "schema-poly-anonymous": "All work and no play makes Jack a dull boy.",
                  "schema-poly-avoid": "All work and no play makes Jack a dull boy.",
                  "schema-poly-overload": "All work and no play makes Jack a dull boy.",
                  "schema-redundant": "All work and no play makes Jack a dull boy.",
                  "schema-redundant-membership": "All work and no play makes Jack a dull boy.",
                  "schema-type-missing": "All work and no play makes Jack a dull boy."
                },
                "schema": {
                  "x-akamai": {
                    "file-path": "schemas/schema-empty.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Check dummy schemas",
        "tags": [
          "Schemas"
        ]
      }
    },
    "/data/schema-name-unqualified": {
      "get": {
        "description": "This tests unqualified schema names.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-name-unqualified"
        },
        "operationId": "get-schema-name-unqualified",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "ONE",
                        "TWO"
                      ],
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test schema members names",
        "tags": [
          "Data"
        ]
      }
    },
    "/data/str": {
      "put": {
        "description": "This tests strings.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-str"
        },
        "operationId": "put-str",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "str-date-fmt-missing": "All work and no play makes Jack a dull boy.",
                "str-date-offset": "2011-08-12T20:17:46.384Z",
                "str-enum-binary": 99999,
                "str-enum-desc-alph": "All work and no play makes Jack a dull boy.",
                "str-enum-desc-unlisted": {
                  "allDescribed": "GROUCHO",
                  "allMissing": "CHICO",
                  "descriptionHasLink": "HARPO",
                  "someMissing": "ZEPPO"
                },
                "str-enum-integer": "All work and no play makes Jack a dull boy.",
                "str-enum-integer-range": "All work and no play makes Jack a dull boy.",
                "str-enum-nullable": "All work and no play makes Jack a dull boy.",
                "str-enum-orphan": "All work and no play makes Jack a dull boy.",
                "str-enum-redundant-spec": "All work and no play makes Jack a dull boy.",
                "str-enum-repeated": "All work and no play makes Jack a dull boy.",
                "str-enum-repeated-case": "All work and no play makes Jack a dull boy.",
                "str-enum-unspeced-desc": "All work and no play makes Jack a dull boy.",
                "str-enum-unspeced-name": "All work and no play makes Jack a dull boy.",
                "str-enum-values-malformed": "All work and no play makes Jack a dull boy.",
                "str-fmt-byte": "All work and no play makes Jack a dull boy.",
                "str-fmt-email": "All work and no play makes Jack a dull boy.",
                "str-fmt-hostname": "All work and no play makes Jack a dull boy.",
                "str-fmt-ip": "All work and no play makes Jack a dull boy.",
                "str-fmt-timestamp": "All work and no play makes Jack a dull boy.",
                "str-fmt-uri": "All work and no play makes Jack a dull boy.",
                "str-lacks-min": "All work and no play makes Jack a dull boy.",
                "thresold-max": "All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy.",
                "thresold-min": ""
              },
              "schema": {
                "description": "String tests.",
                "properties": {
                  "patterns": {
                    "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                    "properties": {
                      "patternInvalid": {
                        "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                        "pattern": "^($",
                        "type": "string"
                      },
                      "patternInvalidatesData": {
                        "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                        "pattern": "^$",
                        "type": "string"
                      },
                      "quotedBackslashed": {
                        "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "quotedUnchanged": {
                        "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                        "type": "string"
                      },
                      "unquotedBackslashed": {
                        "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "unquotedUnchanged": {
                        "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "spec-enforcer-parse-err-false-positive": {
                    "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-date-fmt-missing": {
                    "description": "TBD timestamp string lacks `format`.",
                    "type": "string"
                  },
                  "str-date-offset": {
                    "description": "TBD warn against time zone offset values in samples.",
                    "type": "string"
                  },
                  "str-enum-alph": {
                    "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                    "enum": [
                      "GEORGE",
                      "JOHN",
                      "PAUL",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-alph": {
                    "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                    "enum": [
                      "JOHN",
                      "PAUL",
                      "GEORGE",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-length": {
                    "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                    "enum": [
                      "UNPARSEABLE",
                      "PRISTINE_TOO_WIDE",
                      "DURATION",
                      "PIXEL",
                      "BYTES",
                      "SAMPLERATE",
                      "PRISTINE_TOO_TALL",
                      "PROCESS_FAILED_INTERNALLY",
                      "INVALID_POLICY"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-max": {
                    "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                    "enum": [
                      "A",
                      "B",
                      "C",
                      "D",
                      "E",
                      "F",
                      "G",
                      "H",
                      "I",
                      "J"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unlisted": {
                    "properties": {
                      "allDescribed": {
                        "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "allMissing": {
                        "description": "Raise an error because this description fails to detail any enum values.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "descriptionHasLink": {
                        "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "integerEnumMissing": {
                        "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                        "enum": [
                          400,
                          403,
                          401,
                          404
                        ],
                        "type": "integer"
                      },
                      "integerEnumPresent": {
                        "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                        "enum": [
                          400,
                          401,
                          404,
                          403
                        ],
                        "type": "integer"
                      },
                      "someMissing": {
                        "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "allDescribed",
                      "allMissing",
                      "descriptionHasLink",
                      "someMissing"
                    ],
                    "type": "object"
                  },
                  "str-enum-desc-unordered": {
                    "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                    "enum": [
                      "DEWEY",
                      "HUEY",
                      "LOUIE"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced": {
                    "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced-empty": {
                    "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-details": {
                    "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                    "enum": [
                      "CAA_MISMATCH_FAILURE",
                      "CAA_MISMATCH_RETRYING",
                      "DEPLOYED",
                      "DEPLOYING",
                      "EXPIRED_NEEDS_VALIDATION",
                      "EXPIRING_SOON_NEEDS_VALIDATION",
                      "NEEDS_ACTIVATION",
                      "PENDING",
                      "PROHIBITED_DOMAIN_FAILURE",
                      "STALLED"
                    ],
                    "type": "string"
                  },
                  "str-enum-differentiator-missing": {
                    "description": "Missing a differentiator.",
                    "properties": {
                      "isAnyOf": {
                        "anyOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      },
                      "isOneOf": {
                        "oneOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-empty": {
                    "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-integer": {
                    "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                    "enum": [
                      404,
                      500,
                      400
                    ],
                    "type": "string"
                  },
                  "str-enum-integer-range": {
                    "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                    "type": "string"
                  },
                  "str-enum-keyword-anyof": {
                    "anyOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ],
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                  },
                  "str-enum-keyword-oneof": {
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                    "oneOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ]
                  },
                  "str-enum-nullable": {
                    "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "str-enum-orphan": {
                    "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                    "enum": [
                      "ALL_ALONE"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated": {
                    "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                    "enum": [
                      "CHICO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated-case": {
                    "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                    "enum": [
                      "two-words",
                      "Two Words",
                      "TWO_WORDS",
                      "twoWords"
                    ],
                    "type": "string"
                  },
                  "str-enum-string-integer": {
                    "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                    "enum": [
                      "400",
                      "500",
                      "404"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-conflict": {
                    "description": "Data type for enum set doesn't match schema type.",
                    "properties": {
                      "integerSchemaStringEnum": {
                        "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "integer"
                      },
                      "stringSchemaIntegerEnum": {
                        "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                        "enum": [
                          400,
                          403,
                          401
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-type-mixed": {
                    "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                    "enum": [
                      400,
                      "401"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-weird": {
                    "description": "Data type for enum set is boolean or null.",
                    "properties": {
                      "booleanEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "boolean"
                      },
                      "nullEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          null
                        ],
                        "type": "boolean"
                      },
                      "numericEnum": {
                        "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                        "enum": [
                          401.2,
                          403.3,
                          400.1
                        ],
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-unspeced-desc": {
                    "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                    "type": "string"
                  },
                  "str-enum-unspeced-name": {
                    "description": "These should all likely be enums based on their names.",
                    "properties": {
                      "bolusClass": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetwork": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetworkId": {
                        "description": "This should not be flagged.",
                        "type": "string"
                      },
                      "bolusOperation": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusStatus": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusType": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "type": {
                        "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-values-malformed": {
                    "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                    "enum": [
                      "MalformedValue",
                      "valueIsMalformed",
                      "malformed",
                      "MALFORMED-VALUE",
                      "malformed_value",
                      "malformed-value",
                      "_",
                      "_PREFIXED",
                      "-",
                      "WELL_FORMED_VALUE"
                    ],
                    "type": "string"
                  },
                  "str-fmt-byte": {
                    "description": "A schema for a Base64 string should spec `format: byte`.",
                    "type": "string"
                  },
                  "str-fmt-email": {
                    "description": "The schema should spec `format: email`.",
                    "properties": {
                      "widgetEmail": {
                        "description": "The schema should spec `format: email`.",
                        "type": "string"
                      },
                      "widgetEmails": {
                        "description": "The schema should spec `format: email`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-hostname": {
                    "description": "Schema should spec `format: hostname`.",
                    "properties": {
                      "widgetHostname": {
                        "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-ip": {
                    "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                    "properties": {
                      "missingIp": {
                        "description": "This schema should spec a `format`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-timestamp": {
                    "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                    "properties": {
                      "alpha2Code": {
                        "description": "The ISO 3166 two-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "alpha3Code": {
                        "description": "The ISO 3166 three-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "createdTime": {
                        "description": "When the widget was created.",
                        "type": "string"
                      },
                      "deployedTimestamp": {
                        "description": "When the widget was deployed.",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "When the widget was updated.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-uri": {
                    "description": "Schemas should spec'ed as `format: uri`.",
                    "properties": {
                      "hostnameUri": {
                        "description": "A URI member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "hostnameUrl": {
                        "description": "A URL member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "widgetUri": {
                        "description": "A URI member with no format.",
                        "type": "string"
                      },
                      "widgetUrl": {
                        "description": "A URL member with no format.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-min-conflict-format": {
                    "description": "String schema specifies both `minLength` and `format`.",
                    "format": "date-time",
                    "minLength": 1,
                    "type": "string"
                  },
                  "str-min-missing": {
                    "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                    "type": "string",
                    "x-akamai": {
                      "labels": [
                        "Bot Manager"
                      ],
                      "status": "BETA"
                    }
                  },
                  "threshold-max": {
                    "description": "Sample string data is too long.",
                    "maxLength": 32,
                    "type": "string"
                  },
                  "threshold-min": {
                    "description": "Sample string data is zero-length, too short.",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/str.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "str-date-fmt-missing": "All work and no play makes Jack a dull boy.",
                  "str-date-offset": "2011-08-12T20:17:46.384Z",
                  "str-enum-binary": 99999,
                  "str-enum-desc-alph": "All work and no play makes Jack a dull boy.",
                  "str-enum-desc-unlisted": {
                    "allDescribed": "GROUCHO",
                    "allMissing": "CHICO",
                    "descriptionHasLink": "HARPO",
                    "someMissing": "ZEPPO"
                  },
                  "str-enum-integer": "All work and no play makes Jack a dull boy.",
                  "str-enum-integer-range": "All work and no play makes Jack a dull boy.",
                  "str-enum-nullable": "All work and no play makes Jack a dull boy.",
                  "str-enum-orphan": "All work and no play makes Jack a dull boy.",
                  "str-enum-redundant-spec": "All work and no play makes Jack a dull boy.",
                  "str-enum-repeated": "All work and no play makes Jack a dull boy.",
                  "str-enum-repeated-case": "All work and no play makes Jack a dull boy.",
                  "str-enum-unspeced-desc": "All work and no play makes Jack a dull boy.",
                  "str-enum-unspeced-name": "All work and no play makes Jack a dull boy.",
                  "str-enum-values-malformed": "All work and no play makes Jack a dull boy.",
                  "str-fmt-byte": "All work and no play makes Jack a dull boy.",
                  "str-fmt-email": "All work and no play makes Jack a dull boy.",
                  "str-fmt-hostname": "All work and no play makes Jack a dull boy.",
                  "str-fmt-ip": "All work and no play makes Jack a dull boy.",
                  "str-fmt-timestamp": "All work and no play makes Jack a dull boy.",
                  "str-fmt-uri": "All work and no play makes Jack a dull boy.",
                  "str-lacks-min": "All work and no play makes Jack a dull boy.",
                  "thresold-max": "All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy. All work and no play makes Jack a dull boy.",
                  "thresold-min": ""
                },
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Test strings",
        "tags": [
          "Strings"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://{hostname}/test-suite/v2"
    }
  ],
  "x-akamai": {
    "auth-type": "EDGE_GRID",
    "file-path": "10-data.yaml"
  },
  "x-readme": {
    "samples-languages": [
      "curl",
      "python",
      "node"
    ]
  }
}