{
  "components": {
    "parameters": {
      "externalPathParam": {
        "description": "This inline path parameter throws a warning because it's defined inline.",
        "in": "path",
        "name": "inlinePathParamId",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-akamai": {
          "file-path": "parameters/externalPathParam.yaml"
        }
      }
    },
    "responses": {
      "400": {
        "content": {
          "application/problem+json": {
            "example": {
              "detail": "All work and no play makes Jack a dull boy."
            },
            "schema": {
              "additionalProperties": false,
              "properties": {
                "detail": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "type": "string"
                },
                "errors": {
                  "description": "Nested errors.",
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "detail": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "status": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "integer"
                      },
                      "title": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "string"
                      },
                      "type": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "detail",
                      "title",
                      "type",
                      "status"
                    ],
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/error-nested.yaml"
                    }
                  },
                  "type": "array"
                },
                "status": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "integer"
                },
                "title": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                },
                "type": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                }
              },
              "required": [
                "detail",
                "title",
                "type",
                "status"
              ],
              "type": "object",
              "x-akamai": {
                "file-path": "schemas/error.yaml"
              }
            }
          }
        },
        "description": "The user doesn't have access to rate policy in this security configuration.",
        "x-akamai": {
          "file-path": "errors/400.yaml"
        }
      },
      "400-plain-json": {
        "content": {
          "application/json": {
            "example": {
              "detail": "All work and no play makes Jack a dull boy."
            },
            "schema": {
              "additionalProperties": false,
              "properties": {
                "detail": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "type": "string"
                },
                "errors": {
                  "description": "Nested errors.",
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "detail": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "status": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "integer"
                      },
                      "title": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "string"
                      },
                      "type": {
                        "description": "This schema name should not trigger a warning.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "detail",
                      "title",
                      "type",
                      "status"
                    ],
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/error-nested.yaml"
                    }
                  },
                  "type": "array"
                },
                "status": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "integer"
                },
                "title": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                },
                "type": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                }
              },
              "required": [
                "detail",
                "title",
                "type",
                "status"
              ],
              "type": "object",
              "x-akamai": {
                "file-path": "schemas/error.yaml"
              }
            }
          }
        },
        "description": "The user doesn't have access to rate policy in this security configuration.",
        "x-akamai": {
          "file-path": "errors/400-plain-json.yaml"
        }
      }
    },
    "schemas": {
      "cabbageWankType": {
        "minLength": 1,
        "type": "string"
      },
      "error": {
        "additionalProperties": false,
        "properties": {
          "detail": {
            "description": "All work and no play makes Jack a dull boy.",
            "type": "string"
          },
          "errors": {
            "description": "Nested errors.",
            "items": {
              "additionalProperties": true,
              "properties": {
                "detail": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "type": "string"
                },
                "status": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "integer"
                },
                "title": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                },
                "type": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                }
              },
              "required": [
                "detail",
                "title",
                "type",
                "status"
              ],
              "type": "object",
              "x-akamai": {
                "file-path": "schemas/error-nested.yaml"
              }
            },
            "type": "array"
          },
          "status": {
            "description": "This schema name should not trigger a warning.",
            "type": "integer"
          },
          "title": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          },
          "type": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          }
        },
        "required": [
          "detail",
          "title",
          "type",
          "status"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/error.yaml"
        }
      },
      "error-nested": {
        "additionalProperties": true,
        "properties": {
          "detail": {
            "description": "All work and no play makes Jack a dull boy.",
            "type": "string"
          },
          "status": {
            "description": "This schema name should not trigger a warning.",
            "type": "integer"
          },
          "title": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          },
          "type": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          }
        },
        "required": [
          "detail",
          "title",
          "type",
          "status"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/error-nested.yaml"
        }
      },
      "linked-schema": {
        "description": "This schema is $ref linked.",
        "type": "boolean",
        "x-akamai": {
          "file-path": "schemas/linked-schema.yaml"
        }
      },
      "noop": {
        "additionalProperties": false,
        "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
        "properties": {
          "chico": {
            "description": "Chico.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          },
          "groucho": {
            "description": "Groucho.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          },
          "harpo": {
            "description": "Harpo.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          }
        },
        "required": [
          "groucho",
          "chico",
          "harpo"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/noop.yaml"
        }
      },
      "num": {
        "description": "Numeric tests.",
        "properties": {
          "num-epoch": {
            "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
            "properties": {
              "activationDate": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              },
              "activationTime": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "num-max": {
            "description": "Specifies a `maximum` value.",
            "maximum": 90,
            "type": "integer"
          },
          "num-min-missing": {
            "description": "This numeric schema doesn't specify a `minimum` value.",
            "type": "integer"
          },
          "num-min-missing-enum": {
            "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "num-not-int-kw": {
            "description": "Nested members are mistyped as `number`.",
            "properties": {
              "policyId": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyVersion": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-not-int-other": {
            "description": "Nested members may be mistyped as `number`.",
            "properties": {
              "policyLimit": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyThreshold": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-pct-lacks-max": {
            "description": "This is described as a percent, but spec lacks a maximum.",
            "type": "integer"
          },
          "threshold-max": {
            "description": "Sample integer data is too high.",
            "maximum": 360,
            "type": "integer"
          },
          "threshold-min": {
            "description": "Sample integer data is too low.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/num.yaml"
        }
      },
      "schema": {
        "additionalProperties": true,
        "description": "Basic schema tests.",
        "properties": {
          "badly formatted key": {
            "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
            "type": "boolean"
          },
          "enumValue": {
            "description": "Unclear what this tests: `Value1`.",
            "enum": [
              "Value1"
            ],
            "type": "string"
          },
          "false": {
            "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
            "type": "string"
          },
          "lang-desc-link-invalid": {
            "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
            "type": "string"
          },
          "lang-desc-numbered-slug": {
            "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
            "type": "string"
          },
          "openapi-html-comment": {
            "description": "<!-- Commented out content -->",
            "type": "boolean"
          },
          "openapi-schema-ref-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` for contextual doc throws a warning."
              },
              {
                "description": "This schema is $ref linked.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            ]
          },
          "openapi-schema-ref-conflict": {
            "additionalProperties": false,
            "default": false,
            "description": "This schema is $ref linked.",
            "type": "boolean",
            "x-akamai": {
              "file-path": "schemas/linked-schema.yaml"
            }
          },
          "openapi-schema-ref-conflict-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
              },
              {
                "default": false,
                "description": "This schema is $ref linked.",
                "nullable": true,
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              {
                "description": "Alternative desc"
              }
            ]
          },
          "openapi-schema-ref-overload": {
            "description": "Test different ways to arrange descriptions along with $ref links.",
            "properties": {
              "refOrderedCorrectly": {
                "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              "refOrderedIncorrectly": {
                "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            },
            "type": "object"
          },
          "random-yaml": {
            "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
            "enum": [
              "GROUCHO",
              "HARPO",
              "CHICO"
            ],
            "type": "string"
          },
          "ref-overload": {
            "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
            "maxLength": 1024,
            "minLength": 1,
            "readOnly": true,
            "type": "string"
          },
          "schema-desc-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
            "type": "string"
          },
          "schema-desc-malformed-para": {
            "description": "TBD description has punctuation and is a full sentence.",
            "type": "string"
          },
          "schema-desc-missing": {
            "type": "string"
          },
          "schema-example-redundant": {
            "description": "This schema should not embed an `example` that's redundant with separate sample data.",
            "example": "This is messed up!",
            "type": "string"
          },
          "schema-get-put-mismatch": {
            "description": "TBD GET rsp & PUT req should link same schema.",
            "type": "string"
          },
          "schema-invalid-against-sample": {
            "additionalProperties": false,
            "description": "Simple membership test to check if the CLI validates sample data against the schema.",
            "properties": {
              "bar": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              },
              "foo": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              }
            },
            "required": [
              "foo",
              "bar"
            ],
            "type": "object"
          },
          "schema-name-case-sensitive": {
            "description": "Complain about all these schema names varying in case.",
            "properties": {
              "BADSCHEMANAME": {
                "type": "boolean"
              },
              "BadSchemaName": {
                "type": "boolean"
              },
              "badSchemaName": {
                "type": "boolean"
              },
              "badschemaname": {
                "type": "boolean"
              },
              "sourceIP": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-malformed": {
            "description": "Complain about this schema name not being camelCase.",
            "type": "string"
          },
          "schema-name-misspelled": {
            "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
            "properties": {
              "certficateName": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              },
              "operationid": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-parroted": {
            "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
            "type": "string"
          },
          "schema-operation-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
            "type": "string"
          },
          "schema-orphaned": {
            "description": "TBD schema file is an unreferenced orphan.",
            "type": "string"
          },
          "schema-poly-anonymous": {
            "description": "TBD oneOf/anyOf: each scenario needs a label.",
            "type": "string"
          },
          "schema-redundant": {
            "description": "TBD redundant schema, normalized for description.",
            "type": "string"
          },
          "schema-redundant-membership": {
            "description": "TBD schema is redundant, same set of members.",
            "type": "string"
          },
          "schema-type-missing": {
            "description": "This schema lacks a `type`."
          },
          "svc-tally-named-obj-keys": {
            "description": "Test variance among same-named object schemas' set of defined members.",
            "properties": {
              "batchOne": {
                "properties": {
                  "beatles": {
                    "description": "Defines all members.",
                    "properties": {
                      "george": {
                        "type": "string"
                      },
                      "john": {
                        "type": "string"
                      },
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "beatles": {
                    "description": "Defines members still alive.",
                    "properties": {
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-obj-keys": {
            "description": "Complain that this set of keys is defined in more than one schema file.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-desc": {
            "description": "Test variance among schema descriptions.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingDescription": {
                    "description": "All work and no play makes Jeremy a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingDescription": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingDescription": {
                    "description": "All twerk and no play makes Jack a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-enum-values": {
            "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
            "properties": {
              "batchFour": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchOne": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "HARPO",
                      "CHICO",
                      "ZEPPO",
                      "GUMMO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "CHICO",
                      "GROUCHO",
                      "GUMMO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-type": {
            "description": "Test variance among schema types.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "items": {
                      "description": "This test needs to ignore the contents of `items`.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/schema.yaml"
        }
      },
      "str": {
        "description": "String tests.",
        "properties": {
          "patterns": {
            "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
            "properties": {
              "patternInvalid": {
                "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                "pattern": "^($",
                "type": "string"
              },
              "patternInvalidatesData": {
                "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                "pattern": "^$",
                "type": "string"
              },
              "quotedBackslashed": {
                "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "quotedUnchanged": {
                "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                "type": "string"
              },
              "unquotedBackslashed": {
                "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "unquotedUnchanged": {
                "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "spec-enforcer-parse-err-false-positive": {
            "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-date-fmt-missing": {
            "description": "TBD timestamp string lacks `format`.",
            "type": "string"
          },
          "str-date-offset": {
            "description": "TBD warn against time zone offset values in samples.",
            "type": "string"
          },
          "str-enum-alph": {
            "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
            "enum": [
              "GEORGE",
              "JOHN",
              "PAUL",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-alph": {
            "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
            "enum": [
              "JOHN",
              "PAUL",
              "GEORGE",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-length": {
            "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
            "enum": [
              "UNPARSEABLE",
              "PRISTINE_TOO_WIDE",
              "DURATION",
              "PIXEL",
              "BYTES",
              "SAMPLERATE",
              "PRISTINE_TOO_TALL",
              "PROCESS_FAILED_INTERNALLY",
              "INVALID_POLICY"
            ],
            "type": "string"
          },
          "str-enum-desc-max": {
            "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J"
            ],
            "type": "string"
          },
          "str-enum-desc-unlisted": {
            "properties": {
              "allDescribed": {
                "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "allMissing": {
                "description": "Raise an error because this description fails to detail any enum values.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "descriptionHasLink": {
                "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "integerEnumMissing": {
                "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                "enum": [
                  400,
                  403,
                  401,
                  404
                ],
                "type": "integer"
              },
              "integerEnumPresent": {
                "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                "enum": [
                  400,
                  401,
                  404,
                  403
                ],
                "type": "integer"
              },
              "someMissing": {
                "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              }
            },
            "required": [
              "allDescribed",
              "allMissing",
              "descriptionHasLink",
              "someMissing"
            ],
            "type": "object"
          },
          "str-enum-desc-unordered": {
            "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
            "enum": [
              "DEWEY",
              "HUEY",
              "LOUIE"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced": {
            "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced-empty": {
            "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              ""
            ],
            "type": "string"
          },
          "str-enum-details": {
            "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
            "enum": [
              "CAA_MISMATCH_FAILURE",
              "CAA_MISMATCH_RETRYING",
              "DEPLOYED",
              "DEPLOYING",
              "EXPIRED_NEEDS_VALIDATION",
              "EXPIRING_SOON_NEEDS_VALIDATION",
              "NEEDS_ACTIVATION",
              "PENDING",
              "PROHIBITED_DOMAIN_FAILURE",
              "STALLED"
            ],
            "type": "string"
          },
          "str-enum-differentiator-missing": {
            "description": "Missing a differentiator.",
            "properties": {
              "isAnyOf": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              },
              "isOneOf": {
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              }
            },
            "type": "object"
          },
          "str-enum-empty": {
            "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
            "enum": [
              "GROUCHO",
              "CHICO",
              ""
            ],
            "type": "string"
          },
          "str-enum-integer": {
            "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
            "enum": [
              404,
              500,
              400
            ],
            "type": "string"
          },
          "str-enum-integer-range": {
            "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
            "type": "string"
          },
          "str-enum-keyword-anyof": {
            "anyOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ],
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
          },
          "str-enum-keyword-oneof": {
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
            "oneOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ]
          },
          "str-enum-nullable": {
            "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO"
            ],
            "nullable": true,
            "type": "string"
          },
          "str-enum-orphan": {
            "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
            "enum": [
              "ALL_ALONE"
            ],
            "type": "string"
          },
          "str-enum-repeated": {
            "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
            "enum": [
              "CHICO",
              "CHICO",
              "HARPO"
            ],
            "type": "string"
          },
          "str-enum-repeated-case": {
            "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
            "enum": [
              "two-words",
              "Two Words",
              "TWO_WORDS",
              "twoWords"
            ],
            "type": "string"
          },
          "str-enum-string-integer": {
            "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
            "enum": [
              "400",
              "500",
              "404"
            ],
            "type": "string"
          },
          "str-enum-type-conflict": {
            "description": "Data type for enum set doesn't match schema type.",
            "properties": {
              "integerSchemaStringEnum": {
                "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                "enum": [
                  "GROUCHO",
                  "HARPO",
                  "CHICO"
                ],
                "type": "integer"
              },
              "stringSchemaIntegerEnum": {
                "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                "enum": [
                  400,
                  403,
                  401
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-type-mixed": {
            "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
            "enum": [
              400,
              "401"
            ],
            "type": "string"
          },
          "str-enum-type-weird": {
            "description": "Data type for enum set is boolean or null.",
            "properties": {
              "booleanEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              },
              "nullEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  null
                ],
                "type": "boolean"
              },
              "numericEnum": {
                "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                "enum": [
                  401.2,
                  403.3,
                  400.1
                ],
                "type": "number"
              }
            },
            "type": "object"
          },
          "str-enum-unspeced-desc": {
            "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
            "type": "string"
          },
          "str-enum-unspeced-name": {
            "description": "These should all likely be enums based on their names.",
            "properties": {
              "bolusClass": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetwork": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetworkId": {
                "description": "This should not be flagged.",
                "type": "string"
              },
              "bolusOperation": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusStatus": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusType": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "type": {
                "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-values-malformed": {
            "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
            "enum": [
              "MalformedValue",
              "valueIsMalformed",
              "malformed",
              "MALFORMED-VALUE",
              "malformed_value",
              "malformed-value",
              "_",
              "_PREFIXED",
              "-",
              "WELL_FORMED_VALUE"
            ],
            "type": "string"
          },
          "str-fmt-byte": {
            "description": "A schema for a Base64 string should spec `format: byte`.",
            "type": "string"
          },
          "str-fmt-email": {
            "description": "The schema should spec `format: email`.",
            "properties": {
              "widgetEmail": {
                "description": "The schema should spec `format: email`.",
                "type": "string"
              },
              "widgetEmails": {
                "description": "The schema should spec `format: email`.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "str-fmt-hostname": {
            "description": "Schema should spec `format: hostname`.",
            "properties": {
              "widgetHostname": {
                "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-ip": {
            "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
            "properties": {
              "missingIp": {
                "description": "This schema should spec a `format`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-timestamp": {
            "description": "Based on their names, schema should spec `format: date-time` or `date`.",
            "properties": {
              "alpha2Code": {
                "description": "The ISO 3166 two-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "alpha3Code": {
                "description": "The ISO 3166 three-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "createdTime": {
                "description": "When the widget was created.",
                "type": "string"
              },
              "deployedTimestamp": {
                "description": "When the widget was deployed.",
                "type": "string"
              },
              "updatedDate": {
                "description": "When the widget was updated.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-uri": {
            "description": "Schemas should spec'ed as `format: uri`.",
            "properties": {
              "hostnameUri": {
                "description": "A URI member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "hostnameUrl": {
                "description": "A URL member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "widgetUri": {
                "description": "A URI member with no format.",
                "type": "string"
              },
              "widgetUrl": {
                "description": "A URL member with no format.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-min-conflict-format": {
            "description": "String schema specifies both `minLength` and `format`.",
            "format": "date-time",
            "minLength": 1,
            "type": "string"
          },
          "str-min-missing": {
            "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
            "type": "string",
            "x-akamai": {
              "labels": [
                "Bot Manager"
              ],
              "status": "BETA"
            }
          },
          "threshold-max": {
            "description": "Sample string data is too long.",
            "maxLength": 32,
            "type": "string"
          },
          "threshold-min": {
            "description": "Sample string data is zero-length, too short.",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/str.yaml"
        }
      },
      "yuccaPudooType": {
        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
        "enum": [
          "GROUCHO",
          "HARPO",
          "CHICO"
        ],
        "type": "string"
      }
    }
  },
  "externalDocs": {
    "description": "See documentation for Akamai's Swag-tool Test API",
    "url": "https://techdocs.akamai.com/internal-ux-writing/reference"
  },
  "info": {
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Operation",
    "version": "v2"
  },
  "openapi": "3.0.0",
  "paths": {
    "/op-4xx-json-mistyped": {
      "get": {
        "description": "Log `application/json` as wrong response type.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-4xx-json-mistyped"
        },
        "operationId": "get-op-4xx-json-mistyped",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "detail": "All work and no play makes Jack a dull boy."
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "detail": {
                      "description": "All work and no play makes Jack a dull boy.",
                      "type": "string"
                    },
                    "errors": {
                      "description": "Nested errors.",
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "detail": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "status": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "integer"
                          },
                          "title": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          },
                          "type": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "detail",
                          "title",
                          "type",
                          "status"
                        ],
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/error-nested.yaml"
                        }
                      },
                      "type": "array"
                    },
                    "status": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "integer"
                    },
                    "title": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    },
                    "type": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "detail",
                    "title",
                    "type",
                    "status"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/error.yaml"
                  }
                }
              }
            },
            "description": "The user doesn't have access to rate policy in this security configuration.",
            "x-akamai": {
              "file-path": "errors/400-plain-json.yaml"
            }
          }
        },
        "summary": "Wrong error Content-Type",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-add-missing-accept-header": {
      "delete": {
        "description": "Add a wildcarded content type to the no body 204 response.\nThis sets the Accept header to `*/*` and allows for API snippets to be run.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/delete-add-missing-accept-header"
        },
        "operationId": "delete-add-missing-accept-header",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {
              "application/problem+json": {
                "example": {},
                "schema": {}
              }
            },
            "description": "Bad request"
          }
        },
        "summary": "A DELETE operation with a 204 response without a body and error responses",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-binary-types": {
      "get": {
        "description": "Binary content types need no examples and require a string schema.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-binary-types"
        },
        "operationId": "get-op-binary-types",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/gzip": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success response"
          },
          "201": {
            "content": {
              "application/gzip": {
                "example": {},
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Examples and schemas for binary content-types",
        "tags": [
          "Redundant definitions"
        ]
      },
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-binary-types"
        },
        "operationId": "put-op-binary-types",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/gzip": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "example": {},
              "schema": {}
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success response"
          }
        },
        "summary": "Examples and schemas for binary content-types",
        "tags": [
          "Redundant definitions"
        ]
      }
    },
    "/op-depr-desc-missing": {
      "get": {
        "description": "An operation with an `x-akamai` spec, but no mention in the description.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-depr-desc-missing"
        },
        "operationId": "get-op-depr-desc-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Deprecated syntax present with faulty description",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-depr-desc-unlabeled": {
      "get": {
        "description": "A deprecated operation without an `x-akamai` spec.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-depr-desc-unlabeled"
        },
        "operationId": "get-op-depr-desc-unlabeled",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Deprecated syntax missing",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-depr-incomplete": {
      "post": {
        "description": "__Deprecated__ Throws error because deprecated status is not paired with boolean.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-op-depr-incomplete"
        },
        "operationId": "post-op-depr-incomplete",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation lacks DEPRECATED boolean",
        "tags": [
          "Status"
        ],
        "x-akamai": {
          "status": "DEPRECATED"
        }
      },
      "get": {
        "deprecated": true,
        "description": "Throws error because deprecated boolean is not paired with status.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-depr-incomplete"
        },
        "operationId": "get-op-depr-incomplete",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation lacks DEPRECATED status",
        "tags": [
          "Status"
        ]
      }
    },
    "/op-depr-needs-eol": {
      "get": {
        "description": "A deprecated operation without EOL headers",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-depr-needs-eol"
        },
        "operationId": "get-op-depr-needs-eol",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Deprecated operation no EOL",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-desc-links-self": {
      "put": {
        "description": "[This op-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self"
        },
        "operationId": "put-op-desc-links-self",
        "parameters": [
          {
            "description": "[This query param-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
            "in": "query",
            "name": "linksSelf",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "foo"
              },
              "schema": {
                "additionalProperties": true,
                "description": "Basic schema tests.",
                "properties": {
                  "badly formatted key": {
                    "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                    "type": "boolean"
                  },
                  "enumValue": {
                    "description": "Unclear what this tests: `Value1`.",
                    "enum": [
                      "Value1"
                    ],
                    "type": "string"
                  },
                  "false": {
                    "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                    "type": "string"
                  },
                  "lang-desc-link-invalid": {
                    "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                    "type": "string"
                  },
                  "lang-desc-numbered-slug": {
                    "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                    "type": "string"
                  },
                  "openapi-html-comment": {
                    "description": "<!-- Commented out content -->",
                    "type": "boolean"
                  },
                  "openapi-schema-ref-allof": {
                    "allOf": [
                      {
                        "description": "This use of `allOf` for contextual doc throws a warning."
                      },
                      {
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      }
                    ]
                  },
                  "openapi-schema-ref-conflict": {
                    "additionalProperties": false,
                    "default": false,
                    "description": "This schema is $ref linked.",
                    "type": "boolean",
                    "x-akamai": {
                      "file-path": "schemas/linked-schema.yaml"
                    }
                  },
                  "openapi-schema-ref-conflict-allof": {
                    "allOf": [
                      {
                        "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                      },
                      {
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "nullable": true,
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      {
                        "description": "Alternative desc"
                      }
                    ]
                  },
                  "openapi-schema-ref-overload": {
                    "description": "Test different ways to arrange descriptions along with $ref links.",
                    "properties": {
                      "refOrderedCorrectly": {
                        "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "refOrderedIncorrectly": {
                        "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      }
                    },
                    "type": "object"
                  },
                  "random-yaml": {
                    "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                    "enum": [
                      "GROUCHO",
                      "HARPO",
                      "CHICO"
                    ],
                    "type": "string"
                  },
                  "ref-overload": {
                    "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "readOnly": true,
                    "type": "string"
                  },
                  "schema-desc-links-self": {
                    "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                    "type": "string"
                  },
                  "schema-desc-malformed-para": {
                    "description": "TBD description has punctuation and is a full sentence.",
                    "type": "string"
                  },
                  "schema-desc-missing": {
                    "type": "string"
                  },
                  "schema-example-redundant": {
                    "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                    "example": "This is messed up!",
                    "type": "string"
                  },
                  "schema-get-put-mismatch": {
                    "description": "TBD GET rsp & PUT req should link same schema.",
                    "type": "string"
                  },
                  "schema-invalid-against-sample": {
                    "additionalProperties": false,
                    "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                    "properties": {
                      "bar": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "boolean"
                      },
                      "foo": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "foo",
                      "bar"
                    ],
                    "type": "object"
                  },
                  "schema-name-case-sensitive": {
                    "description": "Complain about all these schema names varying in case.",
                    "properties": {
                      "BADSCHEMANAME": {
                        "type": "boolean"
                      },
                      "BadSchemaName": {
                        "type": "boolean"
                      },
                      "badSchemaName": {
                        "type": "boolean"
                      },
                      "badschemaname": {
                        "type": "boolean"
                      },
                      "sourceIP": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "schema-name-malformed": {
                    "description": "Complain about this schema name not being camelCase.",
                    "type": "string"
                  },
                  "schema-name-misspelled": {
                    "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                    "properties": {
                      "certficateName": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      },
                      "operationid": {
                        "description": "All work and no play makes Jack a dull boy.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "schema-name-parroted": {
                    "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                    "type": "string"
                  },
                  "schema-operation-links-self": {
                    "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                    "type": "string"
                  },
                  "schema-orphaned": {
                    "description": "TBD schema file is an unreferenced orphan.",
                    "type": "string"
                  },
                  "schema-poly-anonymous": {
                    "description": "TBD oneOf/anyOf: each scenario needs a label.",
                    "type": "string"
                  },
                  "schema-redundant": {
                    "description": "TBD redundant schema, normalized for description.",
                    "type": "string"
                  },
                  "schema-redundant-membership": {
                    "description": "TBD schema is redundant, same set of members.",
                    "type": "string"
                  },
                  "schema-type-missing": {
                    "description": "This schema lacks a `type`."
                  },
                  "svc-tally-named-obj-keys": {
                    "description": "Test variance among same-named object schemas' set of defined members.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "beatles": {
                            "description": "Defines all members.",
                            "properties": {
                              "george": {
                                "type": "string"
                              },
                              "john": {
                                "type": "string"
                              },
                              "paul": {
                                "type": "string"
                              },
                              "ringo": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "beatles": {
                            "description": "Defines members still alive.",
                            "properties": {
                              "paul": {
                                "type": "string"
                              },
                              "ringo": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-obj-keys": {
                    "description": "Complain that this set of keys is defined in more than one schema file.",
                    "properties": {
                      "chico": {
                        "description": "Chico description.",
                        "type": "string"
                      },
                      "groucho": {
                        "description": "Groucho description.",
                        "type": "string"
                      },
                      "harpo": {
                        "description": "Harpo description.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-desc": {
                    "description": "Test variance among schema descriptions.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "varyingDescription": {
                            "description": "All work and no play makes Jeremy a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchThree": {
                        "properties": {
                          "varyingDescription": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingDescription": {
                            "description": "All twerk and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-enum-values": {
                    "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                    "properties": {
                      "batchFour": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchOne": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "GROUCHO",
                              "HARPO",
                              "CHICO",
                              "ZEPPO",
                              "GUMMO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchThree": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "GROUCHO",
                              "CHICO",
                              "HARPO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingEnumValues": {
                            "description": "This schema's set of enum values varies from another with the same name.",
                            "enum": [
                              "CHICO",
                              "GROUCHO",
                              "GUMMO",
                              "HARPO",
                              "ZEPPO"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "svc-tally-schema-type": {
                    "description": "Test variance among schema types.",
                    "properties": {
                      "batchOne": {
                        "properties": {
                          "varyingType": {
                            "description": "This schema's type varies from another with the same name.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "batchTwo": {
                        "properties": {
                          "varyingType": {
                            "description": "This schema's type varies from another with the same name.",
                            "items": {
                              "description": "This test needs to ignore the contents of `items`.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/schema.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "additionalProperties": true,
                  "description": "Basic schema tests.",
                  "properties": {
                    "badly formatted key": {
                      "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                      "type": "boolean"
                    },
                    "enumValue": {
                      "description": "Unclear what this tests: `Value1`.",
                      "enum": [
                        "Value1"
                      ],
                      "type": "string"
                    },
                    "false": {
                      "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                      "type": "string"
                    },
                    "lang-desc-link-invalid": {
                      "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                      "type": "string"
                    },
                    "lang-desc-numbered-slug": {
                      "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                      "type": "string"
                    },
                    "openapi-html-comment": {
                      "description": "<!-- Commented out content -->",
                      "type": "boolean"
                    },
                    "openapi-schema-ref-allof": {
                      "allOf": [
                        {
                          "description": "This use of `allOf` for contextual doc throws a warning."
                        },
                        {
                          "description": "This schema is $ref linked.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        }
                      ]
                    },
                    "openapi-schema-ref-conflict": {
                      "additionalProperties": false,
                      "default": false,
                      "description": "This schema is $ref linked.",
                      "type": "boolean",
                      "x-akamai": {
                        "file-path": "schemas/linked-schema.yaml"
                      }
                    },
                    "openapi-schema-ref-conflict-allof": {
                      "allOf": [
                        {
                          "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                        },
                        {
                          "default": false,
                          "description": "This schema is $ref linked.",
                          "nullable": true,
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        },
                        {
                          "description": "Alternative desc"
                        }
                      ]
                    },
                    "openapi-schema-ref-overload": {
                      "description": "Test different ways to arrange descriptions along with $ref links.",
                      "properties": {
                        "refOrderedCorrectly": {
                          "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        },
                        "refOrderedIncorrectly": {
                          "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                          "type": "boolean",
                          "x-akamai": {
                            "file-path": "schemas/linked-schema.yaml"
                          }
                        }
                      },
                      "type": "object"
                    },
                    "random-yaml": {
                      "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                      "enum": [
                        "GROUCHO",
                        "HARPO",
                        "CHICO"
                      ],
                      "type": "string"
                    },
                    "ref-overload": {
                      "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "readOnly": true,
                      "type": "string"
                    },
                    "schema-desc-links-self": {
                      "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                      "type": "string"
                    },
                    "schema-desc-malformed-para": {
                      "description": "TBD description has punctuation and is a full sentence.",
                      "type": "string"
                    },
                    "schema-desc-missing": {
                      "type": "string"
                    },
                    "schema-example-redundant": {
                      "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                      "example": "This is messed up!",
                      "type": "string"
                    },
                    "schema-get-put-mismatch": {
                      "description": "TBD GET rsp & PUT req should link same schema.",
                      "type": "string"
                    },
                    "schema-invalid-against-sample": {
                      "additionalProperties": false,
                      "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                      "properties": {
                        "bar": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "boolean"
                        },
                        "foo": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "foo",
                        "bar"
                      ],
                      "type": "object"
                    },
                    "schema-name-case-sensitive": {
                      "description": "Complain about all these schema names varying in case.",
                      "properties": {
                        "BADSCHEMANAME": {
                          "type": "boolean"
                        },
                        "BadSchemaName": {
                          "type": "boolean"
                        },
                        "badSchemaName": {
                          "type": "boolean"
                        },
                        "badschemaname": {
                          "type": "boolean"
                        },
                        "sourceIP": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "schema-name-malformed": {
                      "description": "Complain about this schema name not being camelCase.",
                      "type": "string"
                    },
                    "schema-name-misspelled": {
                      "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                      "properties": {
                        "certficateName": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "string"
                        },
                        "operationid": {
                          "description": "All work and no play makes Jack a dull boy.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "schema-name-parroted": {
                      "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                      "type": "string"
                    },
                    "schema-operation-links-self": {
                      "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                      "type": "string"
                    },
                    "schema-orphaned": {
                      "description": "TBD schema file is an unreferenced orphan.",
                      "type": "string"
                    },
                    "schema-poly-anonymous": {
                      "description": "TBD oneOf/anyOf: each scenario needs a label.",
                      "type": "string"
                    },
                    "schema-redundant": {
                      "description": "TBD redundant schema, normalized for description.",
                      "type": "string"
                    },
                    "schema-redundant-membership": {
                      "description": "TBD schema is redundant, same set of members.",
                      "type": "string"
                    },
                    "schema-type-missing": {
                      "description": "This schema lacks a `type`."
                    },
                    "svc-tally-named-obj-keys": {
                      "description": "Test variance among same-named object schemas' set of defined members.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "beatles": {
                              "description": "Defines all members.",
                              "properties": {
                                "george": {
                                  "type": "string"
                                },
                                "john": {
                                  "type": "string"
                                },
                                "paul": {
                                  "type": "string"
                                },
                                "ringo": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "beatles": {
                              "description": "Defines members still alive.",
                              "properties": {
                                "paul": {
                                  "type": "string"
                                },
                                "ringo": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-obj-keys": {
                      "description": "Complain that this set of keys is defined in more than one schema file.",
                      "properties": {
                        "chico": {
                          "description": "Chico description.",
                          "type": "string"
                        },
                        "groucho": {
                          "description": "Groucho description.",
                          "type": "string"
                        },
                        "harpo": {
                          "description": "Harpo description.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-desc": {
                      "description": "Test variance among schema descriptions.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "varyingDescription": {
                              "description": "All work and no play makes Jeremy a dull boy.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchThree": {
                          "properties": {
                            "varyingDescription": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingDescription": {
                              "description": "All twerk and no play makes Jack a dull boy.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-enum-values": {
                      "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                      "properties": {
                        "batchFour": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchOne": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "GROUCHO",
                                "HARPO",
                                "CHICO",
                                "ZEPPO",
                                "GUMMO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchThree": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "GROUCHO",
                                "CHICO",
                                "HARPO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingEnumValues": {
                              "description": "This schema's set of enum values varies from another with the same name.",
                              "enum": [
                                "CHICO",
                                "GROUCHO",
                                "GUMMO",
                                "HARPO",
                                "ZEPPO"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "svc-tally-schema-type": {
                      "description": "Test variance among schema types.",
                      "properties": {
                        "batchOne": {
                          "properties": {
                            "varyingType": {
                              "description": "This schema's type varies from another with the same name.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "batchTwo": {
                          "properties": {
                            "varyingType": {
                              "description": "This schema's type varies from another with the same name.",
                              "items": {
                                "description": "This test needs to ignore the contents of `items`.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/schema.yaml"
                  }
                }
              }
            },
            "description": "Success"
          }
        },
        "summary": "Operation links to itself",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-desc-missing": {
      "get": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-desc-missing"
        },
        "operationId": "get-op-desc-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted."
          }
        },
        "summary": "An operation lacks description",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-example-missing": {
      "put": {
        "description": "The op has no corresponding example in the request body or the response.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-example-missing"
        },
        "operationId": "put-op-example-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Missing example",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-examples-invalid": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-examples-invalid"
        },
        "operationId": "put-op-examples-invalid",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Key isn't kebab-case": {
                  "summary": "Key includes whitepace",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "example-lacks-summary": {
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "example-lacks-value": {
                  "summary": "No value"
                }
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Key isn't kebab-case": {
                    "summary": "Key includes whitepace",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "example-lacks-summary": {
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "example-lacks-value": {
                    "summary": "No value"
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Invalid  examples",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-examples-labels-max": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-examples-labels-max"
        },
        "operationId": "put-op-examples-labels-max",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "long-summary": {
                  "summary": "riverrun, past Eve and Adam's, from swerve of shore to bend of bay, brings us by a commodius vicus of recirculation back to Howth Castle and Environs.",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "ok-summary": {
                  "summary": "Short key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "long-summary": {
                    "summary": "riverrun, past Eve and Adam's, from swerve of shore to bend of bay, brings us by a commodius vicus of recirculation back to Howth Castle and Environs.",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "ok-summary": {
                    "summary": "Short key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Examples with overly long summaries",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-examples-max": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-examples-max"
        },
        "operationId": "put-op-examples-max",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "x1": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "x2": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "x3": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "x4": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "x5": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "x6": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "x1": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "x2": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "x3": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "x4": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "x5": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "x6": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Too many examples",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-examples-min": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-examples-min"
        },
        "operationId": "put-op-examples-min",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "x1": {
                  "summary": "Key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "x1": {
                    "summary": "Key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Only one examples",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-examples-summary-sentence": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-examples-summary-sentence"
        },
        "operationId": "put-op-examples-summary-sentence",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "bad-summary": {
                  "summary": "Not Sentence Case",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                },
                "ok-summary": {
                  "summary": "Short key",
                  "value": {
                    "chico": "MARX",
                    "groucho": "MARX",
                    "harpo": "MARX"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "bad-summary": {
                    "summary": "This includes a TLA acronym",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  },
                  "ok-summary": {
                    "summary": "Short key",
                    "value": {
                      "chico": "MARX",
                      "groucho": "MARX",
                      "harpo": "MARX"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Examples with non sentence case summaries",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-get-missing": {
      "put": {
        "description": "Add a corresponding GET call for the existing PUT.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-get-op-missing"
        },
        "operationId": "put-get-op-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {}
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Success"
          }
        },
        "summary": "A PUT operation without a corresponding GET",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-id-is-raml": {
      "get": {
        "description": "The `operationId` has RAML descriptors.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-id-max-resourceid"
        },
        "operationId": "get-op-id-max-resourceid",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "RAML operationId",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-id-malformed": {
      "get": {
        "description": "The `operationId` doesn't follow lowercase-dashed format.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op_id-malformed"
        },
        "operationId": "get-op_id-malformed",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Malformed operationId",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-id-max-length": {
      "get": {
        "description": "The `operationId` has more than five segments.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-id-max-length-five-six"
        },
        "operationId": "get-op-id-max-length-five-six",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "OperationId maximum",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-id-needs-method": {
      "get": {
        "description": "This op is missing a leading method verb, needed for use in\ncode gen.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/random-op-id"
        },
        "operationId": "random-op-id",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success."
          }
        },
        "summary": "Operation ID needs a leading method",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-ignore-missing-example-schema": {
      "put": {
        "description": "Ignore `op-schema-missing` and `op-example-missing` errors for the request and response.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-ignore-missing-example-schema"
        },
        "operationId": "put-ignore-missing-example-schema",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {}
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Success"
          }
        },
        "summary": "A PUT operation with empty request and response",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-method-sort-order": {
      "post": {
        "description": "Test method sort order.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-op-method-sort-order"
        },
        "operationId": "post-op-method-sort-order",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              },
              "text/html": {
                "example": "<html>fubar</html>"
              }
            },
            "description": "Success response"
          }
        },
        "summary": "POST op sorts 1st",
        "tags": [
          "Method sort"
        ]
      },
      "get": {
        "description": "Test method sort order.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-method-sort-order"
        },
        "operationId": "get-op-method-sort-order",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              },
              "text/html": {
                "example": "<html>fubar</html>"
              }
            },
            "description": "Success response"
          }
        },
        "summary": "GET op sorts 2nd",
        "tags": [
          "Method sort"
        ]
      },
      "put": {
        "description": "Test method sort order.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-method-sort-order"
        },
        "operationId": "put-op-method-sort-order",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "PUT op sorts 3rd",
        "tags": [
          "Method sort"
        ]
      },
      "delete": {
        "description": "Test method sort order.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/delete-op-method-sort-order"
        },
        "operationId": "delete-op-method-sort-order",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success response"
          }
        },
        "summary": "DELETE op sorts 4th",
        "tags": [
          "Method sort"
        ]
      }
    },
    "/op-problem-extendable": {
      "get": {
        "description": "Problem response object whose schema doesn't allow additional keys. Warning should clarify the Problem object is extendable.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-problem-extendable"
        },
        "operationId": "get-op-problem-extendable",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {
              "application/problem+json": {
                "example": {
                  "detail": "The error message.",
                  "type": "/error/uri"
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error with wrong `additionalProperties`."
          },
          "404": {
            "content": {
              "application/problem+json": {
                "example": {
                  "detail": "The error message.",
                  "type": "/error/uri"
                },
                "schema": {
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error with missing `additionalProperties`."
          }
        },
        "summary": "Problem object should be extendable",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-rate-limit-doc": {
      "get": {
        "description": "The op responds with limiting headers, but no 429 response is spec'ed.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-rate-limit-doc"
        },
        "operationId": "get-op-rate-limit-doc",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success response",
            "headers": {
              "Akamai-RateLimit-Limit": {
                "description": "RL header.",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Missing 429 response when rate limiting headers in a success response",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-rate-limit-missing": {
      "get": {
        "description": "The op responds with a 429, but specs no limiting headers are present.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-rate-limit-missing"
        },
        "operationId": "get-op-rate-limit-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Success response",
            "headers": {
              "Location": {
                "description": "Specifies a URL linking the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Too many requests."
          }
        },
        "summary": "429 response present, no rate limiting headers in 2xx",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-redundant-definitions": {
      "get": {
        "description": "This endpoint has a summary and description keys that are not shown in Readme.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-redundant-definitions"
        },
        "operationId": "get-op-redundant-definitions",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success response"
          }
        },
        "summary": "Summary and description in path",
        "tags": [
          "Redundant definitions"
        ]
      },
      "description": "This provides a description for an endpoint",
      "summary": "This summarizes the endpoint"
    },
    "/op-req-desc": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-req-desc"
        },
        "operationId": "put-op-req-desc",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "description": "We don't allow a separate description within the request body."
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted"
          }
        },
        "summary": "Operation with description in request body",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-req-multi-type": {
      "put": {
        "description": "An operation accepting multiple mime types.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-req-multi-type"
        },
        "operationId": "put-op-req-multi-type",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/csv": {
              "example": "\ufeff# Client Devices\nname,registered time,blacklisted,software,mac,reported state,reported time\nBOS-WP7XS,2020-08-13T20:20:58,false,Windows-3.2.0,02-00-4C-4F-4F-50,Health check failure,2020-08-17T18:03:42\nMacBook-Air.local,2020-08-15T02:54:44,false,Mac-3.2.0,98-01-A7-BF-AA-31,Other,2020-08-17T18:09:55\nLab-Mac-19818179159.local,2020-06-27T03:12:56,false,Mac-3.1.1,38-C9-86-3D-D0-E2,Other,2020-08-17T18:01:02\nJacks-MacBook-Pro.local,2020-08-15T02:09:04,false,Mac-3.2.0,18-65-90-DA-CB-9B,Other,2020-08-17T18:09:56\nDESKTOP-6BDEKKS,2020-08-17T15:31:20,false,Windows-3.2.0,00-0C-29-FD-77-4A,Other,2020-08-17T18:05:45\nWIN81-ENT-210,2020-06-22T19:26:14,false,Windows-3.1.1,00-0C-29-D5-22-87,Protected,2020-08-17T18:05:19",
              "schema": {
                "type": "string"
              }
            },
            "application/gzip": {
              "example": "jqihqgqwufqu"
            },
            "application/json": {
              "example": {
                "id": "foo"
              },
              "schema": {
                "description": "String tests.",
                "properties": {
                  "patterns": {
                    "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                    "properties": {
                      "patternInvalid": {
                        "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                        "pattern": "^($",
                        "type": "string"
                      },
                      "patternInvalidatesData": {
                        "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                        "pattern": "^$",
                        "type": "string"
                      },
                      "quotedBackslashed": {
                        "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "quotedUnchanged": {
                        "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                        "type": "string"
                      },
                      "unquotedBackslashed": {
                        "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "unquotedUnchanged": {
                        "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "spec-enforcer-parse-err-false-positive": {
                    "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-date-fmt-missing": {
                    "description": "TBD timestamp string lacks `format`.",
                    "type": "string"
                  },
                  "str-date-offset": {
                    "description": "TBD warn against time zone offset values in samples.",
                    "type": "string"
                  },
                  "str-enum-alph": {
                    "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                    "enum": [
                      "GEORGE",
                      "JOHN",
                      "PAUL",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-alph": {
                    "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                    "enum": [
                      "JOHN",
                      "PAUL",
                      "GEORGE",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-length": {
                    "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                    "enum": [
                      "UNPARSEABLE",
                      "PRISTINE_TOO_WIDE",
                      "DURATION",
                      "PIXEL",
                      "BYTES",
                      "SAMPLERATE",
                      "PRISTINE_TOO_TALL",
                      "PROCESS_FAILED_INTERNALLY",
                      "INVALID_POLICY"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-max": {
                    "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                    "enum": [
                      "A",
                      "B",
                      "C",
                      "D",
                      "E",
                      "F",
                      "G",
                      "H",
                      "I",
                      "J"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unlisted": {
                    "properties": {
                      "allDescribed": {
                        "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "allMissing": {
                        "description": "Raise an error because this description fails to detail any enum values.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "descriptionHasLink": {
                        "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "integerEnumMissing": {
                        "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                        "enum": [
                          400,
                          403,
                          401,
                          404
                        ],
                        "type": "integer"
                      },
                      "integerEnumPresent": {
                        "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                        "enum": [
                          400,
                          401,
                          404,
                          403
                        ],
                        "type": "integer"
                      },
                      "someMissing": {
                        "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "allDescribed",
                      "allMissing",
                      "descriptionHasLink",
                      "someMissing"
                    ],
                    "type": "object"
                  },
                  "str-enum-desc-unordered": {
                    "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                    "enum": [
                      "DEWEY",
                      "HUEY",
                      "LOUIE"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced": {
                    "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced-empty": {
                    "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-details": {
                    "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                    "enum": [
                      "CAA_MISMATCH_FAILURE",
                      "CAA_MISMATCH_RETRYING",
                      "DEPLOYED",
                      "DEPLOYING",
                      "EXPIRED_NEEDS_VALIDATION",
                      "EXPIRING_SOON_NEEDS_VALIDATION",
                      "NEEDS_ACTIVATION",
                      "PENDING",
                      "PROHIBITED_DOMAIN_FAILURE",
                      "STALLED"
                    ],
                    "type": "string"
                  },
                  "str-enum-differentiator-missing": {
                    "description": "Missing a differentiator.",
                    "properties": {
                      "isAnyOf": {
                        "anyOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      },
                      "isOneOf": {
                        "oneOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-empty": {
                    "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-integer": {
                    "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                    "enum": [
                      404,
                      500,
                      400
                    ],
                    "type": "string"
                  },
                  "str-enum-integer-range": {
                    "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                    "type": "string"
                  },
                  "str-enum-keyword-anyof": {
                    "anyOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ],
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                  },
                  "str-enum-keyword-oneof": {
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                    "oneOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ]
                  },
                  "str-enum-nullable": {
                    "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "str-enum-orphan": {
                    "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                    "enum": [
                      "ALL_ALONE"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated": {
                    "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                    "enum": [
                      "CHICO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated-case": {
                    "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                    "enum": [
                      "two-words",
                      "Two Words",
                      "TWO_WORDS",
                      "twoWords"
                    ],
                    "type": "string"
                  },
                  "str-enum-string-integer": {
                    "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                    "enum": [
                      "400",
                      "500",
                      "404"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-conflict": {
                    "description": "Data type for enum set doesn't match schema type.",
                    "properties": {
                      "integerSchemaStringEnum": {
                        "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "integer"
                      },
                      "stringSchemaIntegerEnum": {
                        "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                        "enum": [
                          400,
                          403,
                          401
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-type-mixed": {
                    "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                    "enum": [
                      400,
                      "401"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-weird": {
                    "description": "Data type for enum set is boolean or null.",
                    "properties": {
                      "booleanEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "boolean"
                      },
                      "nullEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          null
                        ],
                        "type": "boolean"
                      },
                      "numericEnum": {
                        "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                        "enum": [
                          401.2,
                          403.3,
                          400.1
                        ],
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-unspeced-desc": {
                    "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                    "type": "string"
                  },
                  "str-enum-unspeced-name": {
                    "description": "These should all likely be enums based on their names.",
                    "properties": {
                      "bolusClass": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetwork": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetworkId": {
                        "description": "This should not be flagged.",
                        "type": "string"
                      },
                      "bolusOperation": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusStatus": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusType": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "type": {
                        "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-values-malformed": {
                    "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                    "enum": [
                      "MalformedValue",
                      "valueIsMalformed",
                      "malformed",
                      "MALFORMED-VALUE",
                      "malformed_value",
                      "malformed-value",
                      "_",
                      "_PREFIXED",
                      "-",
                      "WELL_FORMED_VALUE"
                    ],
                    "type": "string"
                  },
                  "str-fmt-byte": {
                    "description": "A schema for a Base64 string should spec `format: byte`.",
                    "type": "string"
                  },
                  "str-fmt-email": {
                    "description": "The schema should spec `format: email`.",
                    "properties": {
                      "widgetEmail": {
                        "description": "The schema should spec `format: email`.",
                        "type": "string"
                      },
                      "widgetEmails": {
                        "description": "The schema should spec `format: email`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-hostname": {
                    "description": "Schema should spec `format: hostname`.",
                    "properties": {
                      "widgetHostname": {
                        "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-ip": {
                    "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                    "properties": {
                      "missingIp": {
                        "description": "This schema should spec a `format`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-timestamp": {
                    "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                    "properties": {
                      "alpha2Code": {
                        "description": "The ISO 3166 two-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "alpha3Code": {
                        "description": "The ISO 3166 three-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "createdTime": {
                        "description": "When the widget was created.",
                        "type": "string"
                      },
                      "deployedTimestamp": {
                        "description": "When the widget was deployed.",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "When the widget was updated.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-uri": {
                    "description": "Schemas should spec'ed as `format: uri`.",
                    "properties": {
                      "hostnameUri": {
                        "description": "A URI member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "hostnameUrl": {
                        "description": "A URL member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "widgetUri": {
                        "description": "A URI member with no format.",
                        "type": "string"
                      },
                      "widgetUrl": {
                        "description": "A URL member with no format.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-min-conflict-format": {
                    "description": "String schema specifies both `minLength` and `format`.",
                    "format": "date-time",
                    "minLength": 1,
                    "type": "string"
                  },
                  "str-min-missing": {
                    "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                    "type": "string",
                    "x-akamai": {
                      "labels": [
                        "Bot Manager"
                      ],
                      "status": "BETA"
                    }
                  },
                  "threshold-max": {
                    "description": "Sample string data is too long.",
                    "maxLength": 32,
                    "type": "string"
                  },
                  "threshold-min": {
                    "description": "Sample string data is zero-length, too short.",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/str.yaml"
                }
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/text": {
              "example": "All work and no play makes Jack a dull boy.  All work and no play\nmakes Jack a dull boy.  All work and no play makes Jack a dull boy.\nAll work and no play makes Jack a dull boy.  All work and no play\nmakes Jack a dull boy.  All work and no play makes Jack a dull boy.\nAll work and no play makes Jack a dull boy.  All work and no play\nmakes Jack a dull boy.  All work and no play makes Jack a dull boy.\nAll work and no play makes Jack a dull boy."
            },
            "application/xml": {
              "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<domains>\n   <domain>\n      <configuration-details>\n         <configuration-name>hdconfig1</configuration-name>\n         <hostname>hdconfig1-f.akamai-domain.net</hostname>\n         <reporting-cpcode>123456</reporting-cpcode>\n         <configuration-type>Universal Streaming Live</configuration-type>\n         <access-control-group>ABCDEF</access-control-group>\n      </configuration-details>\n      <archive-configuration>\n         <archive-name>hdconfig1 [HD Flash Live]</archive-name>\n         <archive-cpcode>987654</archive-cpcode>\n         <dvr-path>DVR</dvr-path>\n         <domain-name>hdconfig1.akamai-domain.net</domain-name>\n      </archive-configuration>\n      <advanced-configuration>Disabled</advanced-configuration>\n      <fms-backup-option>Disabled</fms-backup-option>\n      <domain-versions>\n         <domain-version>\n            <version>1</version>\n            <delivery-formats>\n               <hd-flash-1.0>Enabled</hd-flash-1.0>\n               <adobe-hds>Disabled</adobe-hds>\n               <apple-hls>Disabled</apple-hls>\n            </delivery-formats>\n            <security>\n               <hd-flash>\n                  <token-authorization>Disabled</token-authorization>\n                  <player-verification>Disabled</player-verification>\n                  <geo-blocking />\n               </hd-flash>\n               <securehd-policy-editor>Disabled</securehd-policy-editor>\n            </security>\n            <advanced-configuration>\n               <adobe-hds-advanced-config />\n               <hd-flash-advanced-config>\n                  <live-delay>14</live-delay>\n               </hd-flash-advanced-config>\n               <apple-hls-advanced-config />\n            </advanced-configuration>\n            <hd-client-support-information />\n            <author>example@domain.com</author>\n            <production-deployment-status>Activated</production-deployment-status>\n            <activate-environment>Production</activate-environment>\n         </domain-version>\n      </domain-versions>\n   </domain>\n   <domain>\n      <configuration-details>\n         <configuration-name>hdconfig2</configuration-name>\n         <hostname>hdconfig2-f.akamai-domain.net</hostname>\n         <reporting-cpcode>678901</reporting-cpcode>\n         <configuration-type>Universal Streaming Live</configuration-type>\n         <access-control-group>1-ABCDEF</access-control-group>\n      </configuration-details>\n      <archive-configuration>\n         <archive-name>hdconfig2 [HD Flash Live]</archive-name>\n         <archive-cpcode>543210</archive-cpcode>\n         <dvr-path>DVR</dvr-path>\n         <domain-name>hdconfig2.akamai-domain.net</domain-name>\n      </archive-configuration>\n      <advanced-configuration>Disabled</advanced-configuration>\n      <fms-backup-option>Disabled</fms-backup-option>\n      <domain-versions>\n         <domain-version>\n            <version>1</version>\n            <delivery-formats>\n               <hd-flash-1.0>Enabled</hd-flash-1.0>\n               <adobe-hds>Disabled</adobe-hds>\n               <apple-hls>Disabled</apple-hls>\n            </delivery-formats>\n            <security>\n               <hd-flash>\n                  <token-authorization>Disabled</token-authorization>\n                  <player-verification>Disabled</player-verification>\n                  <geo-blocking />\n               </hd-flash>\n               <securehd-policy-editor>Disabled</securehd-policy-editor>\n            </security>\n            <advanced-configuration>\n               <adobe-hds-advanced-config />\n               <hd-flash-advanced-config>\n                  <live-delay>14</live-delay>\n               </hd-flash-advanced-config>\n               <apple-hls-advanced-config />\n            </advanced-configuration>\n            <hd-client-support-information />\n            <author>example@domain.com</author>\n            <production-deployment-status>Activated</production-deployment-status>\n            <activate-environment>Production</activate-environment>\n         </domain-version>\n      </domain-versions>\n   </domain>\n</domains>"
            },
            "application/zip": {
              "example": "huqwguqwqwdi",
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "text/csv": {
              "example": "\ufeff# Client Devices\nname,registered time,blacklisted,software,mac,reported state,reported time\nBOS-WP7XS,2020-08-13T20:20:58,false,Windows-3.2.0,02-00-4C-4F-4F-50,Health check failure,2020-08-17T18:03:42\nMacBook-Air.local,2020-08-15T02:54:44,false,Mac-3.2.0,98-01-A7-BF-AA-31,Other,2020-08-17T18:09:55\nLab-Mac-19818179159.local,2020-06-27T03:12:56,false,Mac-3.1.1,38-C9-86-3D-D0-E2,Other,2020-08-17T18:01:02\nJacks-MacBook-Pro.local,2020-08-15T02:09:04,false,Mac-3.2.0,18-65-90-DA-CB-9B,Other,2020-08-17T18:09:56\nDESKTOP-6BDEKKS,2020-08-17T15:31:20,false,Windows-3.2.0,00-0C-29-FD-77-4A,Other,2020-08-17T18:05:45\nWIN81-ENT-210,2020-06-22T19:26:14,false,Windows-3.1.1,00-0C-29-D5-22-87,Protected,2020-08-17T18:05:19"
            },
            "text/dns": {
              "example": "\nexample.com.        10000    IN SOA ns1.akamaidns.com. webmaster.example.com. 1 28800 14400 2419200 86400\nexample.com.        10000    IN NS  ns1.akamaidns.com.\nexample.com.        10000    IN NS  ns2.akamaidns.com.\nexample.com.            300 IN  A   10.0.0.1\nexample.com.            300 IN  A   10.0.0.2\nwww.example.com.        300 IN  A   10.0.0.1\nwww.example.com.        300 IN  A   10.0.0.2",
              "schema": {
                "type": "string"
              }
            },
            "text/html": {
              "example": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  ...\n</html>"
            },
            "text/plain": {
              "example": "All work and no play...",
              "schema": {
                "type": "string"
              }
            },
            "text/xml": {
              "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<domains>\n   <domain>\n      <configuration-details>\n         <configuration-name>hdconfig1</configuration-name>\n         <hostname>hdconfig1-f.akamai-domain.net</hostname>\n         <reporting-cpcode>123456</reporting-cpcode>\n         <configuration-type>Universal Streaming Live</configuration-type>\n         <access-control-group>ABCDEF</access-control-group>\n      </configuration-details>\n      <archive-configuration>\n         <archive-name>hdconfig1 [HD Flash Live]</archive-name>\n         <archive-cpcode>987654</archive-cpcode>\n         <dvr-path>DVR</dvr-path>\n         <domain-name>hdconfig1.akamai-domain.net</domain-name>\n      </archive-configuration>\n      <advanced-configuration>Disabled</advanced-configuration>\n      <fms-backup-option>Disabled</fms-backup-option>\n      <domain-versions>\n         <domain-version>\n            <version>1</version>\n            <delivery-formats>\n               <hd-flash-1.0>Enabled</hd-flash-1.0>\n               <adobe-hds>Disabled</adobe-hds>\n               <apple-hls>Disabled</apple-hls>\n            </delivery-formats>\n            <security>\n               <hd-flash>\n                  <token-authorization>Disabled</token-authorization>\n                  <player-verification>Disabled</player-verification>\n                  <geo-blocking />\n               </hd-flash>\n               <securehd-policy-editor>Disabled</securehd-policy-editor>\n            </security>\n            <advanced-configuration>\n               <adobe-hds-advanced-config />\n               <hd-flash-advanced-config>\n                  <live-delay>14</live-delay>\n               </hd-flash-advanced-config>\n               <apple-hls-advanced-config />\n            </advanced-configuration>\n            <hd-client-support-information />\n            <author>example@domain.com</author>\n            <production-deployment-status>Activated</production-deployment-status>\n            <activate-environment>Production</activate-environment>\n         </domain-version>\n      </domain-versions>\n   </domain>\n   <domain>\n      <configuration-details>\n         <configuration-name>hdconfig2</configuration-name>\n         <hostname>hdconfig2-f.akamai-domain.net</hostname>\n         <reporting-cpcode>678901</reporting-cpcode>\n         <configuration-type>Universal Streaming Live</configuration-type>\n         <access-control-group>1-ABCDEF</access-control-group>\n      </configuration-details>\n      <archive-configuration>\n         <archive-name>hdconfig2 [HD Flash Live]</archive-name>\n         <archive-cpcode>543210</archive-cpcode>\n         <dvr-path>DVR</dvr-path>\n         <domain-name>hdconfig2.akamai-domain.net</domain-name>\n      </archive-configuration>\n      <advanced-configuration>Disabled</advanced-configuration>\n      <fms-backup-option>Disabled</fms-backup-option>\n      <domain-versions>\n         <domain-version>\n            <version>1</version>\n            <delivery-formats>\n               <hd-flash-1.0>Enabled</hd-flash-1.0>\n               <adobe-hds>Disabled</adobe-hds>\n               <apple-hls>Disabled</apple-hls>\n            </delivery-formats>\n            <security>\n               <hd-flash>\n                  <token-authorization>Disabled</token-authorization>\n                  <player-verification>Disabled</player-verification>\n                  <geo-blocking />\n               </hd-flash>\n               <securehd-policy-editor>Disabled</securehd-policy-editor>\n            </security>\n            <advanced-configuration>\n               <adobe-hds-advanced-config />\n               <hd-flash-advanced-config>\n                  <live-delay>14</live-delay>\n               </hd-flash-advanced-config>\n               <apple-hls-advanced-config />\n            </advanced-configuration>\n            <hd-client-support-information />\n            <author>example@domain.com</author>\n            <production-deployment-status>Activated</production-deployment-status>\n            <activate-environment>Production</activate-environment>\n         </domain-version>\n      </domain-versions>\n   </domain>\n</domains>"
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Multi mime type",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-req-multi-type-version": {
      "put": {
        "description": "An operation accepting multiple mime types versions",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-req-multi-type-version"
        },
        "operationId": "put-op-req-multi-type-version",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.akamai.xyz.v1+json": {
              "example": {
                "id": "foo"
              },
              "schema": {
                "description": "String tests.",
                "properties": {
                  "patterns": {
                    "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                    "properties": {
                      "patternInvalid": {
                        "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                        "pattern": "^($",
                        "type": "string"
                      },
                      "patternInvalidatesData": {
                        "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                        "pattern": "^$",
                        "type": "string"
                      },
                      "quotedBackslashed": {
                        "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "quotedUnchanged": {
                        "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                        "type": "string"
                      },
                      "unquotedBackslashed": {
                        "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "unquotedUnchanged": {
                        "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "spec-enforcer-parse-err-false-positive": {
                    "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-date-fmt-missing": {
                    "description": "TBD timestamp string lacks `format`.",
                    "type": "string"
                  },
                  "str-date-offset": {
                    "description": "TBD warn against time zone offset values in samples.",
                    "type": "string"
                  },
                  "str-enum-alph": {
                    "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                    "enum": [
                      "GEORGE",
                      "JOHN",
                      "PAUL",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-alph": {
                    "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                    "enum": [
                      "JOHN",
                      "PAUL",
                      "GEORGE",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-length": {
                    "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                    "enum": [
                      "UNPARSEABLE",
                      "PRISTINE_TOO_WIDE",
                      "DURATION",
                      "PIXEL",
                      "BYTES",
                      "SAMPLERATE",
                      "PRISTINE_TOO_TALL",
                      "PROCESS_FAILED_INTERNALLY",
                      "INVALID_POLICY"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-max": {
                    "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                    "enum": [
                      "A",
                      "B",
                      "C",
                      "D",
                      "E",
                      "F",
                      "G",
                      "H",
                      "I",
                      "J"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unlisted": {
                    "properties": {
                      "allDescribed": {
                        "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "allMissing": {
                        "description": "Raise an error because this description fails to detail any enum values.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "descriptionHasLink": {
                        "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "integerEnumMissing": {
                        "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                        "enum": [
                          400,
                          403,
                          401,
                          404
                        ],
                        "type": "integer"
                      },
                      "integerEnumPresent": {
                        "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                        "enum": [
                          400,
                          401,
                          404,
                          403
                        ],
                        "type": "integer"
                      },
                      "someMissing": {
                        "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "allDescribed",
                      "allMissing",
                      "descriptionHasLink",
                      "someMissing"
                    ],
                    "type": "object"
                  },
                  "str-enum-desc-unordered": {
                    "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                    "enum": [
                      "DEWEY",
                      "HUEY",
                      "LOUIE"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced": {
                    "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced-empty": {
                    "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-details": {
                    "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                    "enum": [
                      "CAA_MISMATCH_FAILURE",
                      "CAA_MISMATCH_RETRYING",
                      "DEPLOYED",
                      "DEPLOYING",
                      "EXPIRED_NEEDS_VALIDATION",
                      "EXPIRING_SOON_NEEDS_VALIDATION",
                      "NEEDS_ACTIVATION",
                      "PENDING",
                      "PROHIBITED_DOMAIN_FAILURE",
                      "STALLED"
                    ],
                    "type": "string"
                  },
                  "str-enum-differentiator-missing": {
                    "description": "Missing a differentiator.",
                    "properties": {
                      "isAnyOf": {
                        "anyOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      },
                      "isOneOf": {
                        "oneOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-empty": {
                    "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-integer": {
                    "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                    "enum": [
                      404,
                      500,
                      400
                    ],
                    "type": "string"
                  },
                  "str-enum-integer-range": {
                    "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                    "type": "string"
                  },
                  "str-enum-keyword-anyof": {
                    "anyOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ],
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                  },
                  "str-enum-keyword-oneof": {
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                    "oneOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ]
                  },
                  "str-enum-nullable": {
                    "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "str-enum-orphan": {
                    "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                    "enum": [
                      "ALL_ALONE"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated": {
                    "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                    "enum": [
                      "CHICO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated-case": {
                    "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                    "enum": [
                      "two-words",
                      "Two Words",
                      "TWO_WORDS",
                      "twoWords"
                    ],
                    "type": "string"
                  },
                  "str-enum-string-integer": {
                    "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                    "enum": [
                      "400",
                      "500",
                      "404"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-conflict": {
                    "description": "Data type for enum set doesn't match schema type.",
                    "properties": {
                      "integerSchemaStringEnum": {
                        "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "integer"
                      },
                      "stringSchemaIntegerEnum": {
                        "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                        "enum": [
                          400,
                          403,
                          401
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-type-mixed": {
                    "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                    "enum": [
                      400,
                      "401"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-weird": {
                    "description": "Data type for enum set is boolean or null.",
                    "properties": {
                      "booleanEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "boolean"
                      },
                      "nullEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          null
                        ],
                        "type": "boolean"
                      },
                      "numericEnum": {
                        "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                        "enum": [
                          401.2,
                          403.3,
                          400.1
                        ],
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-unspeced-desc": {
                    "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                    "type": "string"
                  },
                  "str-enum-unspeced-name": {
                    "description": "These should all likely be enums based on their names.",
                    "properties": {
                      "bolusClass": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetwork": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetworkId": {
                        "description": "This should not be flagged.",
                        "type": "string"
                      },
                      "bolusOperation": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusStatus": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusType": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "type": {
                        "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-values-malformed": {
                    "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                    "enum": [
                      "MalformedValue",
                      "valueIsMalformed",
                      "malformed",
                      "MALFORMED-VALUE",
                      "malformed_value",
                      "malformed-value",
                      "_",
                      "_PREFIXED",
                      "-",
                      "WELL_FORMED_VALUE"
                    ],
                    "type": "string"
                  },
                  "str-fmt-byte": {
                    "description": "A schema for a Base64 string should spec `format: byte`.",
                    "type": "string"
                  },
                  "str-fmt-email": {
                    "description": "The schema should spec `format: email`.",
                    "properties": {
                      "widgetEmail": {
                        "description": "The schema should spec `format: email`.",
                        "type": "string"
                      },
                      "widgetEmails": {
                        "description": "The schema should spec `format: email`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-hostname": {
                    "description": "Schema should spec `format: hostname`.",
                    "properties": {
                      "widgetHostname": {
                        "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-ip": {
                    "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                    "properties": {
                      "missingIp": {
                        "description": "This schema should spec a `format`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-timestamp": {
                    "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                    "properties": {
                      "alpha2Code": {
                        "description": "The ISO 3166 two-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "alpha3Code": {
                        "description": "The ISO 3166 three-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "createdTime": {
                        "description": "When the widget was created.",
                        "type": "string"
                      },
                      "deployedTimestamp": {
                        "description": "When the widget was deployed.",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "When the widget was updated.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-uri": {
                    "description": "Schemas should spec'ed as `format: uri`.",
                    "properties": {
                      "hostnameUri": {
                        "description": "A URI member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "hostnameUrl": {
                        "description": "A URL member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "widgetUri": {
                        "description": "A URI member with no format.",
                        "type": "string"
                      },
                      "widgetUrl": {
                        "description": "A URL member with no format.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-min-conflict-format": {
                    "description": "String schema specifies both `minLength` and `format`.",
                    "format": "date-time",
                    "minLength": 1,
                    "type": "string"
                  },
                  "str-min-missing": {
                    "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                    "type": "string",
                    "x-akamai": {
                      "labels": [
                        "Bot Manager"
                      ],
                      "status": "BETA"
                    }
                  },
                  "threshold-max": {
                    "description": "Sample string data is too long.",
                    "maxLength": 32,
                    "type": "string"
                  },
                  "threshold-min": {
                    "description": "Sample string data is zero-length, too short.",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/str.yaml"
                }
              }
            },
            "application/vnd.akamai.xyz.v2+json": {
              "example": {
                "id": "foo"
              },
              "schema": {
                "description": "String tests.",
                "properties": {
                  "patterns": {
                    "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                    "properties": {
                      "patternInvalid": {
                        "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                        "pattern": "^($",
                        "type": "string"
                      },
                      "patternInvalidatesData": {
                        "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                        "pattern": "^$",
                        "type": "string"
                      },
                      "quotedBackslashed": {
                        "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "quotedUnchanged": {
                        "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                        "type": "string"
                      },
                      "unquotedBackslashed": {
                        "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      },
                      "unquotedUnchanged": {
                        "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "spec-enforcer-parse-err-false-positive": {
                    "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-date-fmt-missing": {
                    "description": "TBD timestamp string lacks `format`.",
                    "type": "string"
                  },
                  "str-date-offset": {
                    "description": "TBD warn against time zone offset values in samples.",
                    "type": "string"
                  },
                  "str-enum-alph": {
                    "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                    "enum": [
                      "GEORGE",
                      "JOHN",
                      "PAUL",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-alph": {
                    "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                    "enum": [
                      "JOHN",
                      "PAUL",
                      "GEORGE",
                      "RINGO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-length": {
                    "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                    "enum": [
                      "UNPARSEABLE",
                      "PRISTINE_TOO_WIDE",
                      "DURATION",
                      "PIXEL",
                      "BYTES",
                      "SAMPLERATE",
                      "PRISTINE_TOO_TALL",
                      "PROCESS_FAILED_INTERNALLY",
                      "INVALID_POLICY"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-max": {
                    "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                    "enum": [
                      "A",
                      "B",
                      "C",
                      "D",
                      "E",
                      "F",
                      "G",
                      "H",
                      "I",
                      "J"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unlisted": {
                    "properties": {
                      "allDescribed": {
                        "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "allMissing": {
                        "description": "Raise an error because this description fails to detail any enum values.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "descriptionHasLink": {
                        "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      },
                      "integerEnumMissing": {
                        "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                        "enum": [
                          400,
                          403,
                          401,
                          404
                        ],
                        "type": "integer"
                      },
                      "integerEnumPresent": {
                        "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                        "enum": [
                          400,
                          401,
                          404,
                          403
                        ],
                        "type": "integer"
                      },
                      "someMissing": {
                        "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          "HARPO",
                          "ZEPPO"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "allDescribed",
                      "allMissing",
                      "descriptionHasLink",
                      "someMissing"
                    ],
                    "type": "object"
                  },
                  "str-enum-desc-unordered": {
                    "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                    "enum": [
                      "DEWEY",
                      "HUEY",
                      "LOUIE"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced": {
                    "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-desc-unspeced-empty": {
                    "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-details": {
                    "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                    "enum": [
                      "CAA_MISMATCH_FAILURE",
                      "CAA_MISMATCH_RETRYING",
                      "DEPLOYED",
                      "DEPLOYING",
                      "EXPIRED_NEEDS_VALIDATION",
                      "EXPIRING_SOON_NEEDS_VALIDATION",
                      "NEEDS_ACTIVATION",
                      "PENDING",
                      "PROHIBITED_DOMAIN_FAILURE",
                      "STALLED"
                    ],
                    "type": "string"
                  },
                  "str-enum-differentiator-missing": {
                    "description": "Missing a differentiator.",
                    "properties": {
                      "isAnyOf": {
                        "anyOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      },
                      "isOneOf": {
                        "oneOf": [
                          {
                            "additionalProperties": true,
                            "description": "Basic schema tests.",
                            "properties": {
                              "badly formatted key": {
                                "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                "type": "boolean"
                              },
                              "enumValue": {
                                "description": "Unclear what this tests: `Value1`.",
                                "enum": [
                                  "Value1"
                                ],
                                "type": "string"
                              },
                              "false": {
                                "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                "type": "string"
                              },
                              "lang-desc-link-invalid": {
                                "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                "type": "string"
                              },
                              "lang-desc-numbered-slug": {
                                "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                "type": "string"
                              },
                              "openapi-html-comment": {
                                "description": "<!-- Commented out content -->",
                                "type": "boolean"
                              },
                              "openapi-schema-ref-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` for contextual doc throws a warning."
                                  },
                                  {
                                    "description": "This schema is $ref linked.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                ]
                              },
                              "openapi-schema-ref-conflict": {
                                "additionalProperties": false,
                                "default": false,
                                "description": "This schema is $ref linked.",
                                "type": "boolean",
                                "x-akamai": {
                                  "file-path": "schemas/linked-schema.yaml"
                                }
                              },
                              "openapi-schema-ref-conflict-allof": {
                                "allOf": [
                                  {
                                    "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                  },
                                  {
                                    "default": false,
                                    "description": "This schema is $ref linked.",
                                    "nullable": true,
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  {
                                    "description": "Alternative desc"
                                  }
                                ]
                              },
                              "openapi-schema-ref-overload": {
                                "description": "Test different ways to arrange descriptions along with $ref links.",
                                "properties": {
                                  "refOrderedCorrectly": {
                                    "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  },
                                  "refOrderedIncorrectly": {
                                    "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                    "type": "boolean",
                                    "x-akamai": {
                                      "file-path": "schemas/linked-schema.yaml"
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "random-yaml": {
                                "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO"
                                ],
                                "type": "string"
                              },
                              "ref-overload": {
                                "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "readOnly": true,
                                "type": "string"
                              },
                              "schema-desc-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                "type": "string"
                              },
                              "schema-desc-malformed-para": {
                                "description": "TBD description has punctuation and is a full sentence.",
                                "type": "string"
                              },
                              "schema-desc-missing": {
                                "type": "string"
                              },
                              "schema-example-redundant": {
                                "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                "example": "This is messed up!",
                                "type": "string"
                              },
                              "schema-get-put-mismatch": {
                                "description": "TBD GET rsp & PUT req should link same schema.",
                                "type": "string"
                              },
                              "schema-invalid-against-sample": {
                                "additionalProperties": false,
                                "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                "properties": {
                                  "bar": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  },
                                  "foo": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "foo",
                                  "bar"
                                ],
                                "type": "object"
                              },
                              "schema-name-case-sensitive": {
                                "description": "Complain about all these schema names varying in case.",
                                "properties": {
                                  "BADSCHEMANAME": {
                                    "type": "boolean"
                                  },
                                  "BadSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badSchemaName": {
                                    "type": "boolean"
                                  },
                                  "badschemaname": {
                                    "type": "boolean"
                                  },
                                  "sourceIP": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-malformed": {
                                "description": "Complain about this schema name not being camelCase.",
                                "type": "string"
                              },
                              "schema-name-misspelled": {
                                "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                "properties": {
                                  "certficateName": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  },
                                  "operationid": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "schema-name-parroted": {
                                "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                "type": "string"
                              },
                              "schema-operation-links-self": {
                                "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                "type": "string"
                              },
                              "schema-orphaned": {
                                "description": "TBD schema file is an unreferenced orphan.",
                                "type": "string"
                              },
                              "schema-poly-anonymous": {
                                "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                "type": "string"
                              },
                              "schema-redundant": {
                                "description": "TBD redundant schema, normalized for description.",
                                "type": "string"
                              },
                              "schema-redundant-membership": {
                                "description": "TBD schema is redundant, same set of members.",
                                "type": "string"
                              },
                              "schema-type-missing": {
                                "description": "This schema lacks a `type`."
                              },
                              "svc-tally-named-obj-keys": {
                                "description": "Test variance among same-named object schemas' set of defined members.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines all members.",
                                        "properties": {
                                          "george": {
                                            "type": "string"
                                          },
                                          "john": {
                                            "type": "string"
                                          },
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "beatles": {
                                        "description": "Defines members still alive.",
                                        "properties": {
                                          "paul": {
                                            "type": "string"
                                          },
                                          "ringo": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-obj-keys": {
                                "description": "Complain that this set of keys is defined in more than one schema file.",
                                "properties": {
                                  "chico": {
                                    "description": "Chico description.",
                                    "type": "string"
                                  },
                                  "groucho": {
                                    "description": "Groucho description.",
                                    "type": "string"
                                  },
                                  "harpo": {
                                    "description": "Harpo description.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-desc": {
                                "description": "Test variance among schema descriptions.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All work and no play makes Jeremy a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingDescription": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingDescription": {
                                        "description": "All twerk and no play makes Jack a dull boy.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-enum-values": {
                                "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                "properties": {
                                  "batchFour": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchOne": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "HARPO",
                                          "CHICO",
                                          "ZEPPO",
                                          "GUMMO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchThree": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "GROUCHO",
                                          "CHICO",
                                          "HARPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingEnumValues": {
                                        "description": "This schema's set of enum values varies from another with the same name.",
                                        "enum": [
                                          "CHICO",
                                          "GROUCHO",
                                          "GUMMO",
                                          "HARPO",
                                          "ZEPPO"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "svc-tally-schema-type": {
                                "description": "Test variance among schema types.",
                                "properties": {
                                  "batchOne": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "batchTwo": {
                                    "properties": {
                                      "varyingType": {
                                        "description": "This schema's type varies from another with the same name.",
                                        "items": {
                                          "description": "This test needs to ignore the contents of `items`.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/schema.yaml"
                            }
                          },
                          {
                            "description": "Numeric tests.",
                            "properties": {
                              "num-epoch": {
                                "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                "properties": {
                                  "activationDate": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  },
                                  "activationTime": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "num-max": {
                                "description": "Specifies a `maximum` value.",
                                "maximum": 90,
                                "type": "integer"
                              },
                              "num-min-missing": {
                                "description": "This numeric schema doesn't specify a `minimum` value.",
                                "type": "integer"
                              },
                              "num-min-missing-enum": {
                                "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                "enum": [
                                  1,
                                  2
                                ],
                                "type": "integer"
                              },
                              "num-not-int-kw": {
                                "description": "Nested members are mistyped as `number`.",
                                "properties": {
                                  "policyId": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyVersion": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-not-int-other": {
                                "description": "Nested members may be mistyped as `number`.",
                                "properties": {
                                  "policyLimit": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  },
                                  "policyThreshold": {
                                    "description": "All work and no play makes Jack a dull boy.",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "num-pct-lacks-max": {
                                "description": "This is described as a percent, but spec lacks a maximum.",
                                "type": "integer"
                              },
                              "threshold-max": {
                                "description": "Sample integer data is too high.",
                                "maximum": 360,
                                "type": "integer"
                              },
                              "threshold-min": {
                                "description": "Sample integer data is too low.",
                                "minimum": 1,
                                "type": "integer"
                              }
                            },
                            "type": "object",
                            "x-akamai": {
                              "file-path": "schemas/num.yaml"
                            }
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-empty": {
                    "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      ""
                    ],
                    "type": "string"
                  },
                  "str-enum-integer": {
                    "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                    "enum": [
                      404,
                      500,
                      400
                    ],
                    "type": "string"
                  },
                  "str-enum-integer-range": {
                    "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                    "type": "string"
                  },
                  "str-enum-keyword-anyof": {
                    "anyOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ],
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                  },
                  "str-enum-keyword-oneof": {
                    "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                    "oneOf": [
                      {
                        "minLength": 1,
                        "title": "Individual user",
                        "type": "string"
                      },
                      {
                        "enum": [
                          "users_in_this_account",
                          "internal_users"
                        ],
                        "title": "Group of users",
                        "type": "string"
                      }
                    ]
                  },
                  "str-enum-nullable": {
                    "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "str-enum-orphan": {
                    "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                    "enum": [
                      "ALL_ALONE"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated": {
                    "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                    "enum": [
                      "CHICO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  },
                  "str-enum-repeated-case": {
                    "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                    "enum": [
                      "two-words",
                      "Two Words",
                      "TWO_WORDS",
                      "twoWords"
                    ],
                    "type": "string"
                  },
                  "str-enum-string-integer": {
                    "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                    "enum": [
                      "400",
                      "500",
                      "404"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-conflict": {
                    "description": "Data type for enum set doesn't match schema type.",
                    "properties": {
                      "integerSchemaStringEnum": {
                        "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "integer"
                      },
                      "stringSchemaIntegerEnum": {
                        "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                        "enum": [
                          400,
                          403,
                          401
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-type-mixed": {
                    "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                    "enum": [
                      400,
                      "401"
                    ],
                    "type": "string"
                  },
                  "str-enum-type-weird": {
                    "description": "Data type for enum set is boolean or null.",
                    "properties": {
                      "booleanEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          true,
                          false
                        ],
                        "type": "boolean"
                      },
                      "nullEnum": {
                        "description": "No need to spec booleans or `null` as enum.",
                        "enum": [
                          "GROUCHO",
                          "CHICO",
                          null
                        ],
                        "type": "boolean"
                      },
                      "numericEnum": {
                        "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                        "enum": [
                          401.2,
                          403.3,
                          400.1
                        ],
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-unspeced-desc": {
                    "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                    "type": "string"
                  },
                  "str-enum-unspeced-name": {
                    "description": "These should all likely be enums based on their names.",
                    "properties": {
                      "bolusClass": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetwork": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusNetworkId": {
                        "description": "This should not be flagged.",
                        "type": "string"
                      },
                      "bolusOperation": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusStatus": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "bolusType": {
                        "description": "Most likely an enum, no?",
                        "type": "string"
                      },
                      "type": {
                        "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-enum-values-malformed": {
                    "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                    "enum": [
                      "MalformedValue",
                      "valueIsMalformed",
                      "malformed",
                      "MALFORMED-VALUE",
                      "malformed_value",
                      "malformed-value",
                      "_",
                      "_PREFIXED",
                      "-",
                      "WELL_FORMED_VALUE"
                    ],
                    "type": "string"
                  },
                  "str-fmt-byte": {
                    "description": "A schema for a Base64 string should spec `format: byte`.",
                    "type": "string"
                  },
                  "str-fmt-email": {
                    "description": "The schema should spec `format: email`.",
                    "properties": {
                      "widgetEmail": {
                        "description": "The schema should spec `format: email`.",
                        "type": "string"
                      },
                      "widgetEmails": {
                        "description": "The schema should spec `format: email`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-hostname": {
                    "description": "Schema should spec `format: hostname`.",
                    "properties": {
                      "widgetHostname": {
                        "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-ip": {
                    "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                    "properties": {
                      "missingIp": {
                        "description": "This schema should spec a `format`.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-timestamp": {
                    "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                    "properties": {
                      "alpha2Code": {
                        "description": "The ISO 3166 two-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "alpha3Code": {
                        "description": "The ISO 3166 three-letter code for the region.",
                        "minLength": 1,
                        "type": "string"
                      },
                      "createdTime": {
                        "description": "When the widget was created.",
                        "type": "string"
                      },
                      "deployedTimestamp": {
                        "description": "When the widget was deployed.",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "When the widget was updated.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-fmt-uri": {
                    "description": "Schemas should spec'ed as `format: uri`.",
                    "properties": {
                      "hostnameUri": {
                        "description": "A URI member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "hostnameUrl": {
                        "description": "A URL member with a wrong format.",
                        "format": "hostname",
                        "type": "string"
                      },
                      "widgetUri": {
                        "description": "A URI member with no format.",
                        "type": "string"
                      },
                      "widgetUrl": {
                        "description": "A URL member with no format.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "str-min-conflict-format": {
                    "description": "String schema specifies both `minLength` and `format`.",
                    "format": "date-time",
                    "minLength": 1,
                    "type": "string"
                  },
                  "str-min-missing": {
                    "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                    "type": "string",
                    "x-akamai": {
                      "labels": [
                        "Bot Manager"
                      ],
                      "status": "BETA"
                    }
                  },
                  "threshold-max": {
                    "description": "Sample string data is too long.",
                    "maxLength": 32,
                    "type": "string"
                  },
                  "threshold-min": {
                    "description": "Sample string data is zero-length, too short.",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/str.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Multi mime type versioned",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-req-optional": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-req-optional"
        },
        "operationId": "put-op-req-optional",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted"
          }
        },
        "summary": "A PUT operation with data not required",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-req-patch-data-missing": {
      "patch": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-req-patch-data-missing"
        },
        "operationId": "patch-op-req-patch-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted"
          }
        },
        "summary": "A PATCH operation with no data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-req-put-data-missing": {
      "put": {
        "description": "Raise an `op-req-put-data-missing` error.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-req-put-data-missing"
        },
        "operationId": "put-op-req-put-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted"
          }
        },
        "summary": "A PUT operation specifies no data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-schema-asymmetry": {
      "get": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-schema-asymmetry"
        },
        "operationId": "get-op-schema-asymmetry",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "GET op whose schema mismatches PUT",
        "tags": [
          "Mismatching schemas"
        ]
      },
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-schema-asymmetry"
        },
        "operationId": "put-op-schema-asymmetry",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "PUT op whose schema mismatches GET",
        "tags": [
          "Mismatching schemas"
        ]
      }
    },
    "/op-schema-asymmetry-inline": {
      "get": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-schema-asymmetry-inline"
        },
        "operationId": "get-op-schema-asymmetry-inline",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "GET op whose schema mismatches inline PUT",
        "tags": [
          "Mismatching schemas"
        ]
      },
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-schema-asymmetry-inline"
        },
        "operationId": "put-op-schema-asymmetry-inline",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Schema defined inline doesn't match GET response schema file.",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Success response"
          }
        },
        "summary": "PUT op whose inline schema mismatches GET",
        "tags": [
          "Mismatching schemas"
        ]
      }
    },
    "/op-schema-missing": {
      "put": {
        "description": "The op has no corresponding schema to its examples.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-schema-missing"
        },
        "operationId": "put-op-schema-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              }
            },
            "text/html": {
              "example": "<html>fubar</html>"
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                }
              },
              "text/html": {
                "example": "<html>fubar</html>"
              }
            },
            "description": "Success response"
          }
        },
        "summary": "No schema for an example in the request body",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-status": {
      "post": {
        "deprecated": true,
        "description": "__Deprecated__ Renders with prefixed icon in doc and API summary listings.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-op-status-deprecated"
        },
        "operationId": "post-op-status-deprecated",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation with DEPRECATED status",
        "tags": [
          "Status"
        ],
        "x-akamai": {
          "status": "DEPRECATED"
        }
      },
      "get": {
        "description": "This is a control. No icons appear in doc or API summary listings.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-status-deprecated"
        },
        "operationId": "get-op-status-deprecated",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation with no status",
        "tags": [
          "Status"
        ]
      },
      "put": {
        "description": "__Limited availability__ Renders with prefixed icon in doc and API summary listings.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-status-la"
        },
        "operationId": "put-op-status-la",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation with LA status",
        "tags": [
          "Status"
        ],
        "x-akamai": {
          "status": "LA"
        }
      },
      "delete": {
        "description": "__Beta__ Renders with prefixed icon in doc and API summary listings.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/delete-op-status-beta"
        },
        "operationId": "delete-op-status-beta",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation with BETA status",
        "tags": [
          "Status"
        ],
        "x-akamai": {
          "status": "BETA"
        }
      }
    },
    "/op-status/invalid": {
      "patch": {
        "description": "No icon renders in op doc or API listing. Should throw a blocking error?",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-status-la"
        },
        "operationId": "patch-op-status-la",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Operation with invalid status value",
        "tags": [
          "Status"
        ],
        "x-akamai": {
          "status": "limited availability"
        }
      }
    },
    "/op-suppress-account-switch": {
      "get": {
        "description": "Don't add the accountSwitch param to the method call if `supports-account-switch-key` is `false`\nand the auth type is set to EdgeGrid.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-suppress-account-switch"
        },
        "operationId": "get-op-suppress-account-switch",
        "parameters": [],
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          }
        },
        "summary": "Suppress method's account switch query param",
        "tags": [
          "Operations"
        ],
        "x-akamai": {
          "supports-account-switch-key": false
        }
      }
    },
    "/op-tags-matches-op-title": {
      "get": {
        "description": "The tag matches the summary.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-tags-matches-op-title"
        },
        "operationId": "get-op-tags-matches-op-title",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "The tag matches the op's summary."
          }
        },
        "summary": "Get an object",
        "tags": [
          "Get an object"
        ]
      }
    },
    "/op-tags-multi": {
      "get": {
        "description": "Multiple tags for an operation.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-tags-multi"
        },
        "operationId": "get-op-tags-multi",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "The op for this response has more than one tag."
          }
        },
        "summary": "Multiple tags",
        "tags": [
          "Operations",
          "Redundant"
        ]
      }
    },
    "/op-tags-punctuated": {
      "get": {
        "description": "Trailing punctuation after an operation tag.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-tags-punctuated"
        },
        "operationId": "get-op-tags-punctuated",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "The op for this response has a punctuated tag."
          }
        },
        "summary": "Punctuated tags",
        "tags": [
          "Operations."
        ]
      }
    },
    "/op-title-delete": {
      "delete": {
        "description": "The tag matches the summary.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/delete-op-title-delete"
        },
        "operationId": "delete-op-title-delete",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "The tag matches the op's summary."
          }
        },
        "summary": "Deleting an operation",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-title-get-plural/plurals": {
      "get": {
        "description": "The summary suggests a GET on a collection.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-title-get-plural"
        },
        "operationId": "get-op-title-get-plural",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "GET descriptor on a collection",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-title-get-singular/{inlinePathParamId}": {
      "get": {
        "description": "Operation descriptors suggest plural collection for a single object.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-title-get-singular"
        },
        "operationId": "get-op-title-get-singular",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          }
        },
        "summary": "Plural descriptors on a GET. List an object",
        "tags": [
          "Doc issues"
        ]
      },
      "parameters": [
        {
          "description": "This inline path parameter throws a warning because it's defined inline.",
          "in": "path",
          "name": "inlinePathParamId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-akamai": {
            "file-path": "parameters/externalPathParam.yaml"
          }
        }
      ]
    },
    "/op-title-is-sentence-case": {
      "get": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-title-is-sentence-case"
        },
        "operationId": "get-op-title-is-sentence-case",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted."
          }
        },
        "summary": "An Operation in Capitalized Title Case",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-title-punctuated": {
      "get": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-punctuated"
        },
        "operationId": "get-op-punctuated",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted."
          }
        },
        "summary": "An operation title is mistakenly punctuated.",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-title-put": {
      "put": {
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-title-put"
        },
        "operationId": "put-op-title-put",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Successfully deleted"
          }
        },
        "summary": "A PUT Operation Title missing put_descriptors",
        "tags": [
          "Doc issues"
        ]
      }
    },
    "/op-title-redundant": {
      "get": {
        "description": "Log redundant operation title as error.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-title-redundant"
        },
        "operationId": "get-op-title-redundant",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          },
          "400": {
            "content": {
              "application/problem+json": {
                "example": {
                  "detail": "All work and no play makes Jack a dull boy."
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "detail": {
                      "description": "All work and no play makes Jack a dull boy.",
                      "type": "string"
                    },
                    "errors": {
                      "description": "Nested errors.",
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "detail": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "status": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "integer"
                          },
                          "title": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          },
                          "type": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "detail",
                          "title",
                          "type",
                          "status"
                        ],
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/error-nested.yaml"
                        }
                      },
                      "type": "array"
                    },
                    "status": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "integer"
                    },
                    "title": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    },
                    "type": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "detail",
                    "title",
                    "type",
                    "status"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/error.yaml"
                  }
                }
              }
            },
            "description": "The user doesn't have access to rate policy in this security configuration.",
            "x-akamai": {
              "file-path": "errors/400.yaml"
            }
          },
          "500": {
            "content": {},
            "description": "Inline error"
          }
        },
        "summary": "Redundant operation title",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/op-title-redundant-2": {
      "get": {
        "description": "Log redundant operation title as error.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-title-redundant-2"
        },
        "operationId": "get-op-title-redundant-2",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          }
        },
        "summary": "Redundant operation title",
        "tags": [
          "OpenAPI issues"
        ]
      }
    },
    "/openapi-enforcer-error": {
      "post": {
        "description": "Serious, blocking mismatches between schema and sample data.\nThese tests are distributed across files because they don't\nall generate as a batch. Different types of enforcer errors\ngenerate only after others are resolved, per file.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-openapi-enforcer-error"
        },
        "operationId": "post-openapi-enforcer-error",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "widgetCategory": "Blue",
                "widgetId": 666,
                "widgetName": "Acme"
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "widgetId": {
                    "type": "integer"
                  },
                  "widgetName": {
                    "type": "string"
                  }
                },
                "required": [
                  "widgetId",
                  "widgetName",
                  "widgetType"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          }
        },
        "summary": "openapi-enforcer errors",
        "tags": [
          "Spec"
        ]
      }
    },
    "/sample-orphaned": {
      "put": {
        "description": "The op is missing `$ref` for its examples.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-sample-orphaned"
        },
        "operationId": "put-sample-orphaned",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": "examples/noop.json"
            },
            "text/csv": {
              "example": "examples/schema.csv"
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": "examples/noop.json"
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Unreferenced sample in body or response",
        "tags": [
          "Spec"
        ]
      }
    },
    "/sample-string-value": {
      "get": {
        "description": "Test for mime types that require plain/text examples.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-sample-string-value"
        },
        "operationId": "get-sample-string-value",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "example": "<html>fubar</html>"
              }
            },
            "description": "Success response"
          }
        },
        "summary": "Warn about mime types that need string examples",
        "tags": [
          "Spec"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://{hostname}/test-suite/v2"
    }
  ],
  "tags": [
    {
      "description": "This tests a description for a tag, defined at the top of the\nOpenAPI file, and corresponding to an operation tag. This should\nrender as rollover text in a little icon after the operation's\ntitle.",
      "name": "Doc issues"
    }
  ],
  "x-akamai": {
    "auth-type": "EDGE_GRID",
    "file-path": "06-op.yaml"
  },
  "x-readme": {
    "samples-languages": [
      "curl",
      "python",
      "node"
    ]
  }
}