{
  "components": {
    "schemas": {
      "cabbageWankType": {
        "minLength": 1,
        "type": "string"
      },
      "error": {
        "additionalProperties": false,
        "properties": {
          "detail": {
            "description": "All work and no play makes Jack a dull boy.",
            "type": "string"
          },
          "errors": {
            "description": "Nested errors.",
            "items": {
              "additionalProperties": true,
              "properties": {
                "detail": {
                  "description": "All work and no play makes Jack a dull boy.",
                  "type": "string"
                },
                "status": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "integer"
                },
                "title": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                },
                "type": {
                  "description": "This schema name should not trigger a warning.",
                  "type": "string"
                }
              },
              "required": [
                "detail",
                "title",
                "type",
                "status"
              ],
              "type": "object",
              "x-akamai": {
                "file-path": "schemas/error-nested.yaml"
              }
            },
            "type": "array"
          },
          "status": {
            "description": "This schema name should not trigger a warning.",
            "type": "integer"
          },
          "title": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          },
          "type": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          }
        },
        "required": [
          "detail",
          "title",
          "type",
          "status"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/error.yaml"
        }
      },
      "error-nested": {
        "additionalProperties": true,
        "properties": {
          "detail": {
            "description": "All work and no play makes Jack a dull boy.",
            "type": "string"
          },
          "status": {
            "description": "This schema name should not trigger a warning.",
            "type": "integer"
          },
          "title": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          },
          "type": {
            "description": "This schema name should not trigger a warning.",
            "type": "string"
          }
        },
        "required": [
          "detail",
          "title",
          "type",
          "status"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/error-nested.yaml"
        }
      },
      "linked-schema": {
        "description": "This schema is $ref linked.",
        "type": "boolean",
        "x-akamai": {
          "file-path": "schemas/linked-schema.yaml"
        }
      },
      "noop": {
        "additionalProperties": false,
        "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
        "properties": {
          "chico": {
            "description": "Chico.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          },
          "groucho": {
            "description": "Groucho.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          },
          "harpo": {
            "description": "Harpo.",
            "enum": [
              "MARX"
            ],
            "type": "string"
          }
        },
        "required": [
          "groucho",
          "chico",
          "harpo"
        ],
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/noop.yaml"
        }
      },
      "num": {
        "description": "Numeric tests.",
        "properties": {
          "num-epoch": {
            "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
            "properties": {
              "activationDate": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              },
              "activationTime": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "num-max": {
            "description": "Specifies a `maximum` value.",
            "maximum": 90,
            "type": "integer"
          },
          "num-min-missing": {
            "description": "This numeric schema doesn't specify a `minimum` value.",
            "type": "integer"
          },
          "num-min-missing-enum": {
            "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
            "enum": [
              1,
              2
            ],
            "type": "integer"
          },
          "num-not-int-kw": {
            "description": "Nested members are mistyped as `number`.",
            "properties": {
              "policyId": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyVersion": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-not-int-other": {
            "description": "Nested members may be mistyped as `number`.",
            "properties": {
              "policyLimit": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              },
              "policyThreshold": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "num-pct-lacks-max": {
            "description": "This is described as a percent, but spec lacks a maximum.",
            "type": "integer"
          },
          "threshold-max": {
            "description": "Sample integer data is too high.",
            "maximum": 360,
            "type": "integer"
          },
          "threshold-min": {
            "description": "Sample integer data is too low.",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/num.yaml"
        }
      },
      "schema": {
        "additionalProperties": true,
        "description": "Basic schema tests.",
        "properties": {
          "badly formatted key": {
            "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
            "type": "boolean"
          },
          "enumValue": {
            "description": "Unclear what this tests: `Value1`.",
            "enum": [
              "Value1"
            ],
            "type": "string"
          },
          "false": {
            "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
            "type": "string"
          },
          "lang-desc-link-invalid": {
            "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
            "type": "string"
          },
          "lang-desc-numbered-slug": {
            "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
            "type": "string"
          },
          "openapi-html-comment": {
            "description": "<!-- Commented out content -->",
            "type": "boolean"
          },
          "openapi-schema-ref-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` for contextual doc throws a warning."
              },
              {
                "description": "This schema is $ref linked.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            ]
          },
          "openapi-schema-ref-conflict": {
            "additionalProperties": false,
            "default": false,
            "description": "This schema is $ref linked.",
            "type": "boolean",
            "x-akamai": {
              "file-path": "schemas/linked-schema.yaml"
            }
          },
          "openapi-schema-ref-conflict-allof": {
            "allOf": [
              {
                "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
              },
              {
                "default": false,
                "description": "This schema is $ref linked.",
                "nullable": true,
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              {
                "description": "Alternative desc"
              }
            ]
          },
          "openapi-schema-ref-overload": {
            "description": "Test different ways to arrange descriptions along with $ref links.",
            "properties": {
              "refOrderedCorrectly": {
                "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              },
              "refOrderedIncorrectly": {
                "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                "type": "boolean",
                "x-akamai": {
                  "file-path": "schemas/linked-schema.yaml"
                }
              }
            },
            "type": "object"
          },
          "random-yaml": {
            "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
            "enum": [
              "GROUCHO",
              "HARPO",
              "CHICO"
            ],
            "type": "string"
          },
          "ref-overload": {
            "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
            "maxLength": 1024,
            "minLength": 1,
            "readOnly": true,
            "type": "string"
          },
          "schema-desc-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
            "type": "string"
          },
          "schema-desc-malformed-para": {
            "description": "TBD description has punctuation and is a full sentence.",
            "type": "string"
          },
          "schema-desc-missing": {
            "type": "string"
          },
          "schema-example-redundant": {
            "description": "This schema should not embed an `example` that's redundant with separate sample data.",
            "example": "This is messed up!",
            "type": "string"
          },
          "schema-get-put-mismatch": {
            "description": "TBD GET rsp & PUT req should link same schema.",
            "type": "string"
          },
          "schema-invalid-against-sample": {
            "additionalProperties": false,
            "description": "Simple membership test to check if the CLI validates sample data against the schema.",
            "properties": {
              "bar": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              },
              "foo": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "boolean"
              }
            },
            "required": [
              "foo",
              "bar"
            ],
            "type": "object"
          },
          "schema-name-case-sensitive": {
            "description": "Complain about all these schema names varying in case.",
            "properties": {
              "BADSCHEMANAME": {
                "type": "boolean"
              },
              "BadSchemaName": {
                "type": "boolean"
              },
              "badSchemaName": {
                "type": "boolean"
              },
              "badschemaname": {
                "type": "boolean"
              },
              "sourceIP": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-malformed": {
            "description": "Complain about this schema name not being camelCase.",
            "type": "string"
          },
          "schema-name-misspelled": {
            "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
            "properties": {
              "certficateName": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              },
              "operationid": {
                "description": "All work and no play makes Jack a dull boy.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "schema-name-parroted": {
            "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
            "type": "string"
          },
          "schema-operation-links-self": {
            "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
            "type": "string"
          },
          "schema-orphaned": {
            "description": "TBD schema file is an unreferenced orphan.",
            "type": "string"
          },
          "schema-poly-anonymous": {
            "description": "TBD oneOf/anyOf: each scenario needs a label.",
            "type": "string"
          },
          "schema-redundant": {
            "description": "TBD redundant schema, normalized for description.",
            "type": "string"
          },
          "schema-redundant-membership": {
            "description": "TBD schema is redundant, same set of members.",
            "type": "string"
          },
          "schema-type-missing": {
            "description": "This schema lacks a `type`."
          },
          "svc-tally-named-obj-keys": {
            "description": "Test variance among same-named object schemas' set of defined members.",
            "properties": {
              "batchOne": {
                "properties": {
                  "beatles": {
                    "description": "Defines all members.",
                    "properties": {
                      "george": {
                        "type": "string"
                      },
                      "john": {
                        "type": "string"
                      },
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "beatles": {
                    "description": "Defines members still alive.",
                    "properties": {
                      "paul": {
                        "type": "string"
                      },
                      "ringo": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-obj-keys": {
            "description": "Complain that this set of keys is defined in more than one schema file.",
            "properties": {
              "chico": {
                "description": "Chico description.",
                "type": "string"
              },
              "groucho": {
                "description": "Groucho description.",
                "type": "string"
              },
              "harpo": {
                "description": "Harpo description.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-desc": {
            "description": "Test variance among schema descriptions.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingDescription": {
                    "description": "All work and no play makes Jeremy a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingDescription": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingDescription": {
                    "description": "All twerk and no play makes Jack a dull boy.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-enum-values": {
            "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
            "properties": {
              "batchFour": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchOne": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "HARPO",
                      "CHICO",
                      "ZEPPO",
                      "GUMMO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchThree": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "GROUCHO",
                      "CHICO",
                      "HARPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingEnumValues": {
                    "description": "This schema's set of enum values varies from another with the same name.",
                    "enum": [
                      "CHICO",
                      "GROUCHO",
                      "GUMMO",
                      "HARPO",
                      "ZEPPO"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "svc-tally-schema-type": {
            "description": "Test variance among schema types.",
            "properties": {
              "batchOne": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "batchTwo": {
                "properties": {
                  "varyingType": {
                    "description": "This schema's type varies from another with the same name.",
                    "items": {
                      "description": "This test needs to ignore the contents of `items`.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/schema.yaml"
        }
      },
      "str": {
        "description": "String tests.",
        "properties": {
          "patterns": {
            "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
            "properties": {
              "patternInvalid": {
                "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                "pattern": "^($",
                "type": "string"
              },
              "patternInvalidatesData": {
                "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                "pattern": "^$",
                "type": "string"
              },
              "quotedBackslashed": {
                "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "quotedUnchanged": {
                "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                "type": "string"
              },
              "unquotedBackslashed": {
                "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              },
              "unquotedUnchanged": {
                "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "spec-enforcer-parse-err-false-positive": {
            "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-date-fmt-missing": {
            "description": "TBD timestamp string lacks `format`.",
            "type": "string"
          },
          "str-date-offset": {
            "description": "TBD warn against time zone offset values in samples.",
            "type": "string"
          },
          "str-enum-alph": {
            "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
            "enum": [
              "GEORGE",
              "JOHN",
              "PAUL",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-alph": {
            "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
            "enum": [
              "JOHN",
              "PAUL",
              "GEORGE",
              "RINGO"
            ],
            "type": "string"
          },
          "str-enum-desc-length": {
            "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
            "enum": [
              "UNPARSEABLE",
              "PRISTINE_TOO_WIDE",
              "DURATION",
              "PIXEL",
              "BYTES",
              "SAMPLERATE",
              "PRISTINE_TOO_TALL",
              "PROCESS_FAILED_INTERNALLY",
              "INVALID_POLICY"
            ],
            "type": "string"
          },
          "str-enum-desc-max": {
            "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J"
            ],
            "type": "string"
          },
          "str-enum-desc-unlisted": {
            "properties": {
              "allDescribed": {
                "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "allMissing": {
                "description": "Raise an error because this description fails to detail any enum values.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "descriptionHasLink": {
                "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              },
              "integerEnumMissing": {
                "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                "enum": [
                  400,
                  403,
                  401,
                  404
                ],
                "type": "integer"
              },
              "integerEnumPresent": {
                "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                "enum": [
                  400,
                  401,
                  404,
                  403
                ],
                "type": "integer"
              },
              "someMissing": {
                "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  "HARPO",
                  "ZEPPO"
                ],
                "type": "string"
              }
            },
            "required": [
              "allDescribed",
              "allMissing",
              "descriptionHasLink",
              "someMissing"
            ],
            "type": "object"
          },
          "str-enum-desc-unordered": {
            "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
            "enum": [
              "DEWEY",
              "HUEY",
              "LOUIE"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced": {
            "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              "ZEPPO"
            ],
            "type": "string"
          },
          "str-enum-desc-unspeced-empty": {
            "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO",
              ""
            ],
            "type": "string"
          },
          "str-enum-details": {
            "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
            "enum": [
              "CAA_MISMATCH_FAILURE",
              "CAA_MISMATCH_RETRYING",
              "DEPLOYED",
              "DEPLOYING",
              "EXPIRED_NEEDS_VALIDATION",
              "EXPIRING_SOON_NEEDS_VALIDATION",
              "NEEDS_ACTIVATION",
              "PENDING",
              "PROHIBITED_DOMAIN_FAILURE",
              "STALLED"
            ],
            "type": "string"
          },
          "str-enum-differentiator-missing": {
            "description": "Missing a differentiator.",
            "properties": {
              "isAnyOf": {
                "anyOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              },
              "isOneOf": {
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "description": "Basic schema tests.",
                    "properties": {
                      "badly formatted key": {
                        "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                        "type": "boolean"
                      },
                      "enumValue": {
                        "description": "Unclear what this tests: `Value1`.",
                        "enum": [
                          "Value1"
                        ],
                        "type": "string"
                      },
                      "false": {
                        "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                        "type": "string"
                      },
                      "lang-desc-link-invalid": {
                        "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                        "type": "string"
                      },
                      "lang-desc-numbered-slug": {
                        "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                        "type": "string"
                      },
                      "openapi-html-comment": {
                        "description": "<!-- Commented out content -->",
                        "type": "boolean"
                      },
                      "openapi-schema-ref-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` for contextual doc throws a warning."
                          },
                          {
                            "description": "This schema is $ref linked.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        ]
                      },
                      "openapi-schema-ref-conflict": {
                        "additionalProperties": false,
                        "default": false,
                        "description": "This schema is $ref linked.",
                        "type": "boolean",
                        "x-akamai": {
                          "file-path": "schemas/linked-schema.yaml"
                        }
                      },
                      "openapi-schema-ref-conflict-allof": {
                        "allOf": [
                          {
                            "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                          },
                          {
                            "default": false,
                            "description": "This schema is $ref linked.",
                            "nullable": true,
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          {
                            "description": "Alternative desc"
                          }
                        ]
                      },
                      "openapi-schema-ref-overload": {
                        "description": "Test different ways to arrange descriptions along with $ref links.",
                        "properties": {
                          "refOrderedCorrectly": {
                            "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          },
                          "refOrderedIncorrectly": {
                            "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                            "type": "boolean",
                            "x-akamai": {
                              "file-path": "schemas/linked-schema.yaml"
                            }
                          }
                        },
                        "type": "object"
                      },
                      "random-yaml": {
                        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                        "enum": [
                          "GROUCHO",
                          "HARPO",
                          "CHICO"
                        ],
                        "type": "string"
                      },
                      "ref-overload": {
                        "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "readOnly": true,
                        "type": "string"
                      },
                      "schema-desc-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                        "type": "string"
                      },
                      "schema-desc-malformed-para": {
                        "description": "TBD description has punctuation and is a full sentence.",
                        "type": "string"
                      },
                      "schema-desc-missing": {
                        "type": "string"
                      },
                      "schema-example-redundant": {
                        "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                        "example": "This is messed up!",
                        "type": "string"
                      },
                      "schema-get-put-mismatch": {
                        "description": "TBD GET rsp & PUT req should link same schema.",
                        "type": "string"
                      },
                      "schema-invalid-against-sample": {
                        "additionalProperties": false,
                        "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                        "properties": {
                          "bar": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          },
                          "foo": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "foo",
                          "bar"
                        ],
                        "type": "object"
                      },
                      "schema-name-case-sensitive": {
                        "description": "Complain about all these schema names varying in case.",
                        "properties": {
                          "BADSCHEMANAME": {
                            "type": "boolean"
                          },
                          "BadSchemaName": {
                            "type": "boolean"
                          },
                          "badSchemaName": {
                            "type": "boolean"
                          },
                          "badschemaname": {
                            "type": "boolean"
                          },
                          "sourceIP": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-malformed": {
                        "description": "Complain about this schema name not being camelCase.",
                        "type": "string"
                      },
                      "schema-name-misspelled": {
                        "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                        "properties": {
                          "certficateName": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "operationid": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "schema-name-parroted": {
                        "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                        "type": "string"
                      },
                      "schema-operation-links-self": {
                        "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                        "type": "string"
                      },
                      "schema-orphaned": {
                        "description": "TBD schema file is an unreferenced orphan.",
                        "type": "string"
                      },
                      "schema-poly-anonymous": {
                        "description": "TBD oneOf/anyOf: each scenario needs a label.",
                        "type": "string"
                      },
                      "schema-redundant": {
                        "description": "TBD redundant schema, normalized for description.",
                        "type": "string"
                      },
                      "schema-redundant-membership": {
                        "description": "TBD schema is redundant, same set of members.",
                        "type": "string"
                      },
                      "schema-type-missing": {
                        "description": "This schema lacks a `type`."
                      },
                      "svc-tally-named-obj-keys": {
                        "description": "Test variance among same-named object schemas' set of defined members.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "beatles": {
                                "description": "Defines all members.",
                                "properties": {
                                  "george": {
                                    "type": "string"
                                  },
                                  "john": {
                                    "type": "string"
                                  },
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "beatles": {
                                "description": "Defines members still alive.",
                                "properties": {
                                  "paul": {
                                    "type": "string"
                                  },
                                  "ringo": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-obj-keys": {
                        "description": "Complain that this set of keys is defined in more than one schema file.",
                        "properties": {
                          "chico": {
                            "description": "Chico description.",
                            "type": "string"
                          },
                          "groucho": {
                            "description": "Groucho description.",
                            "type": "string"
                          },
                          "harpo": {
                            "description": "Harpo description.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-desc": {
                        "description": "Test variance among schema descriptions.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All work and no play makes Jeremy a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingDescription": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingDescription": {
                                "description": "All twerk and no play makes Jack a dull boy.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-enum-values": {
                        "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                        "properties": {
                          "batchFour": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchOne": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "HARPO",
                                  "CHICO",
                                  "ZEPPO",
                                  "GUMMO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchThree": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "GROUCHO",
                                  "CHICO",
                                  "HARPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingEnumValues": {
                                "description": "This schema's set of enum values varies from another with the same name.",
                                "enum": [
                                  "CHICO",
                                  "GROUCHO",
                                  "GUMMO",
                                  "HARPO",
                                  "ZEPPO"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "svc-tally-schema-type": {
                        "description": "Test variance among schema types.",
                        "properties": {
                          "batchOne": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "batchTwo": {
                            "properties": {
                              "varyingType": {
                                "description": "This schema's type varies from another with the same name.",
                                "items": {
                                  "description": "This test needs to ignore the contents of `items`.",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/schema.yaml"
                    }
                  },
                  {
                    "description": "Numeric tests.",
                    "properties": {
                      "num-epoch": {
                        "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                        "properties": {
                          "activationDate": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          },
                          "activationTime": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "num-max": {
                        "description": "Specifies a `maximum` value.",
                        "maximum": 90,
                        "type": "integer"
                      },
                      "num-min-missing": {
                        "description": "This numeric schema doesn't specify a `minimum` value.",
                        "type": "integer"
                      },
                      "num-min-missing-enum": {
                        "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                        "enum": [
                          1,
                          2
                        ],
                        "type": "integer"
                      },
                      "num-not-int-kw": {
                        "description": "Nested members are mistyped as `number`.",
                        "properties": {
                          "policyId": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyVersion": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-not-int-other": {
                        "description": "Nested members may be mistyped as `number`.",
                        "properties": {
                          "policyLimit": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          },
                          "policyThreshold": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "num-pct-lacks-max": {
                        "description": "This is described as a percent, but spec lacks a maximum.",
                        "type": "integer"
                      },
                      "threshold-max": {
                        "description": "Sample integer data is too high.",
                        "maximum": 360,
                        "type": "integer"
                      },
                      "threshold-min": {
                        "description": "Sample integer data is too low.",
                        "minimum": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "x-akamai": {
                      "file-path": "schemas/num.yaml"
                    }
                  }
                ]
              }
            },
            "type": "object"
          },
          "str-enum-empty": {
            "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
            "enum": [
              "GROUCHO",
              "CHICO",
              ""
            ],
            "type": "string"
          },
          "str-enum-integer": {
            "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
            "enum": [
              404,
              500,
              400
            ],
            "type": "string"
          },
          "str-enum-integer-range": {
            "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
            "type": "string"
          },
          "str-enum-keyword-anyof": {
            "anyOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ],
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
          },
          "str-enum-keyword-oneof": {
            "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
            "oneOf": [
              {
                "minLength": 1,
                "title": "Individual user",
                "type": "string"
              },
              {
                "enum": [
                  "users_in_this_account",
                  "internal_users"
                ],
                "title": "Group of users",
                "type": "string"
              }
            ]
          },
          "str-enum-nullable": {
            "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
            "enum": [
              "GROUCHO",
              "CHICO",
              "HARPO"
            ],
            "nullable": true,
            "type": "string"
          },
          "str-enum-orphan": {
            "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
            "enum": [
              "ALL_ALONE"
            ],
            "type": "string"
          },
          "str-enum-repeated": {
            "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
            "enum": [
              "CHICO",
              "CHICO",
              "HARPO"
            ],
            "type": "string"
          },
          "str-enum-repeated-case": {
            "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
            "enum": [
              "two-words",
              "Two Words",
              "TWO_WORDS",
              "twoWords"
            ],
            "type": "string"
          },
          "str-enum-string-integer": {
            "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
            "enum": [
              "400",
              "500",
              "404"
            ],
            "type": "string"
          },
          "str-enum-type-conflict": {
            "description": "Data type for enum set doesn't match schema type.",
            "properties": {
              "integerSchemaStringEnum": {
                "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                "enum": [
                  "GROUCHO",
                  "HARPO",
                  "CHICO"
                ],
                "type": "integer"
              },
              "stringSchemaIntegerEnum": {
                "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                "enum": [
                  400,
                  403,
                  401
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-type-mixed": {
            "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
            "enum": [
              400,
              "401"
            ],
            "type": "string"
          },
          "str-enum-type-weird": {
            "description": "Data type for enum set is boolean or null.",
            "properties": {
              "booleanEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  true,
                  false
                ],
                "type": "boolean"
              },
              "nullEnum": {
                "description": "No need to spec booleans or `null` as enum.",
                "enum": [
                  "GROUCHO",
                  "CHICO",
                  null
                ],
                "type": "boolean"
              },
              "numericEnum": {
                "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                "enum": [
                  401.2,
                  403.3,
                  400.1
                ],
                "type": "number"
              }
            },
            "type": "object"
          },
          "str-enum-unspeced-desc": {
            "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
            "type": "string"
          },
          "str-enum-unspeced-name": {
            "description": "These should all likely be enums based on their names.",
            "properties": {
              "bolusClass": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetwork": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusNetworkId": {
                "description": "This should not be flagged.",
                "type": "string"
              },
              "bolusOperation": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusStatus": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "bolusType": {
                "description": "Most likely an enum, no?",
                "type": "string"
              },
              "type": {
                "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-enum-values-malformed": {
            "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
            "enum": [
              "MalformedValue",
              "valueIsMalformed",
              "malformed",
              "MALFORMED-VALUE",
              "malformed_value",
              "malformed-value",
              "_",
              "_PREFIXED",
              "-",
              "WELL_FORMED_VALUE"
            ],
            "type": "string"
          },
          "str-fmt-byte": {
            "description": "A schema for a Base64 string should spec `format: byte`.",
            "type": "string"
          },
          "str-fmt-email": {
            "description": "The schema should spec `format: email`.",
            "properties": {
              "widgetEmail": {
                "description": "The schema should spec `format: email`.",
                "type": "string"
              },
              "widgetEmails": {
                "description": "The schema should spec `format: email`.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "str-fmt-hostname": {
            "description": "Schema should spec `format: hostname`.",
            "properties": {
              "widgetHostname": {
                "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-ip": {
            "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
            "properties": {
              "missingIp": {
                "description": "This schema should spec a `format`.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-timestamp": {
            "description": "Based on their names, schema should spec `format: date-time` or `date`.",
            "properties": {
              "alpha2Code": {
                "description": "The ISO 3166 two-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "alpha3Code": {
                "description": "The ISO 3166 three-letter code for the region.",
                "minLength": 1,
                "type": "string"
              },
              "createdTime": {
                "description": "When the widget was created.",
                "type": "string"
              },
              "deployedTimestamp": {
                "description": "When the widget was deployed.",
                "type": "string"
              },
              "updatedDate": {
                "description": "When the widget was updated.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-fmt-uri": {
            "description": "Schemas should spec'ed as `format: uri`.",
            "properties": {
              "hostnameUri": {
                "description": "A URI member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "hostnameUrl": {
                "description": "A URL member with a wrong format.",
                "format": "hostname",
                "type": "string"
              },
              "widgetUri": {
                "description": "A URI member with no format.",
                "type": "string"
              },
              "widgetUrl": {
                "description": "A URL member with no format.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "str-min-conflict-format": {
            "description": "String schema specifies both `minLength` and `format`.",
            "format": "date-time",
            "minLength": 1,
            "type": "string"
          },
          "str-min-missing": {
            "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
            "type": "string",
            "x-akamai": {
              "labels": [
                "Bot Manager"
              ],
              "status": "BETA"
            }
          },
          "threshold-max": {
            "description": "Sample string data is too long.",
            "maxLength": 32,
            "type": "string"
          },
          "threshold-min": {
            "description": "Sample string data is zero-length, too short.",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object",
        "x-akamai": {
          "file-path": "schemas/str.yaml"
        }
      },
      "yuccaPudooType": {
        "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
        "enum": [
          "GROUCHO",
          "HARPO",
          "CHICO"
        ],
        "type": "string"
      }
    }
  },
  "externalDocs": {
    "description": "See documentation for Akamai's Swag-tool Test API",
    "url": "https://techdocs.akamai.com/internal-ux-writing/reference"
  },
  "info": {
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "The Response API",
    "version": "v2"
  },
  "openapi": "3.0.0",
  "paths": {
    "/op-200-data-missing": {
      "get": {
        "description": "Raise an `op-200-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-200-data-missing"
        },
        "operationId": "get-op-200-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "A 200 response without any data specified",
        "tags": [
          "Response codes"
        ]
      }
    },
    "/op-201-data-missing": {
      "get": {
        "description": "Raise an `op-201-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-201-data-missing"
        },
        "operationId": "get-op-201-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "201 response has no data provided",
        "tags": [
          "Response codes"
        ]
      }
    },
    "/op-201-loc-missing": {
      "get": {
        "description": "Raise an `op-201-loc-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-201-loc-missing"
        },
        "operationId": "get-op-201-loc-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response.",
            "headers": {
              "X-akam": {
                "description": "Specifies a URL linking the newly created resource.",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "201 response has no data provided",
        "tags": [
          "Response codes"
        ]
      }
    },
    "/op-429-doc-rate-limit": {
      "get": {
        "description": "Raise an `op-429-doc-rate-limit` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-429-doc-rate-limit"
        },
        "operationId": "get-op-429-doc-rate-limit",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successful response.",
            "headers": {
              "Akamai-RateLimit-Remaining": {
                "description": "An outdated rate limiting header.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Too many requests.",
            "headers": {
              "Akamai-RateLimit-Refill": {
                "description": "An extraneous header name related to rate limiting.",
                "schema": {
                  "type": "string"
                }
              },
              "ETag": {
                "description": "An extraneous header name unrelated to rate limiting.",
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Refill": {
                "description": "An extraneous header name related to rate limiting.",
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "An outdated rate limiting header.",
                "schema": {
                  "type": "string"
                }
              },
              "x-ratelimit-limit": {
                "description": "An outdated rate limiting header, expressed as lowercase.",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "A 429 is present, but 2xx missing rate limiting headers",
        "tags": [
          "Response codes"
        ]
      }
    },
    "/op-4xx-json-mistyped": {
      "get": {
        "description": "Raise an `op-4xx-json-mistyped` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-4xx-json-mistyped"
        },
        "operationId": "get-op-4xx-json-mistyped",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {},
            "description": "Successful response."
          },
          "404": {
            "content": {
              "application/problem": {
                "example": {
                  "detail": "All work and no play makes Jack a dull boy."
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "detail": {
                      "description": "All work and no play makes Jack a dull boy.",
                      "type": "string"
                    },
                    "errors": {
                      "description": "Nested errors.",
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "detail": {
                            "description": "All work and no play makes Jack a dull boy.",
                            "type": "string"
                          },
                          "status": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "integer"
                          },
                          "title": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          },
                          "type": {
                            "description": "This schema name should not trigger a warning.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "detail",
                          "title",
                          "type",
                          "status"
                        ],
                        "type": "object",
                        "x-akamai": {
                          "file-path": "schemas/error-nested.yaml"
                        }
                      },
                      "type": "array"
                    },
                    "status": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "integer"
                    },
                    "title": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    },
                    "type": {
                      "description": "This schema name should not trigger a warning.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "detail",
                    "title",
                    "type",
                    "status"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/error.yaml"
                  }
                }
              }
            },
            "description": "Bad request."
          }
        },
        "summary": "An error response application/json type",
        "tags": [
          "Content type"
        ]
      }
    },
    "/op-rsp-concurrency-control": {
      "patch": {
        "description": "Raise an `op-rsp-concurrency-control` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-rsp-concurrency-control"
        },
        "operationId": "patch-op-rsp-concurrency-control",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "An operation with an ETag header",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-delete-data-present": {
      "get": {
        "description": "Raise an `spec-path-method-order` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-spec-path-method-order"
        },
        "operationId": "get-spec-path-method-order",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "A GET operation after a DELETE",
        "tags": [
          "Order"
        ]
      },
      "delete": {
        "description": "Raise an `op-rsp-delete-data-present` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/delete-op-rsp-delete-data-present"
        },
        "operationId": "delete-op-rsp-delete-data-present",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "A DELETE operation with data specified",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-get-data-missing": {
      "get": {
        "description": "Raise an `op-rsp-get-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-rsp-get-data-missing"
        },
        "operationId": "get-op-rsp-get-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "A GET operation with no response data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-multi-type": {
      "patch": {
        "description": "Raise an `op-rsp-multi-type` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-rsp-multi-type"
        },
        "operationId": "patch-op-rsp-multi-type",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              },
              "text/csv": {
                "example": "foo,bar,fubar",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "An operation with multi type formats",
        "tags": [
          "Multi-type responses"
        ]
      }
    },
    "/op-rsp-multi-type-version": {
      "patch": {
        "description": "Raise an `op-rsp-multi-type-version` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-rsp-multi-type-version"
        },
        "operationId": "patch-op-rsp-multi-type-version",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.akamai.xyz.v1+json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            },
            "application/vnd.akamai.xyz.v2+json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.akamai.xyz.v1+json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              },
              "application/vnd.akamai.xyz.v2+json": {
                "example": {
                  "id": "foo"
                },
                "schema": {
                  "description": "String tests.",
                  "properties": {
                    "patterns": {
                      "description": "Test what kind of string-quoting you may need for the `\\.` in this long regex: `^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$`",
                      "properties": {
                        "patternInvalid": {
                          "description": "Example of a buggy `pattern` whose syntax is invalid, in this case with an open group with no close.",
                          "pattern": "^($",
                          "type": "string"
                        },
                        "patternInvalidatesData": {
                          "description": "Example of a buggy `pattern` that, in this case, invalidates any non-zero-length string.",
                          "pattern": "^$",
                          "type": "string"
                        },
                        "quotedBackslashed": {
                          "description": "String is quoted. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "quotedUnchanged": {
                          "description": "String is quoted. Sequence is not backslashed. (Doesn't parse.)",
                          "type": "string"
                        },
                        "unquotedBackslashed": {
                          "description": "No quotes on string. Sequence is backslashed. (Publishes incorrectly as `\\\\.`)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        },
                        "unquotedUnchanged": {
                          "description": "No quotes on string. Sequence is not backslashed. (Publishes correctly.)",
                          "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "spec-enforcer-parse-err-false-positive": {
                      "description": "This demonstrates the `openapi-enforcer validate` command yielding a false-positive parsing error when it encounters a `$ref` link to an array, in this case an `enum`. Supported values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-date-fmt-missing": {
                      "description": "TBD timestamp string lacks `format`.",
                      "type": "string"
                    },
                    "str-date-offset": {
                      "description": "TBD warn against time zone offset values in samples.",
                      "type": "string"
                    },
                    "str-enum-alph": {
                      "description": "Enum values are spec'ed in weird order (`GEORGE`, `JOHN`, `PAUL`, `RINGO`), affecting popup menu.",
                      "enum": [
                        "GEORGE",
                        "JOHN",
                        "PAUL",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-alph": {
                      "description": "These enums are described in bad order: `GEORGE`, `JOHN`, `PAUL`, `RINGO`.",
                      "enum": [
                        "JOHN",
                        "PAUL",
                        "GEORGE",
                        "RINGO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-length": {
                      "description": "Provides a reason for an Image and Video Manager failure. The\npossible values are: `DURATION` when the pristine video exceeds\nthe maximum duration of 5 minutes, `BYTES` when the pristine video\nexceeds the maximum size of 256 MB, `PIXEL` when the pristine\nvideo pixels exceed 3,686,400 (1920\u00d71920), `SAMPLERATE` when the\npristine video exceeds maximum sample rate of 60 Hz, `UNPARSEABLE`\nwhen the pristine video is not a recognized or supported video\nformat, `PRISTINE_TOO_WIDE` when the pristine image width exceeds\n9999 pixels, `PRISTINE_TOO_TALL` when the pristine image height\nexceeds 9999 pixels, `PROCESS_FAILED_INTERNALLY` when the image or\nvideo could not be fetched from the origin or the policy is\noutdated, or `INVALID_POLICY` when the policy parameters are\ninvalid.",
                      "enum": [
                        "UNPARSEABLE",
                        "PRISTINE_TOO_WIDE",
                        "DURATION",
                        "PIXEL",
                        "BYTES",
                        "SAMPLERATE",
                        "PRISTINE_TOO_TALL",
                        "PROCESS_FAILED_INTERNALLY",
                        "INVALID_POLICY"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-max": {
                      "description": "Ten or more enum values in a description. `A`, `B`, `C`, `D`,\n`E`, `F`, `G`, `H`, `I`, `J`.",
                      "enum": [
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unlisted": {
                      "properties": {
                        "allDescribed": {
                          "description": "This description lists each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "allMissing": {
                          "description": "Raise an error because this description fails to detail any enum values.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "descriptionHasLink": {
                          "description": "This description doesn't list each value, but there's a [link to somewhere](https://techdocs.akamai.com/internal-ux-writing/reference/somewhere) that might.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        },
                        "integerEnumMissing": {
                          "description": "Raise an error because this description fails to detail each integer enum value. Values are `400`, `404`, and `401`.",
                          "enum": [
                            400,
                            403,
                            401,
                            404
                          ],
                          "type": "integer"
                        },
                        "integerEnumPresent": {
                          "description": "This description details each integer enum value, so do not throw an error. Values are `400`, `403`, `401`, and `404`.",
                          "enum": [
                            400,
                            401,
                            404,
                            403
                          ],
                          "type": "integer"
                        },
                        "someMissing": {
                          "description": "Raise an error because this description fails to detail each enum value. Values are `GROUCHO`, `CHICO`, and `HARPO`.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            "HARPO",
                            "ZEPPO"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "allDescribed",
                        "allMissing",
                        "descriptionHasLink",
                        "someMissing"
                      ],
                      "type": "object"
                    },
                    "str-enum-desc-unordered": {
                      "description": "Throw a `str-enum-desc-unordered` warning because these `HUEY`, `DEWEY`, and `LOUIE` values aren't sequenced the same as the schema's `enum` spec.",
                      "enum": [
                        "DEWEY",
                        "HUEY",
                        "LOUIE"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced": {
                      "description": "This description details each enum value. Values are `GROUCHO`, `CHICO`, `HARPO`, and `ZEPPO`. But flag random other `LITERAL` values that may be in the description, but not spec'ed in the enumeration.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        "ZEPPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-desc-unspeced-empty": {
                      "description": "Test a special case where the `enum` specs an empty string. Either `GROUCHO`, `CHICO`, `HARPO`, or an empty string (`\"\"`).",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-details": {
                      "description": "This schema tests whether we can use HTML's `<details>` and `<summary>` tags to embed collapsible sections of overly long descriptions, such as lists of enum values. This also tests whether un-described values still get flagged as blocking error. This block of text always displays as the main description. The status of the certificate deployment on the production network.\n<details>\n<summary>\nThis text renders as a prompt. Details on possible values...\n</summary>\n<ul>\n<li><code>DEPLOYING</code> indicates the deployment is in progress. See <a href=\"ref:api-summary\">HTML cross reference</a>, whose <code>ref:</code> slug should link to the API summary topic.\n<li><code>PENDING</code> indicates you need to add the validation challenge to your DNS and activate the property version on staging or production to deploy your certificate to that network. If you've done that already, run the operation again later to check if the deployment succeeded.\n<li><code>NEEDS_ACTIVATION</code> indicates the validation is complete and you need to activate the property version to deploy the certificate to the staging network.\n<li><code>DEPLOYED</code> indicates the certificate is successfully validated on the network and ready to handle secure traffic.\n<li><code>STALLED</code> indicates a problem with validation or deployment of your certificate. To try again, create and activate a new property version, or contact Akamai Professional Services for help.\n<li><code>PROHIBITED_DOMAIN_FAILURE</code> indicates the hostname isn't in the <code>Let's Encrypt</code> Certificate Authority domain allow list.\n<li><code>CAA_MISMATCH_RETRYING</code> or <code>CAA_MISMATCH_FAILURE</code> indicate you need to configure your Certification Authority Authorization (CAA) policy to allow <code>Let's Encrypt</code>.\n<li><code>EXPIRING_SOON_NEEDS_VALIDATION</code> indicates your certificate is due to expire or already expired, and you need to add the <code>_acme-challenge</code> validation CNAME record in your DNS again.\n<li><code>UNKNOWN_FAILURE</code>.\n<ul>\n</details>",
                      "enum": [
                        "CAA_MISMATCH_FAILURE",
                        "CAA_MISMATCH_RETRYING",
                        "DEPLOYED",
                        "DEPLOYING",
                        "EXPIRED_NEEDS_VALIDATION",
                        "EXPIRING_SOON_NEEDS_VALIDATION",
                        "NEEDS_ACTIVATION",
                        "PENDING",
                        "PROHIBITED_DOMAIN_FAILURE",
                        "STALLED"
                      ],
                      "type": "string"
                    },
                    "str-enum-differentiator-missing": {
                      "description": "Missing a differentiator.",
                      "properties": {
                        "isAnyOf": {
                          "anyOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        },
                        "isOneOf": {
                          "oneOf": [
                            {
                              "additionalProperties": true,
                              "description": "Basic schema tests.",
                              "properties": {
                                "badly formatted key": {
                                  "description": "Should trigger the `schema-name-malformed` test for a bad key name.",
                                  "type": "boolean"
                                },
                                "enumValue": {
                                  "description": "Unclear what this tests: `Value1`.",
                                  "enum": [
                                    "Value1"
                                  ],
                                  "type": "string"
                                },
                                "false": {
                                  "description": "A boolean name that needs quotes. Should trigger a `schema-name-boolean` warning.",
                                  "type": "string"
                                },
                                "lang-desc-link-invalid": {
                                  "description": "Here we have a [malformed doc slug prefix](docs:malformed-slug) and some (completely inverted link syntax)[ref:inverted-syntax].",
                                  "type": "string"
                                },
                                "lang-desc-numbered-slug": {
                                  "description": "This description provides a link with a `-1` slug [DOC](https://techdocs.akamai.com/project/segment#slug-numbered-1) and other [doc numbered slug](https://techdocs.akamai.com/internal-ux-writing/docs/slug-numbered-1).",
                                  "type": "string"
                                },
                                "openapi-html-comment": {
                                  "description": "<!-- Commented out content -->",
                                  "type": "boolean"
                                },
                                "openapi-schema-ref-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` for contextual doc throws a warning."
                                    },
                                    {
                                      "description": "This schema is $ref linked.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  ]
                                },
                                "openapi-schema-ref-conflict": {
                                  "additionalProperties": false,
                                  "default": false,
                                  "description": "This schema is $ref linked.",
                                  "type": "boolean",
                                  "x-akamai": {
                                    "file-path": "schemas/linked-schema.yaml"
                                  }
                                },
                                "openapi-schema-ref-conflict-allof": {
                                  "allOf": [
                                    {
                                      "description": "This use of `allOf` to refer to a schema with invalid ref siblings."
                                    },
                                    {
                                      "default": false,
                                      "description": "This schema is $ref linked.",
                                      "nullable": true,
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    {
                                      "description": "Alternative desc"
                                    }
                                  ]
                                },
                                "openapi-schema-ref-overload": {
                                  "description": "Test different ways to arrange descriptions along with $ref links.",
                                  "properties": {
                                    "refOrderedCorrectly": {
                                      "description": "Placing this description before the $ref is correct, so this\ndoes not trigger an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    },
                                    "refOrderedIncorrectly": {
                                      "description": "Placing this description after the $ref is incorrect, so this\ntriggers an error.",
                                      "type": "boolean",
                                      "x-akamai": {
                                        "file-path": "schemas/linked-schema.yaml"
                                      }
                                    }
                                  },
                                  "type": "object"
                                },
                                "random-yaml": {
                                  "description": "This schema placed in an arbitrary YAML wrapper is $ref-linked\nwith 'randomly-arranged.yaml#/yuccaPudooType' from another schema.",
                                  "enum": [
                                    "GROUCHO",
                                    "HARPO",
                                    "CHICO"
                                  ],
                                  "type": "string"
                                },
                                "ref-overload": {
                                  "description": "__Read-only__ Test to confirm that because this description is present, lack\nof a `description` in the target `$ref` schema is _not_ flagged\nas an error. Also check if additional schema logic is defined\noutside the `$ref`, you should get an error.",
                                  "maxLength": 1024,
                                  "minLength": 1,
                                  "readOnly": true,
                                  "type": "string"
                                },
                                "schema-desc-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/get-schema-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-desc-malformed-para": {
                                  "description": "TBD description has punctuation and is a full sentence.",
                                  "type": "string"
                                },
                                "schema-desc-missing": {
                                  "type": "string"
                                },
                                "schema-example-redundant": {
                                  "description": "This schema should not embed an `example` that's redundant with separate sample data.",
                                  "example": "This is messed up!",
                                  "type": "string"
                                },
                                "schema-get-put-mismatch": {
                                  "description": "TBD GET rsp & PUT req should link same schema.",
                                  "type": "string"
                                },
                                "schema-invalid-against-sample": {
                                  "additionalProperties": false,
                                  "description": "Simple membership test to check if the CLI validates sample data against the schema.",
                                  "properties": {
                                    "bar": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    },
                                    "foo": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "foo",
                                    "bar"
                                  ],
                                  "type": "object"
                                },
                                "schema-name-case-sensitive": {
                                  "description": "Complain about all these schema names varying in case.",
                                  "properties": {
                                    "BADSCHEMANAME": {
                                      "type": "boolean"
                                    },
                                    "BadSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badSchemaName": {
                                      "type": "boolean"
                                    },
                                    "badschemaname": {
                                      "type": "boolean"
                                    },
                                    "sourceIP": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-malformed": {
                                  "description": "Complain about this schema name not being camelCase.",
                                  "type": "string"
                                },
                                "schema-name-misspelled": {
                                  "description": "There are typos in nested camelCase member names. There is `Content-Type`. Adn There is and Content-Type. and ContentType:",
                                  "properties": {
                                    "certficateName": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    },
                                    "operationid": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "schema-name-parroted": {
                                  "description": "Complain about the `schema-name-parroted` name appearing again in the description.",
                                  "type": "string"
                                },
                                "schema-operation-links-self": {
                                  "description": "[This schema-level link is self-referential](https://techdocs.akamai.com/internal-ux-writing/reference/put-op-desc-links-self).",
                                  "type": "string"
                                },
                                "schema-orphaned": {
                                  "description": "TBD schema file is an unreferenced orphan.",
                                  "type": "string"
                                },
                                "schema-poly-anonymous": {
                                  "description": "TBD oneOf/anyOf: each scenario needs a label.",
                                  "type": "string"
                                },
                                "schema-redundant": {
                                  "description": "TBD redundant schema, normalized for description.",
                                  "type": "string"
                                },
                                "schema-redundant-membership": {
                                  "description": "TBD schema is redundant, same set of members.",
                                  "type": "string"
                                },
                                "schema-type-missing": {
                                  "description": "This schema lacks a `type`."
                                },
                                "svc-tally-named-obj-keys": {
                                  "description": "Test variance among same-named object schemas' set of defined members.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines all members.",
                                          "properties": {
                                            "george": {
                                              "type": "string"
                                            },
                                            "john": {
                                              "type": "string"
                                            },
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "beatles": {
                                          "description": "Defines members still alive.",
                                          "properties": {
                                            "paul": {
                                              "type": "string"
                                            },
                                            "ringo": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-obj-keys": {
                                  "description": "Complain that this set of keys is defined in more than one schema file.",
                                  "properties": {
                                    "chico": {
                                      "description": "Chico description.",
                                      "type": "string"
                                    },
                                    "groucho": {
                                      "description": "Groucho description.",
                                      "type": "string"
                                    },
                                    "harpo": {
                                      "description": "Harpo description.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-desc": {
                                  "description": "Test variance among schema descriptions.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All work and no play makes Jeremy a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingDescription": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingDescription": {
                                          "description": "All twerk and no play makes Jack a dull boy.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-enum-values": {
                                  "description": "Test variance among schemas' enum values. Also check for when an enum is both defined and undefined for the same data member. The test needs to account for irrelevant variance in enum sort order.",
                                  "properties": {
                                    "batchFour": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchOne": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "HARPO",
                                            "CHICO",
                                            "ZEPPO",
                                            "GUMMO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchThree": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "GROUCHO",
                                            "CHICO",
                                            "HARPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingEnumValues": {
                                          "description": "This schema's set of enum values varies from another with the same name.",
                                          "enum": [
                                            "CHICO",
                                            "GROUCHO",
                                            "GUMMO",
                                            "HARPO",
                                            "ZEPPO"
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "svc-tally-schema-type": {
                                  "description": "Test variance among schema types.",
                                  "properties": {
                                    "batchOne": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "batchTwo": {
                                      "properties": {
                                        "varyingType": {
                                          "description": "This schema's type varies from another with the same name.",
                                          "items": {
                                            "description": "This test needs to ignore the contents of `items`.",
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/schema.yaml"
                              }
                            },
                            {
                              "description": "Numeric tests.",
                              "properties": {
                                "num-epoch": {
                                  "description": "Numeric `*Time` or `*Date` values are likely epoch seconds.",
                                  "properties": {
                                    "activationDate": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    },
                                    "activationTime": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-max": {
                                  "description": "Specifies a `maximum` value.",
                                  "maximum": 90,
                                  "type": "integer"
                                },
                                "num-min-missing": {
                                  "description": "This numeric schema doesn't specify a `minimum` value.",
                                  "type": "integer"
                                },
                                "num-min-missing-enum": {
                                  "description": "This numeric schema doesn't specify a `minimum` value but has an enum object. Should be ignored.",
                                  "enum": [
                                    1,
                                    2
                                  ],
                                  "type": "integer"
                                },
                                "num-not-int-kw": {
                                  "description": "Nested members are mistyped as `number`.",
                                  "properties": {
                                    "policyId": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyVersion": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-not-int-other": {
                                  "description": "Nested members may be mistyped as `number`.",
                                  "properties": {
                                    "policyLimit": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    },
                                    "policyThreshold": {
                                      "description": "All work and no play makes Jack a dull boy.",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "num-pct-lacks-max": {
                                  "description": "This is described as a percent, but spec lacks a maximum.",
                                  "type": "integer"
                                },
                                "threshold-max": {
                                  "description": "Sample integer data is too high.",
                                  "maximum": 360,
                                  "type": "integer"
                                },
                                "threshold-min": {
                                  "description": "Sample integer data is too low.",
                                  "minimum": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object",
                              "x-akamai": {
                                "file-path": "schemas/num.yaml"
                              }
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-empty": {
                      "description": "Enum includes an empty string other than `GROUCHO` and `CHICO`, bad API design.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        ""
                      ],
                      "type": "string"
                    },
                    "str-enum-integer": {
                      "description": "Enum is a set of integer values: `404`, `400`, and `500`.",
                      "enum": [
                        404,
                        500,
                        400
                      ],
                      "type": "string"
                    },
                    "str-enum-integer-range": {
                      "description": "TBD unbroken numeric enum range best expressed as minimum and maximum range.",
                      "type": "string"
                    },
                    "str-enum-keyword-anyof": {
                      "anyOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ],
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps."
                    },
                    "str-enum-keyword-oneof": {
                      "description": "There's no test to log this edge case, but this checks how well\nReadme represents a mixed set of flexible/fixed string values as\nan `anyOf` vs. a `oneOf`. The latter may fail if each logical\nalternative overlaps.",
                      "oneOf": [
                        {
                          "minLength": 1,
                          "title": "Individual user",
                          "type": "string"
                        },
                        {
                          "enum": [
                            "users_in_this_account",
                            "internal_users"
                          ],
                          "title": "Group of users",
                          "type": "string"
                        }
                      ]
                    },
                    "str-enum-nullable": {
                      "description": "This enum is nullable, bad API design. Values: `GROUCHO`, `CHICO`, `HARPO`.",
                      "enum": [
                        "GROUCHO",
                        "CHICO",
                        "HARPO"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "str-enum-orphan": {
                      "description": "Single supported enum value: `ALL_ALONE`. Will this enum set grow?",
                      "enum": [
                        "ALL_ALONE"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated": {
                      "description": "Enum specs the same value redundantly, `HARPO` and the repeated `CHICO`.",
                      "enum": [
                        "CHICO",
                        "CHICO",
                        "HARPO"
                      ],
                      "type": "string"
                    },
                    "str-enum-repeated-case": {
                      "description": "Along with correctly formatted `TWO_WORDS`, enum specs case- and punc-insensitive variants, unlikely: `two-words`, `Two Words`, `twoWords`.",
                      "enum": [
                        "two-words",
                        "Two Words",
                        "TWO_WORDS",
                        "twoWords"
                      ],
                      "type": "string"
                    },
                    "str-enum-string-integer": {
                      "description": "Enum values have stringified numbers: `400`, `404`, and `500`.",
                      "enum": [
                        "400",
                        "500",
                        "404"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-conflict": {
                      "description": "Data type for enum set doesn't match schema type.",
                      "properties": {
                        "integerSchemaStringEnum": {
                          "description": "Schema says integer type, enum is string type. Values: `GROUCHO`, `HARPO`, `CHICO`.",
                          "enum": [
                            "GROUCHO",
                            "HARPO",
                            "CHICO"
                          ],
                          "type": "integer"
                        },
                        "stringSchemaIntegerEnum": {
                          "description": "Schema says string type, enum is integer type. Values: `400`, `401`, `403`.",
                          "enum": [
                            400,
                            403,
                            401
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-type-mixed": {
                      "description": "Enum set includes a mix of data types: `400` integer and `401` string.",
                      "enum": [
                        400,
                        "401"
                      ],
                      "type": "string"
                    },
                    "str-enum-type-weird": {
                      "description": "Data type for enum set is boolean or null.",
                      "properties": {
                        "booleanEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            true,
                            false
                          ],
                          "type": "boolean"
                        },
                        "nullEnum": {
                          "description": "No need to spec booleans or `null` as enum.",
                          "enum": [
                            "GROUCHO",
                            "CHICO",
                            null
                          ],
                          "type": "boolean"
                        },
                        "numericEnum": {
                          "description": "Enum is floating point? Values: `400.1`, `401.2`, `403.3`.",
                          "enum": [
                            401.2,
                            403.3,
                            400.1
                          ],
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-unspeced-desc": {
                      "description": "This is an enum with no spec. The possible values are: 1, 2, 3.",
                      "type": "string"
                    },
                    "str-enum-unspeced-name": {
                      "description": "These should all likely be enums based on their names.",
                      "properties": {
                        "bolusClass": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetwork": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusNetworkId": {
                          "description": "This should not be flagged.",
                          "type": "string"
                        },
                        "bolusOperation": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusStatus": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "bolusType": {
                          "description": "Most likely an enum, no?",
                          "type": "string"
                        },
                        "type": {
                          "description": "This is type that may appear in the problem schema and shouldn't fire `str-enum-unspeced-name`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-enum-values-malformed": {
                      "description": "Enum values that don't follow `UPPERCASE_UNDERSCORE` format.",
                      "enum": [
                        "MalformedValue",
                        "valueIsMalformed",
                        "malformed",
                        "MALFORMED-VALUE",
                        "malformed_value",
                        "malformed-value",
                        "_",
                        "_PREFIXED",
                        "-",
                        "WELL_FORMED_VALUE"
                      ],
                      "type": "string"
                    },
                    "str-fmt-byte": {
                      "description": "A schema for a Base64 string should spec `format: byte`.",
                      "type": "string"
                    },
                    "str-fmt-email": {
                      "description": "The schema should spec `format: email`.",
                      "properties": {
                        "widgetEmail": {
                          "description": "The schema should spec `format: email`.",
                          "type": "string"
                        },
                        "widgetEmails": {
                          "description": "The schema should spec `format: email`.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-hostname": {
                      "description": "Schema should spec `format: hostname`.",
                      "properties": {
                        "widgetHostname": {
                          "description": "Based on the member name, this should be spec'ed with `format: hostname`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-ip": {
                      "description": "Based on name, schema should specify `format: ipv6` or `ipv4`.",
                      "properties": {
                        "missingIp": {
                          "description": "This schema should spec a `format`.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-timestamp": {
                      "description": "Based on their names, schema should spec `format: date-time` or `date`.",
                      "properties": {
                        "alpha2Code": {
                          "description": "The ISO 3166 two-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "alpha3Code": {
                          "description": "The ISO 3166 three-letter code for the region.",
                          "minLength": 1,
                          "type": "string"
                        },
                        "createdTime": {
                          "description": "When the widget was created.",
                          "type": "string"
                        },
                        "deployedTimestamp": {
                          "description": "When the widget was deployed.",
                          "type": "string"
                        },
                        "updatedDate": {
                          "description": "When the widget was updated.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-fmt-uri": {
                      "description": "Schemas should spec'ed as `format: uri`.",
                      "properties": {
                        "hostnameUri": {
                          "description": "A URI member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "hostnameUrl": {
                          "description": "A URL member with a wrong format.",
                          "format": "hostname",
                          "type": "string"
                        },
                        "widgetUri": {
                          "description": "A URI member with no format.",
                          "type": "string"
                        },
                        "widgetUrl": {
                          "description": "A URL member with no format.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "str-min-conflict-format": {
                      "description": "String schema specifies both `minLength` and `format`.",
                      "format": "date-time",
                      "minLength": 1,
                      "type": "string"
                    },
                    "str-min-missing": {
                      "description": "__Beta__, __Bot Manager__ String schema lacks any `minLength`.",
                      "type": "string",
                      "x-akamai": {
                        "labels": [
                          "Bot Manager"
                        ],
                        "status": "BETA"
                      }
                    },
                    "threshold-max": {
                      "description": "Sample string data is too long.",
                      "maxLength": 32,
                      "type": "string"
                    },
                    "threshold-min": {
                      "description": "Sample string data is zero-length, too short.",
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/str.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "An operation with multi type versions",
        "tags": [
          "Multi-type responses"
        ]
      }
    },
    "/op-rsp-patch-data-missing": {
      "patch": {
        "description": "Raise an `op-rsp-patch-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/patch-op-rsp-patch-data-missing"
        },
        "operationId": "patch-op-rsp-patch-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "A PATCH operation with no response data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-post-data-missing": {
      "post": {
        "description": "Raise an `op-rsp-post-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-op-rsp-post-data-missing"
        },
        "operationId": "post-op-rsp-post-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response."
          },
          "201": {
            "content": {},
            "description": "Successful response."
          },
          "400": {
            "content": {},
            "description": "Bad request."
          }
        },
        "summary": "A POST operation with no response data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-post-location-missing": {
      "post": {
        "description": "Raise an `op-rsp-post-location-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-op-rsp-post-location-missing"
        },
        "operationId": "post-op-rsp-post-location-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "additionalProperties": false,
                  "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                  "properties": {
                    "chico": {
                      "description": "Chico.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "groucho": {
                      "description": "Groucho.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    },
                    "harpo": {
                      "description": "Harpo.",
                      "enum": [
                        "MARX"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "groucho",
                    "chico",
                    "harpo"
                  ],
                  "type": "object",
                  "x-akamai": {
                    "file-path": "schemas/noop.yaml"
                  }
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "A POST operation with no Location header",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-rsp-put-data-missing": {
      "put": {
        "description": "Raise an `op-rsp-put-data-missing` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/put-op-rsp-put-data-missing"
        },
        "operationId": "put-op-rsp-put-data-missing",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "chico": "MARX",
                "groucho": "MARX",
                "harpo": "MARX"
              },
              "schema": {
                "additionalProperties": false,
                "description": "Minimal no-op schema useful as a link target, but housing no tests of its own. This helps avoid unnecessary drag from many different test operations unnecessarily linking much larger schemas.",
                "properties": {
                  "chico": {
                    "description": "Chico.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "groucho": {
                    "description": "Groucho.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  },
                  "harpo": {
                    "description": "Harpo.",
                    "enum": [
                      "MARX"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "groucho",
                  "chico",
                  "harpo"
                ],
                "type": "object",
                "x-akamai": {
                  "file-path": "schemas/noop.yaml"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Successful response."
          }
        },
        "summary": "A PUT operation with no response data",
        "tags": [
          "Design issues"
        ]
      }
    },
    "/op-schema-inline": {
      "get": {
        "description": "Raise a `get-op-schema-inline` warning.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/get-op-schema-inline"
        },
        "operationId": "get-op-schema-inline",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "chico": "MARX",
                  "groucho": "MARX",
                  "harpo": "MARX"
                },
                "schema": {
                  "description": "Inline schema.",
                  "properties": {
                    "inlineMember": {
                      "description": "Inline schema.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful response."
          }
        },
        "summary": "Operation's schema linked inline",
        "tags": [
          "OpenAPI spec"
        ]
      }
    },
    "/openapi-enforcer-error": {
      "post": {
        "description": "Serious, blocking mismatches between schema and sample data.\nThese tests are distributed across files because they don't\nall generate as a batch. Different types of enforcer errors\ngenerate only after others are resolved, per file.",
        "externalDocs": {
          "description": "See documentation for this operation in Akamai's Swag-tool Test API",
          "url": "https://techdocs.akamai.com/internal-ux-writing/reference/post-openapi-enforcer-error"
        },
        "operationId": "post-openapi-enforcer-error",
        "parameters": [
          {
            "description": "For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).",
            "in": "query",
            "name": "accountSwitchKey",
            "required": false,
            "schema": {
              "example": "1-5C0YLB:1-8BYUX",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "widgetCategory": "Blue",
                "widgetId": 666,
                "widgetName": "Acme",
                "widgetType": "Red"
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "widgetId": {
                    "type": "integer"
                  },
                  "widgetName": {
                    "type": "string"
                  },
                  "widgetType": {
                    "type": "string"
                  }
                },
                "required": [
                  "widgetId",
                  "widgetName",
                  "widgetType"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Empty response."
          }
        },
        "summary": "openapi-enforcer errors",
        "tags": [
          "Spec"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://{hostname}/test-suite/v2"
    }
  ],
  "x-akamai": {
    "auth-type": "EDGE_GRID",
    "file-path": "08-response.yaml"
  },
  "x-readme": {
    "samples-languages": [
      "curl",
      "python",
      "node"
    ]
  }
}